(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.PathTracer = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Tracer_1=require("./Tracer"),screenWidth=400,screenHeight=400,canvas=document.createElement("canvas"),ctx=canvas.getContext("2d"),image,tracer;canvas.width=screenWidth,canvas.height=screenHeight,document.body.appendChild(canvas),tracer=new Tracer_1.Tracer(ctx,screenWidth,screenHeight),tracer.run(),image=canvas.toDataURL("image/png"),document.write("<img src='"+image+"' />");


},{"./Tracer":2}],2:[function(require,module,exports){
var Tracer=function(){function e(e,t,i){this.buffer=[],this.iteration=0,this.numberOfWorkers=8,this.screenWidth=250,this.screenHeight=250,this.ctx=e,this.screenWidth=t,this.screenHeight=i,this.image=e.getImageData(0,0,this.screenWidth,this.screenHeight),this.imageData=this.image.data;for(var r=0;r<this.screenWidth*this.screenHeight*3;r++)this.buffer.push(0)}return e.prototype.run=function(){for(var e=this,t=0;t<this.numberOfWorkers;t++){var i=new Worker("TracerWorker.js");i.onmessage=function(t){e.iteration++,console.log(e.iteration);for(var i=t.data,r=0;r<i.length;r++)e.buffer[r]+=i[r];for(var a=0,s=0;a<e.screenWidth*e.screenHeight*4;)e.imageData[a++]=255*e.buffer[s++]/e.iteration,e.imageData[a++]=255*e.buffer[s++]/e.iteration,e.imageData[a++]=255*e.buffer[s++]/e.iteration,e.imageData[a++]=255;e.image.data=e.imageData,e.ctx.putImageData(e.image,0,0)},i.postMessage([this.screenWidth,this.screenHeight])}},e}();exports.Tracer=Tracer;


},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvc291cmNlL1BhdGhUcmFjZXIudHMiLCIvc291cmNlL1RyYWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLEdBQUEsVUFBQSxRQUF1QixZQUVqQixZQUFjLElBQ2hCLGFBQWUsSUFFZixPQUE0QixTQUFTLGNBQWMsVUFDbkQsSUFBZ0MsT0FBTyxXQUFXLE1BQ2xELE1BQ0EsTUFFSixRQUFPLE1BQVEsWUFDZixPQUFPLE9BQVMsYUFDaEIsU0FBUyxLQUFLLFlBQVksUUFFMUIsT0FBUyxHQUFJLFVBQUEsT0FBTyxJQUFLLFlBQWEsY0FDdEMsT0FBTyxNQUVQLE1BQVEsT0FBTyxVQUFVLGFBQ3pCLFNBQVMsTUFBTSxhQUFjLE1BQUs7Ozs7QUNsQmxDLEdBQUEsUUFBQSxXQVVJLFFBQUEsR0FBYSxFQUErQixFQUFzQixHQVRsRSxLQUFBLFVBSUEsS0FBQSxVQUFvQixFQUNwQixLQUFBLGdCQUFrQixFQUNsQixLQUFBLFlBQXNCLElBQ3RCLEtBQUEsYUFBdUIsSUFHbkIsS0FBSyxJQUFNLEVBQ1gsS0FBSyxZQUFjLEVBQ25CLEtBQUssYUFBZSxFQUVwQixLQUFLLE1BQVEsRUFBSSxhQUFhLEVBQUcsRUFBRyxLQUFLLFlBQWEsS0FBSyxjQUMzRCxLQUFLLFVBQVksS0FBSyxNQUFZLElBRWxDLEtBQUssR0FBSSxHQUFJLEVBQUcsRUFBSSxLQUFLLFlBQWMsS0FBSyxhQUFlLEVBQUcsSUFDMUQsS0FBSyxPQUFPLEtBQUssR0FrQzdCLE1BOUJXLEdBQUEsVUFBQSxJQUFQLFdBQ0ksSUFBSyxHQURULEdBQUEsS0FDYSxFQUFJLEVBQUcsRUFBSSxLQUFLLGdCQUFpQixJQUFLLENBQzNDLEdBQUksR0FBUyxHQUFJLFFBQU8sa0JBRXhCLEdBQU8sVUFBWSxTQUFDLEdBQ2hCLEVBQUssWUFFTCxRQUFRLElBQUksRUFBSyxVQUlqQixLQUFLLEdBRkQsR0FBTyxFQUFRLEtBRVYsRUFBSSxFQUFHLEVBQUksRUFBSyxPQUFRLElBQzdCLEVBQUssT0FBTyxJQUFNLEVBQUssRUFHM0IsS0FBSSxHQUFJLEdBQUksRUFBRyxFQUFJLEVBQUcsRUFBSSxFQUFLLFlBQWMsRUFBSyxhQUFlLEdBQzdELEVBQUssVUFBVSxLQUEwQixJQUFuQixFQUFLLE9BQU8sS0FBYSxFQUFLLFVBQ3BELEVBQUssVUFBVSxLQUEwQixJQUFuQixFQUFLLE9BQU8sS0FBYSxFQUFLLFVBQ3BELEVBQUssVUFBVSxLQUEwQixJQUFuQixFQUFLLE9BQU8sS0FBYSxFQUFLLFVBQ3BELEVBQUssVUFBVSxLQUFPLEdBRzFCLEdBQUssTUFBWSxLQUFJLEVBQUssVUFFMUIsRUFBSyxJQUFJLGFBQWEsRUFBSyxNQUFPLEVBQUcsSUFHekMsRUFBTyxhQUFhLEtBQUssWUFBYSxLQUFLLGlCQUd2RCxJQXJEYSxTQUFBLE9BQU0iLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiaW1wb3J0IHsgVHJhY2VyIH0gZnJvbSBcIi4vVHJhY2VyXCI7XG5cbmNvbnN0IHNjcmVlbldpZHRoID0gNDAwLFxuICAgIHNjcmVlbkhlaWdodCA9IDQwMDtcblxubGV0IGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLFxuICAgIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEID0gY2FudmFzLmdldENvbnRleHQoJzJkJyksXG4gICAgaW1hZ2U6IGFueSxcbiAgICB0cmFjZXI6IFRyYWNlcjtcblxuY2FudmFzLndpZHRoID0gc2NyZWVuV2lkdGg7XG5jYW52YXMuaGVpZ2h0ID0gc2NyZWVuSGVpZ2h0O1xuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpO1xuXG50cmFjZXIgPSBuZXcgVHJhY2VyKGN0eCwgc2NyZWVuV2lkdGgsIHNjcmVlbkhlaWdodCk7XG50cmFjZXIucnVuKCk7XG5cbmltYWdlID0gY2FudmFzLnRvRGF0YVVSTChcImltYWdlL3BuZ1wiKTtcbmRvY3VtZW50LndyaXRlKGA8aW1nIHNyYz1cXCcke2ltYWdlfVxcJyAvPmApO1xuIiwiZXhwb3J0IGNsYXNzIFRyYWNlciB7XG4gICAgYnVmZmVyOiBudW1iZXJbXSA9IFtdO1xuICAgIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xuICAgIGltYWdlOiBhbnk7XG4gICAgaW1hZ2VEYXRhOiBudW1iZXJbXTtcbiAgICBpdGVyYXRpb246IG51bWJlciA9IDA7XG4gICAgbnVtYmVyT2ZXb3JrZXJzID0gODtcbiAgICBzY3JlZW5XaWR0aDogbnVtYmVyID0gMjUwO1xuICAgIHNjcmVlbkhlaWdodDogbnVtYmVyID0gMjUwO1xuXG4gICAgY29uc3RydWN0b3IgKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBzY3JlZW5XaWR0aD86IG51bWJlciwgc2NyZWVuSGVpZ2h0PzogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgICAgICB0aGlzLnNjcmVlbldpZHRoID0gc2NyZWVuV2lkdGg7XG4gICAgICAgIHRoaXMuc2NyZWVuSGVpZ2h0ID0gc2NyZWVuSGVpZ2h0O1xuXG4gICAgICAgIHRoaXMuaW1hZ2UgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIHRoaXMuc2NyZWVuV2lkdGgsIHRoaXMuc2NyZWVuSGVpZ2h0KTtcbiAgICAgICAgdGhpcy5pbWFnZURhdGEgPSB0aGlzLmltYWdlWydkYXRhJ107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNjcmVlbldpZHRoICogdGhpcy5zY3JlZW5IZWlnaHQgKiAzOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyLnB1c2goMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgcnVuICgpOiB2b2lkIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm51bWJlck9mV29ya2VyczsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgd29ya2VyID0gbmV3IFdvcmtlcignVHJhY2VyV29ya2VyLmpzJyk7XG5cbiAgICAgICAgICAgIHdvcmtlci5vbm1lc3NhZ2UgPSAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlcmF0aW9uKys7XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLml0ZXJhdGlvbik7XG5cbiAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IG1lc3NhZ2UuZGF0YTtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZGF0YS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcltqXSArPSBkYXRhW2pdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvcih2YXIgayA9IDAsIGogPSAwOyBrIDwgdGhpcy5zY3JlZW5XaWR0aCAqIHRoaXMuc2NyZWVuSGVpZ2h0ICogNDspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbWFnZURhdGFbaysrXSA9IHRoaXMuYnVmZmVyW2orK10gKiAyNTUgLyB0aGlzLml0ZXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbWFnZURhdGFbaysrXSA9IHRoaXMuYnVmZmVyW2orK10gKiAyNTUgLyB0aGlzLml0ZXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbWFnZURhdGFbaysrXSA9IHRoaXMuYnVmZmVyW2orK10gKiAyNTUgLyB0aGlzLml0ZXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbWFnZURhdGFbaysrXSA9IDI1NTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlWydkYXRhJ10gPSB0aGlzLmltYWdlRGF0YTtcblxuICAgICAgICAgICAgICAgIHRoaXMuY3R4LnB1dEltYWdlRGF0YSh0aGlzLmltYWdlLCAwLCAwKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZShbdGhpcy5zY3JlZW5XaWR0aCwgdGhpcy5zY3JlZW5IZWlnaHRdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==
