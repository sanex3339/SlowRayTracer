(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.PathTracer = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";var Tracer_1=require("./Tracer"),screenWidth=250,screenHeight=250,canvas=document.createElement("canvas"),ctx=canvas.getContext("2d"),image,tracer;canvas.width=screenWidth,canvas.height=screenHeight,document.body.appendChild(canvas),tracer=new Tracer_1.Tracer(ctx,screenWidth,screenHeight),tracer.run(),image=canvas.toDataURL("image/png"),document.write("<img src='"+image+"' />");


},{"./Tracer":2}],2:[function(require,module,exports){
"use strict";var Tracer=function(){function e(e,t,i){this.buffer=[],this.iteration=0,this.numberOfWorkers=6,this.screenWidth=250,this.screenHeight=250,this.ctx=e,this.screenWidth=t,this.screenHeight=i,this.image=e.getImageData(0,0,this.screenWidth,this.screenHeight),this.imageData=this.image.data;for(var r=0;r<this.screenWidth*this.screenHeight*3;r++)this.buffer.push(0)}return e.prototype.run=function(){for(var e=this,t=0;t<this.numberOfWorkers;t++){var i=new Worker("TracerWorker.js");i.onmessage=function(t){e.iteration++,console.log(e.iteration);for(var i=t.data,r=0;r<i.length;r++)e.buffer[r]+=i[r];for(var a=0,s=0;a<e.screenWidth*e.screenHeight*4;)e.imageData[a++]=255*e.buffer[s++]/e.iteration,e.imageData[a++]=255*e.buffer[s++]/e.iteration,e.imageData[a++]=255*e.buffer[s++]/e.iteration,e.imageData[a++]=255;e.image.data.set(e.imageData),e.ctx.putImageData(e.image,0,0)},i.postMessage([this.screenWidth,this.screenHeight])}},e}();exports.Tracer=Tracer;


},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
