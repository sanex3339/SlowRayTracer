(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.TraceWorker = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Vector_1=require("./Vector"),Camera=function(){function t(t,r,e,o){this.position=t,this.direction=Vector_1.Vector.normalized(r),this.screenWidth=e,this.screenHeight=o,this.forwardVector=Vector_1.Vector.normalized(Vector_1.Vector.substract(this.direction,this.position)),this.rightVector=Vector_1.Vector.scaled(Vector_1.Vector.normalized(Vector_1.Vector.cross(this.forwardVector,new Vector_1.Vector(0,-1,0))),3),this.upVector=Vector_1.Vector.scaled(Vector_1.Vector.normalized(Vector_1.Vector.cross(this.forwardVector,this.rightVector)),3)}return t.prototype.getDirection=function(){return this.direction},t.prototype.getPosition=function(){return this.position},t.prototype.getForwardVector=function(){return this.forwardVector},t.prototype.getRightVector=function(){return this.rightVector},t.prototype.getUpVector=function(){return this.upVector},t.prototype.recenterX=function(t){var r=this.screenHeight/this.screenWidth*2;return(t-this.screenWidth/2)/r/this.screenWidth},t.prototype.recenterY=function(t){return-(t-this.screenHeight/2)/2/this.screenHeight},t}();exports.Camera=Camera;


},{"./Vector":15}],2:[function(require,module,exports){
var FloatColor_1=require("./FloatColor"),Color=function(){function o(o){this.red=o.red,this.green=o.green,this.blue=o.blue}return o.prototype.add=function(e){return new o(new FloatColor_1.FloatColor(this.red+e.red,this.green+e.green,this.blue+e.blue))},o.prototype.substract=function(e){return new o(new FloatColor_1.FloatColor(this.red-e.red,this.green-e.green,this.blue-e.blue))},o.prototype.scaled=function(e){return new o(new FloatColor_1.FloatColor(this.red*e,this.green*e,this.blue*e))},o.prototype.multiple=function(e){return new o(new FloatColor_1.FloatColor(this.red*e.red,this.green*e.green,this.blue*e.blue))},o.prototype.divide=function(e){return new o(new FloatColor_1.FloatColor(this.red/e,this.green/e,this.blue/e))},o.sRGBEncode=function(o){return.0031308>=o?12.92*o:1.055*Math.pow(o,.4166667)-.055},o.toRGB=function(e){return{red:Math.floor(255*o.clampColor(e.red)),green:Math.floor(255*o.clampColor(e.green)),blue:Math.floor(255*o.clampColor(e.blue))}},o.clampColor=function(o){return o>1?1:o},o}();exports.Color=Color;


},{"./FloatColor":3}],3:[function(require,module,exports){
var FloatColor=function(){function o(o,t,r){this.red=o,this.green=t,this.blue=r}return o}();exports.FloatColor=FloatColor;


},{}],4:[function(require,module,exports){
var RGBColor=function(){function o(t,r,n){this.red=o.toFloat(t),this.green=o.toFloat(r),this.blue=o.toFloat(n)}return o.toFloat=function(o){return 0===o?o:o/255},o}();exports.RGBColor=RGBColor;


},{}],5:[function(require,module,exports){
var AbstractLight=function(){function t(){}return t}();exports.AbstractLight=AbstractLight;


},{}],6:[function(require,module,exports){
var __extends=this&&this.__extends||function(t,r){function e(){this.constructor=t}for(var o in r)r.hasOwnProperty(o)&&(t[o]=r[o]);t.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)},AbstractLight_1=require("./AbstractLight"),Color_1=require("./../Color/Color"),Material_1=require("./../Material"),RGBColor_1=require("./../Color/RGBColor"),RTMath_1=require("./../RTMath"),Vector_1=require("./../Vector"),SphericalLight=function(t){function r(r,e,o){t.call(this),this.radius=50,this.fadeRadius=2500,this.material=new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(244,244,244)),0).setLambertCoeff(1),this.type="light",this.position=r,this.power=e,o&&(this.radius=o)}return __extends(r,t),r.prototype.getFadeRadius=function(){return this.radius+this.fadeRadius},r.prototype.getPosition=function(){return this.position},r.prototype.getPower=function(){return this.power},r.prototype.getRadius=function(){return this.radius},r.prototype.getRandomPoint=function(){var t=Math.random(),r=Math.random(),e=2*Math.PI*t,o=Math.pow(Math.cos(2*r-1),-1);return new Vector_1.Vector(this.radius*Math.cos(e)*Math.sin(o),this.radius*Math.sin(e)*Math.sin(o),this.radius*Math.cos(o))},r.prototype.getIntersectData=function(t){var r,e,o,i,a,s,n,h=Vector_1.Vector.substract(t.getOrigin(),this.position),c=Vector_1.Vector.dot(h,t.getDirection()),u=Vector_1.Vector.dot(h,h)-Math.pow(this.radius,2),p=Math.pow(c,2)-u;if(!(c>0||0>p||p>=0&&(r=-c+Math.sqrt(p),e=-c-Math.sqrt(p),o=Math.min(r,e),i=Math.max(r,e),a=o>RTMath_1.RTMath.EPSILON?o:i,a<RTMath_1.RTMath.EPSILON)))return s=Vector_1.Vector.add(Vector_1.Vector.scaled(t.getDirection(),a),t.getOrigin()),n=Vector_1.Vector.substract(s,t.getOrigin()).getLength(),{point:s,distance:n}},r.prototype.getNormal=function(t){return Vector_1.Vector.normalized(Vector_1.Vector.scaled(Vector_1.Vector.substract(t,this.position),1/this.radius))},r.prototype.getMaterial=function(){return this.material},r.prototype.getType=function(){return this.type},r.prototype.setMaterial=function(t){return this.material=t,this},r}(AbstractLight_1.AbstractLight);exports.SphericalLight=SphericalLight;


},{"./../Color/Color":2,"./../Color/RGBColor":4,"./../Material":7,"./../RTMath":11,"./../Vector":15,"./AbstractLight":5}],7:[function(require,module,exports){
var Color_1=require("./Color/Color"),RGBColor_1=require("./Color/RGBColor"),Material=function(){function o(o,t){void 0===o&&(o=new Color_1.Color(new RGBColor_1.RGBColor(255,0,0))),void 0===t&&(t=0),this.lambertCoeff=.5,this.phongCoeff=.5,this.reflectionCoeff=0,this.color=o,this.reflectionCoeff=t}return o.prototype.getColor=function(){return this.color},o.prototype.getLambertCoeff=function(){return this.lambertCoeff},o.prototype.getPhongCoeff=function(){return this.phongCoeff},o.prototype.getReflectionValue=function(){return this.reflectionCoeff},o.prototype.setLambertCoeff=function(o){return this.lambertCoeff=o,this.phongCoeff=1-o,this},o.prototype.setPhongCoeff=function(o){return this.phongCoeff=o,this.lambertCoeff=1-o,this},o}();exports.Material=Material;


},{"./Color/Color":2,"./Color/RGBColor":4}],8:[function(require,module,exports){
var AbstractObject=function(){function t(){}return t}();exports.AbstractObject=AbstractObject;


},{}],9:[function(require,module,exports){
var __extends=this&&this.__extends||function(t,e){function r(){this.constructor=t}for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},RTMath_1=require("../RTMath"),AbstractObject_1=require("./AbstractObject"),Color_1=require("../Color/Color"),Material_1=require("../Material"),RGBColor_1=require("../Color/RGBColor"),Vector_1=require("../Vector"),Polygon=function(t){function e(){for(var e=[],r=0;r<arguments.length;r++)e[r-0]=arguments[r];t.call(this),this.material=new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(115,115,115)),0),this.type="surface",this.vertices=e}return __extends(e,t),e.prototype.getIntersectData=function(t){var r,o,c,i,s,n=this.getNormal();if(o=Vector_1.Vector.dot(this.vertices[0],n),s=Vector_1.Vector.dot(n,t.getDirection()),i=-Vector_1.Vector.dot(n,t.getOrigin())+o,r=i/s,!(r<RTMath_1.RTMath.EPSILON)){t.setDistance(r),c=t.getHitPoint();for(var a=0,l=this.vertices.length;l>a;a++){var u=this.vertices[a],h=void 0;if(h=a===l-1?this.vertices[0]:this.vertices[a+1],!e.checkSameClockDir(Vector_1.Vector.substract(h,u),Vector_1.Vector.substract(c,u),this.getNormal()))return}return r=Vector_1.Vector.substract(c,t.getOrigin()).getLength(),{point:c,distance:r}}},e.prototype.getMaterial=function(){return this.material},e.prototype.getNormal=function(){var t=Vector_1.Vector.substract(this.vertices[2],this.vertices[0]),e=Vector_1.Vector.substract(this.vertices[1],this.vertices[0]);return Vector_1.Vector.normalized(Vector_1.Vector.cross(t,e))},e.prototype.getType=function(){return this.type},e.prototype.setMaterial=function(t){return this.material=t,this},e.checkSameClockDir=function(t,e,r){var o=Vector_1.Vector.cross(e,t);return Vector_1.Vector.dot(o,r)>=0},e}(AbstractObject_1.AbstractObject);exports.Polygon=Polygon;


},{"../Color/Color":2,"../Color/RGBColor":4,"../Material":7,"../RTMath":11,"../Vector":15,"./AbstractObject":8}],10:[function(require,module,exports){
var __extends=this&&this.__extends||function(t,e){function r(){this.constructor=t}for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},RTMath_1=require("../RTMath"),AbstractObject_1=require("./AbstractObject"),Color_1=require("../Color/Color"),Material_1=require("../Material"),RGBColor_1=require("../Color/RGBColor"),Vector_1=require("../Vector"),Sphere=function(t){function e(e,r){t.call(this),this.material=new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,0,0)),0),this.type="surface",this.center=e,this.radius=r}return __extends(e,t),e.prototype.getIntersectData=function(t){var e,r,o,i,a,c,n,s=Vector_1.Vector.substract(t.getOrigin(),this.center),h=Vector_1.Vector.dot(s,t.getDirection()),u=Vector_1.Vector.dot(s,s)-Math.pow(this.radius,2),l=Math.pow(h,2)-u;if(!(h>0||0>l||l>=0&&(e=-h+Math.sqrt(l),r=-h-Math.sqrt(l),o=Math.min(e,r),i=Math.max(e,r),a=o>RTMath_1.RTMath.EPSILON?o:i,a<RTMath_1.RTMath.EPSILON)))return c=Vector_1.Vector.add(Vector_1.Vector.scaled(t.getDirection(),a),t.getOrigin()),n=Vector_1.Vector.substract(c,t.getOrigin()).getLength(),{point:c,distance:n}},e.prototype.getMaterial=function(){return this.material},e.prototype.getNormal=function(t){return Vector_1.Vector.normalized(Vector_1.Vector.scaled(Vector_1.Vector.substract(t,this.center),1/this.radius))},e.prototype.getType=function(){return this.type},e.prototype.setMaterial=function(t){return this.material=t,this},e}(AbstractObject_1.AbstractObject);exports.Sphere=Sphere;


},{"../Color/Color":2,"../Color/RGBColor":4,"../Material":7,"../RTMath":11,"../Vector":15,"./AbstractObject":8}],11:[function(require,module,exports){
var RTMath;!function(t){t.EPSILON=.001}(RTMath=exports.RTMath||(exports.RTMath={}));


},{}],12:[function(require,module,exports){
var Vector_1=require("./Vector"),Ray=function(){function t(t,i,e){this.distance=0,this.iteration=8,this.origin=t,this.direction=Vector_1.Vector.normalized(i),e&&(this.iteration=e)}return t.prototype.getDirection=function(){return this.direction},t.prototype.getDistance=function(){return this.distance},t.prototype.getIteration=function(){return this.iteration},t.prototype.getOrigin=function(){return this.origin},t.prototype.getHitPoint=function(){return Vector_1.Vector.add(this.origin,Vector_1.Vector.scaled(this.direction,this.distance))},t.prototype.setDistance=function(t){this.distance=t},t.prototype.setIteration=function(t){this.iteration=t},t}();exports.Ray=Ray;


},{"./Vector":15}],13:[function(require,module,exports){
var Scene=function(){function t(t){this.objects=[],this.lights=[],this.objects=t.objects,this.camera=t.camera,this.lights=t.lights}return t.prototype.addObject=function(t){this.objects.push(t)},t.prototype.getCamera=function(){return this.camera},t.prototype.getLights=function(){return this.lights},t.prototype.getObjects=function(){return this.objects},t}();exports.Scene=Scene;


},{}],14:[function(require,module,exports){
var Camera_1=require("./Camera"),Color_1=require("./Color/Color"),Ray_1=require("./Ray"),RGBColor_1=require("./Color/RGBColor"),Scene_1=require("./Scene"),Sphere_1=require("./Objects/Sphere"),Vector_1=require("./Vector"),SphericalLight_1=require("./Lights/SphericalLight"),Material_1=require("./Material"),Polygon_1=require("./Objects/Polygon"),Tracer=function(){function e(){this.raysPerPixel=8,this.screenWidth=250,this.screenHeight=250}return e.prototype.getColor=function(e,o){void 0===o&&(o=!0);var r=this.trace(e),t=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),n=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0));return null===r.owner?new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)):(t=this.getDiffuseColor(e,r,o),o&&(n=this.getReflectionColor(e,r)),t.add(n))},e.prototype.getDiffuseColor=function(e,o,r){void 0===r&&(r=!0);for(var t,n,a,l,c,i,_,w,C=50,V=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),s=0,g=this.scene.getLights();s<g.length;s++){var d=g[s];if("light"===o.ownerType)return o.owner.getMaterial().getColor();var h=this.getLightPower(o,d);if(t=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),n=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),a=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),l=Vector_1.Vector.normalized(Vector_1.Vector.substract(o.point,d.getPosition())),i=-Vector_1.Vector.dot(l,o.normal),t=t.add(o.owner.getMaterial().getColor().multiple(d.getMaterial().getColor().scaled(h*i*o.owner.getMaterial().getLambertCoeff()))),r)for(var R=function(e){for(;;){var o=new Vector_1.Vector(Math.random()-.5,Math.random()-.5,Math.random()-.5);if(!(Vector_1.Vector.dot(o,o)>1))return o=Vector_1.Vector.normalized(o),Vector_1.Vector.dot(o,e)<0&&(o=Vector_1.Vector.inverse(o)),o}},p=0;C>p;++p){var u=R(o.owner.getNormal(o.point)),f=this.getColor(new Ray_1.Ray(o.point,u),!1),M=Vector_1.Vector.dot(u,o.owner.getNormal(o.point));n=n.add(o.owner.getMaterial().getColor().divide(Math.PI).multiple(f.scaled(M)))}c=Vector_1.Vector.reflect(l,o.normal),_=-Vector_1.Vector.dot(c,e.getDirection()),_>0&&(w=Math.pow(_,35),a=a.add(o.owner.getMaterial().getColor().multiple(d.getMaterial().getColor().scaled(h*w*o.owner.getMaterial().getPhongCoeff())))),V=V.add(t.add(n.divide(C))).add(a)}return V},e.prototype.getReflectionColor=function(e,o){var r,t,n=o.owner.getMaterial().getReflectionValue();return e.setIteration(e.getIteration()-1),0===e.getIteration()||0===n?new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)):(t=Vector_1.Vector.reflect(e.getDirection(),o.normal),r=this.getColor(new Ray_1.Ray(o.point,t,e.getIteration())).scaled(n))},e.prototype.getPerspectiveVector=function(e,o,r,t){var n=this.scene.getCamera();return Vector_1.Vector.normalized(Vector_1.Vector.add(n.getForwardVector(),Vector_1.Vector.add(Vector_1.Vector.scaled(n.getRightVector(),n.recenterX(e)),Vector_1.Vector.scaled(n.getUpVector(),n.recenterY(o)))))},e.prototype.getLightPower=function(e,o){for(var r,t=200,n=o.getPower(),a=0,l=0;t>l;l++){r=o.getRandomPoint();var c=this.trace(new Ray_1.Ray(e.point,Vector_1.Vector.substract(Vector_1.Vector.substract(o.getPosition(),r),e.point)));null!==c.point&&c.owner===o&&(a+=(n-Vector_1.Vector.substract(Vector_1.Vector.substract(o.getPosition(),r),e.point).getLength()*(n/o.getFadeRadius()))/t)}return a},e.prototype.trace=function(e){for(var o,r={distance:0,point:null,normal:null,owner:null,ownerType:null},t=this.scene.getObjects().concat(this.scene.getLights()),n=0,a=t;n<a.length;n++){var l=a[n];o=l.getIntersectData(e),o&&o.distance>0&&(null===r.owner||o.distance<r.distance)&&(r.distance=o.distance,r.point=o.point,r.owner=l,r.ownerType=l.getType(),r.normal=r.owner.getNormal(r.point))}return r},e.prototype.render=function(e,o,r,t){var n,a,l,c,i=.5;this.screenWidth=e,this.screenHeight=o,n=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0));for(var _=0;_<this.raysPerPixel;_++)a=0,this.raysPerPixel>1&&(_%2?a+=Math.random()*i:a-=Math.random()*i),l=new Ray_1.Ray(this.scene.getCamera().getPosition(),this.getPerspectiveVector(r+a,t+a,e,o)),n=n.add(this.getColor(l));n=n.divide(this.raysPerPixel);for(var w in n)n[w]=Color_1.Color.sRGBEncode(n[w]);c=Color_1.Color.toRGB(n),self.postMessage([r,t,c.red,c.green,c.blue])},e.prototype.setScene=function(e){this.scene=e},e}();onmessage=function(e){var o=e.data;"string"==typeof o&&(o=JSON.parse("["+o+"]"));var r=new Tracer;r.setScene(new Scene_1.Scene({camera:new Camera_1.Camera(new Vector_1.Vector(0,0,-699),new Vector_1.Vector(0,0,1),o[0],o[1]),lights:[new SphericalLight_1.SphericalLight(new Vector_1.Vector(0,640,0),1.2,50).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255))))],objects:[new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(700,-700,700),new Vector_1.Vector(-700,-700,700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,700),new Vector_1.Vector(700,-700,700),new Vector_1.Vector(700,700,700),new Vector_1.Vector(-700,700,700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,700,-700),new Vector_1.Vector(-700,700,700),new Vector_1.Vector(700,700,700),new Vector_1.Vector(700,700,-700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(700,-700,700),new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(700,700,-700),new Vector_1.Vector(700,700,700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(0,0,255)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(-700,-700,700),new Vector_1.Vector(-700,700,700),new Vector_1.Vector(-700,700,-700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,0,0)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(-700,700,-700),new Vector_1.Vector(700,700,-700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),0).setLambertCoeff(1)),new Sphere_1.Sphere(new Vector_1.Vector(-250,-500,450),200).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),1)),new Sphere_1.Sphere(new Vector_1.Vector(250,-500,400),200).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(0,255,0)),0))]})),r.render(o[0],o[1],o[2],o[3])};


},{"./Camera":1,"./Color/Color":2,"./Color/RGBColor":4,"./Lights/SphericalLight":6,"./Material":7,"./Objects/Polygon":9,"./Objects/Sphere":10,"./Ray":12,"./Scene":13,"./Vector":15}],15:[function(require,module,exports){
var Vector=function(){function t(t,n,r){this.x=t,this.y=n,this.z=r}return t.prototype.getCoordinates=function(){return{x:this.x,y:this.y,z:this.z}},t.prototype.asArray=function(){return[this.x,this.y,this.z]},t.prototype.getLength=function(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2)+Math.pow(this.z,2))},t.add=function(n,r){return new t(n.x+r.x,n.y+r.y,n.z+r.z)},t.substract=function(n,r){return new t(n.x-r.x,n.y-r.y,n.z-r.z)},t.scaled=function(n,r){return new t(n.x*r,n.y*r,n.z*r)},t.cross=function(n,r){return new t(n.y*r.z-n.z*r.y,n.z*r.x-n.x*r.z,n.x*r.y-n.y*r.x)},t.inverse=function(n){return t.scaled(n,-1)},t.dot=function(t,n){return t.x*n.x+t.y*n.y+t.z*n.z},t.normalized=function(n){return t.scaled(n,1/n.getLength())},t.reflect=function(n,r){var e=2*t.dot(n,r);return t.substract(n,t.scaled(r,e))},t}();exports.Vector=Vector;


},{}]},{},[14])(14)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
