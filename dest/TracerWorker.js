(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.TraceWorker = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Vector_1=require("./Vector"),Camera=function(){function t(t,r,e,o){this.position=t,this.direction=Vector_1.Vector.normalize(r),this.screenWidth=e,this.screenHeight=o,this.forwardVector=Vector_1.Vector.normalize(Vector_1.Vector.substract(this.direction,this.position)),this.rightVector=Vector_1.Vector.scale(Vector_1.Vector.normalize(Vector_1.Vector.cross(this.forwardVector,new Vector_1.Vector(0,-1,0))),3),this.upVector=Vector_1.Vector.scale(Vector_1.Vector.normalize(Vector_1.Vector.cross(this.forwardVector,this.rightVector)),3)}return t.prototype.getDirection=function(){return this.direction},t.prototype.getPosition=function(){return this.position},t.prototype.getForwardVector=function(){return this.forwardVector},t.prototype.getRightVector=function(){return this.rightVector},t.prototype.getUpVector=function(){return this.upVector},t.prototype.recenterX=function(t){var r=this.screenHeight/this.screenWidth*2;return(t-this.screenWidth/2)/r/this.screenWidth},t.prototype.recenterY=function(t){return-(t-this.screenHeight/2)/2/this.screenHeight},t}();exports.Camera=Camera;


},{"./Vector":16}],2:[function(require,module,exports){
var RGBColor_1=require("./RGBColor"),FloatColor_1=require("./FloatColor"),Color=function(){function o(o){this.red=o.red,this.green=o.green,this.blue=o.blue}return o.prototype.getColor=function(){return{red:this.red,green:this.green,blue:this.blue}},o.prototype.add=function(e){return new o(new FloatColor_1.FloatColor(this.red+e.red,this.green+e.green,this.blue+e.blue))},o.prototype.substract=function(e){return new o(new FloatColor_1.FloatColor(this.red-e.red,this.green-e.green,this.blue-e.blue))},o.prototype.scaled=function(e){return new o(new FloatColor_1.FloatColor(this.red*e,this.green*e,this.blue*e))},o.prototype.multiple=function(e){return new o(new FloatColor_1.FloatColor(this.red*e.red,this.green*e.green,this.blue*e.blue))},o.prototype.divide=function(e){return new o(new FloatColor_1.FloatColor(this.red/e,this.green/e,this.blue/e))},o.sRGBEncode=function(o){return.0031308>=o?12.92*o:1.055*Math.pow(o,.4166667)-.055},o.toRGB=function(e){return{red:Math.floor(255*o.clampColor(e.red)),green:Math.floor(255*o.clampColor(e.green)),blue:Math.floor(255*o.clampColor(e.blue))}},o.clampColor=function(o){return o>1?1:o},o.black=new o(new RGBColor_1.RGBColor(0,0,0)),o.white=new o(new RGBColor_1.RGBColor(255,255,255)),o.gray=new o(new RGBColor_1.RGBColor(127,127,127)),o.red=new o(new RGBColor_1.RGBColor(255,0,0)),o.green=new o(new RGBColor_1.RGBColor(0,255,0)),o.blue=new o(new RGBColor_1.RGBColor(0,0,255)),o}();exports.Color=Color;


},{"./FloatColor":3,"./RGBColor":4}],3:[function(require,module,exports){
var FloatColor=function(){function o(o,t,r){this.red=o,this.green=t,this.blue=r}return o}();exports.FloatColor=FloatColor;


},{}],4:[function(require,module,exports){
var RGBColor=function(){function o(t,r,n){this.red=o.toFloat(t),this.green=o.toFloat(r),this.blue=o.toFloat(n)}return o.toFloat=function(o){return 0===o?o:o/255},o}();exports.RGBColor=RGBColor;


},{}],5:[function(require,module,exports){
var IntersectPoint=function(){function t(){this.intersected=!1}return t.prototype.getIntersect=function(){return this.intersected},t.prototype.getHitPoint=function(){return this.hitPoint},t.prototype.getNormal=function(){return this.normal},t.prototype.getOwner=function(){return this.owner},t.prototype.getDistanceFromOrigin=function(){return this.distanceFromOrigin},t.prototype.setIntersect=function(){this.intersected=!0},t.prototype.setHitPoint=function(t){this.hitPoint=t},t.prototype.setNormal=function(t){this.normal=t},t.prototype.setOwner=function(t){this.owner=t},t.prototype.setDistanceFromOrigin=function(t){this.distanceFromOrigin=t},t}();exports.IntersectPoint=IntersectPoint;


},{}],6:[function(require,module,exports){
var AbstractLight=function(){function t(){}return t}();exports.AbstractLight=AbstractLight;


},{}],7:[function(require,module,exports){
var __extends=this&&this.__extends||function(t,r){function e(){this.constructor=t}for(var o in r)r.hasOwnProperty(o)&&(t[o]=r[o]);t.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)},AbstractLight_1=require("./AbstractLight"),Color_1=require("./../Color/Color"),Material_1=require("./../Material"),RGBColor_1=require("./../Color/RGBColor"),RTMath_1=require("./../RTMath"),Vector_1=require("./../Vector"),SphericalLight=function(t){function r(r,e,o){t.call(this),this.radius=50,this.fadeRadius=2500,this.material=new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(244,244,244)),0).setLambertCoeff(1),this.center=r,this.power=e,o&&(this.radius=o)}return __extends(r,t),r.prototype.getFadeRadius=function(){return this.radius+this.fadeRadius},r.prototype.getPosition=function(){return this.center},r.prototype.getPower=function(){return this.power},r.prototype.getRadius=function(){return this.radius},r.prototype.getRandomPoint=function(){var t=Math.random(),r=Math.random(),e=2*Math.PI*t,o=Math.pow(Math.cos(2*r-1),-1);return new Vector_1.Vector(this.radius*Math.cos(e)*Math.sin(o),this.radius*Math.sin(e)*Math.sin(o),this.radius*Math.cos(o))},r.prototype.getIntersectData=function(t){var r,e,o,i,a,n,s,c=Vector_1.Vector.substract(t.getOrigin(),this.center),h=Vector_1.Vector.dot(c,t.getDirection()),u=Vector_1.Vector.dot(c,c)-Math.pow(this.radius,2),p=Math.pow(h,2)-u;if(!(h>0||0>p||p>=0&&(r=-h+Math.sqrt(p),e=-h-Math.sqrt(p),o=Math.min(r,e),i=Math.max(r,e),a=o>RTMath_1.RTMath.EPSILON?o:i,a<RTMath_1.RTMath.EPSILON)))return n=Vector_1.Vector.add(Vector_1.Vector.scale(t.getDirection(),a),t.getOrigin()),s=Vector_1.Vector.substract(n,t.getOrigin()).getLength(),{hitPoint:n,normal:this.getNormal(n),distance:s}},r.prototype.getNormal=function(t){return Vector_1.Vector.normalize(Vector_1.Vector.scale(Vector_1.Vector.substract(t,this.center),1/this.radius))},r.prototype.getMaterial=function(){return this.material},r.prototype.setMaterial=function(t){return this.material=t,this},r}(AbstractLight_1.AbstractLight);exports.SphericalLight=SphericalLight;


},{"./../Color/Color":2,"./../Color/RGBColor":4,"./../Material":8,"./../RTMath":12,"./../Vector":16,"./AbstractLight":6}],8:[function(require,module,exports){
var Color_1=require("./Color/Color"),RGBColor_1=require("./Color/RGBColor"),Material=function(){function o(o,t){void 0===o&&(o=new Color_1.Color(new RGBColor_1.RGBColor(255,0,0))),void 0===t&&(t=0),this.lambertCoeff=.5,this.phongCoeff=.5,this.reflectionCoeff=0,this.color=o,this.reflectionCoeff=t}return o.prototype.getColor=function(){return this.color},o.prototype.getLambertCoeff=function(){return this.lambertCoeff},o.prototype.getPhongCoeff=function(){return this.phongCoeff},o.prototype.getReflectionValue=function(){return this.reflectionCoeff},o.prototype.setLambertCoeff=function(o){return this.lambertCoeff=o,this.phongCoeff=1-o,this},o.prototype.setPhongCoeff=function(o){return this.phongCoeff=o,this.lambertCoeff=1-o,this},o}();exports.Material=Material;


},{"./Color/Color":2,"./Color/RGBColor":4}],9:[function(require,module,exports){
var AbstractObject=function(){function t(){}return t}();exports.AbstractObject=AbstractObject;


},{}],10:[function(require,module,exports){
var __extends=this&&this.__extends||function(t,e){function r(){this.constructor=t}for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},AbstractObject_1=require("./AbstractObject"),Color_1=require("../Color/Color"),Material_1=require("../Material"),RTMath_1=require("../RTMath"),Vector_1=require("../Vector"),Plane=function(t){function e(e,r){t.call(this),this.point=new Vector_1.Vector(0,0,0),this.material=new Material_1.Material(Color_1.Color.gray,0),this.normal=e,r&&(this.point=r)}return __extends(e,t),e.prototype.getIntersectData=function(t){var e,r,o=Vector_1.Vector.dot(Vector_1.Vector.substract(this.point,t.getOrigin()),this.normal)/Vector_1.Vector.dot(t.getDirection(),this.getNormal());if(!(o<=RTMath_1.RTMath.EPSILON))return r=Vector_1.Vector.add(t.getOrigin(),Vector_1.Vector.scale(t.getDirection(),o)),e=Vector_1.Vector.substract(r,t.getOrigin()).getLength(),{hitPoint:r,normal:this.getNormal(),distance:e}},e.prototype.getMaterial=function(){return this.material},e.prototype.getNormal=function(){return this.normal},e.prototype.setMaterial=function(t){return this.material=t,this},e}(AbstractObject_1.AbstractObject);exports.Plane=Plane;


},{"../Color/Color":2,"../Material":8,"../RTMath":12,"../Vector":16,"./AbstractObject":9}],11:[function(require,module,exports){
var __extends=this&&this.__extends||function(t,e){function r(){this.constructor=t}for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},RTMath_1=require("../RTMath"),AbstractObject_1=require("./AbstractObject"),Color_1=require("../Color/Color"),Material_1=require("../Material"),Vector_1=require("../Vector"),Sphere=function(t){function e(e,r){t.call(this),this.material=new Material_1.Material(Color_1.Color.red,0),this.center=e,this.radius=r}return __extends(e,t),e.prototype.getIntersectData=function(t){var e,r,o,a,i,c,n,s=Vector_1.Vector.substract(t.getOrigin(),this.center),h=Vector_1.Vector.dot(s,t.getDirection()),u=Vector_1.Vector.dot(s,s)-Math.pow(this.radius,2),_=Math.pow(h,2)-u;if(!(h>0||0>_||_>=0&&(e=-h+Math.sqrt(_),r=-h-Math.sqrt(_),o=Math.min(e,r),a=Math.max(e,r),i=o>RTMath_1.RTMath.EPSILON?o:a,i<RTMath_1.RTMath.EPSILON)))return c=Vector_1.Vector.add(Vector_1.Vector.scale(t.getDirection(),i),t.getOrigin()),n=Vector_1.Vector.substract(c,t.getOrigin()).getLength(),{hitPoint:c,normal:this.getNormal(c),distance:n}},e.prototype.getMaterial=function(){return this.material},e.prototype.getNormal=function(t){return Vector_1.Vector.normalize(Vector_1.Vector.scale(Vector_1.Vector.substract(t,this.center),1/this.radius))},e.prototype.setMaterial=function(t){return this.material=t,this},e}(AbstractObject_1.AbstractObject);exports.Sphere=Sphere;


},{"../Color/Color":2,"../Material":8,"../RTMath":12,"../Vector":16,"./AbstractObject":9}],12:[function(require,module,exports){
var RTMath;!function(t){t.EPSILON=.001}(RTMath=exports.RTMath||(exports.RTMath={}));


},{}],13:[function(require,module,exports){
var Vector_1=require("./Vector"),Ray=function(){function t(t,i,r){this.iteration=5,this.origin=t,this.direction=Vector_1.Vector.normalize(i),r&&(this.iteration=r)}return t.prototype.getOrigin=function(){return this.origin},t.prototype.getDirection=function(){return this.direction},t.prototype.getIteration=function(){return this.iteration},t.prototype.getHitPoint=function(t){return Vector_1.Vector.add(this.origin,Vector_1.Vector.scale(this.direction,t))},t.prototype.setIteration=function(t){this.iteration=t},t}();exports.Ray=Ray;


},{"./Vector":16}],14:[function(require,module,exports){
var Scene=function(){function t(t){this.objects=[],this.lights=[],this.objects=t.objects,this.camera=t.camera,this.lights=t.lights}return t.prototype.addObject=function(t){this.objects.push(t)},t.prototype.getCamera=function(){return this.camera},t.prototype.getLights=function(){return this.lights},t.prototype.getObjects=function(){return this.objects},t}();exports.Scene=Scene;


},{}],15:[function(require,module,exports){
var AbstractLight_1=require("./Lights/AbstractLight"),Camera_1=require("./Camera"),Color_1=require("./Color/Color"),IntersectPoint_1=require("./IntersectPoint"),Material_1=require("./Material"),Plane_1=require("./Objects/Plane"),Ray_1=require("./Ray"),RGBColor_1=require("./Color/RGBColor"),Scene_1=require("./Scene"),Sphere_1=require("./Objects/Sphere"),SphericalLight_1=require("./Lights/SphericalLight"),Vector_1=require("./Vector"),Tracer=function(){function e(){this.buffer=[],this.screenWidth=250,this.screenHeight=250;for(var e=0;e<this.screenWidth*this.screenHeight*3;e++)this.buffer.push(Color_1.Color.black)}return e.prototype.cosineSampleHemisphere=function(e){var t,r,o=Math.random(),a=Math.random(),i=Math.sqrt(o),c=2*Math.PI*a;return t=Math.abs(e.getCoordinates().x)<.5?Vector_1.Vector.cross(e,new Vector_1.Vector(1,0,0)):Vector_1.Vector.cross(e,new Vector_1.Vector(0,1,0)),r=Vector_1.Vector.cross(e,t),Vector_1.Vector.add(Vector_1.Vector.scale(e,Math.sqrt(1-o)),Vector_1.Vector.add(Vector_1.Vector.scale(t,i*Math.cos(c)),Vector_1.Vector.scale(r,i*Math.sin(c))))},e.prototype.getColor=function(e){var t=this.trace(e),r=Color_1.Color.black,o=Color_1.Color.black,a=e.getIteration();return e.setIteration(--a),0===a?Color_1.Color.black:t.getIntersect()?(r=this.getDiffuseColor(e,t),o=this.getReflectionColor(e,t),r.add(o)):Color_1.Color.black},e.prototype.getDiffuseColor=function(e,t,r){void 0===r&&(r=!0);for(var o,a,i,c,n,l,s,g,_,h,V=Color_1.Color.black,C=0,w=this.scene.getLights();C<w.length;C++){var f=w[C];if(t.getOwner()instanceof AbstractLight_1.AbstractLight)return t.getOwner().getMaterial().getColor();l=this.getLightPower(t,f),o=Color_1.Color.black,a=Color_1.Color.black,i=Color_1.Color.black,n=Vector_1.Vector.normalize(Vector_1.Vector.substract(t.getHitPoint(),f.getPosition()));var u=void 0;c=this.cosineSampleHemisphere(t.getOwner().getNormal(t.getHitPoint())),u=this.getColor(new Ray_1.Ray(t.getHitPoint(),c,e.getIteration())),i=i.add(u),g=-Vector_1.Vector.dot(n,t.getNormal()),o=o.add(t.getOwner().getMaterial().getColor().add(i).multiple(f.getMaterial().getColor().scaled(l*g*t.getOwner().getMaterial().getLambertCoeff()))),s=Vector_1.Vector.reflect(n,t.getNormal()),_=-Vector_1.Vector.dot(s,e.getDirection()),_>0&&(h=Math.pow(_,35),a=a.add(t.getOwner().getMaterial().getColor().multiple(f.getMaterial().getColor().scaled(l*h*t.getOwner().getMaterial().getPhongCoeff())))),V=V.add(o.add(a))}return V},e.prototype.getReflectionColor=function(e,t){var r,o,a=t.getOwner().getMaterial().getReflectionValue();return 0===a?Color_1.Color.black:(o=Vector_1.Vector.reflect(e.getDirection(),t.getNormal()),r=this.getColor(new Ray_1.Ray(t.getHitPoint(),o,e.getIteration())).scaled(a))},e.prototype.getPerspectiveVector=function(e,t){var r=this.scene.getCamera();return Vector_1.Vector.normalize(Vector_1.Vector.add(r.getForwardVector(),Vector_1.Vector.add(Vector_1.Vector.scale(r.getRightVector(),r.recenterX(e)),Vector_1.Vector.scale(r.getUpVector(),r.recenterY(t)))))},e.prototype.getLightPower=function(e,t){var r,o,a=t.getPower(),i=0;return r=t.getRandomPoint(),o=this.trace(new Ray_1.Ray(e.getHitPoint(),Vector_1.Vector.substract(Vector_1.Vector.substract(t.getPosition(),r),e.getHitPoint()))),o.getIntersect()&&o.getOwner()instanceof AbstractLight_1.AbstractLight&&(i+=a-Vector_1.Vector.substract(Vector_1.Vector.substract(t.getPosition(),r),e.getHitPoint()).getLength()*(a/t.getFadeRadius())),i},e.prototype.trace=function(e){for(var t,r=new IntersectPoint_1.IntersectPoint,o=1/0,a=this.scene.getObjects().concat(this.scene.getLights()),i=0,c=a;i<c.length;i++){var n=c[i];t=n.getIntersectData(e),t&&t.distance<o&&(o=t.distance,r.setIntersect(),r.setHitPoint(t.hitPoint),r.setNormal(t.normal),r.setDistanceFromOrigin(t.distance),r.setOwner(n))}return r},e.prototype.render=function(e,t){var r,o,a,i=.5;for(this.screenWidth=e,this.screenHeight=t;;){r=[];for(var c=0;1>c;c++)for(var n=0,l=0;l<this.screenHeight;l++)for(var s=0;s<this.screenWidth;s++){o=0,Math.random()>.5?o+=Math.random()*i:o-=Math.random()*i,a=new Ray_1.Ray(this.scene.getCamera().getPosition(),this.getPerspectiveVector(s+o,l+o)),this.buffer[n]=Color_1.Color.black.add(this.getColor(a));for(var g in this.buffer[n].getColor())this.buffer[n][g]=Color_1.Color.sRGBEncode(this.buffer[n][g]);r.push(this.buffer[n].getColor().red),r.push(this.buffer[n].getColor().green),r.push(this.buffer[n].getColor().blue),n++}for(var n=0;n<this.buffer.length;n++)this.buffer[n].getColor().red=0,this.buffer[n].getColor().green=0,this.buffer[n].getColor().blue=0;self.postMessage(r)}},e.prototype.setScene=function(e){this.scene=e},e}();onmessage=function(e){var t=e.data;"string"==typeof t&&(t=JSON.parse("["+t+"]"));var r=new Tracer;r.setScene(new Scene_1.Scene({camera:new Camera_1.Camera(new Vector_1.Vector(0,0,-699),new Vector_1.Vector(0,0,1),t[0],t[1]),lights:[new SphericalLight_1.SphericalLight(new Vector_1.Vector(0,600,0),1,100).setMaterial(new Material_1.Material(Color_1.Color.white)),new SphericalLight_1.SphericalLight(new Vector_1.Vector(0,0,0),.6,150).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,235,200))))],objects:[new Plane_1.Plane(new Vector_1.Vector(0,1,0),new Vector_1.Vector(0,-700,0)).setMaterial(new Material_1.Material(Color_1.Color.white,0)),new Plane_1.Plane(new Vector_1.Vector(0,-1,0),new Vector_1.Vector(0,700,0)).setMaterial(new Material_1.Material(Color_1.Color.white,0)),new Plane_1.Plane(new Vector_1.Vector(-1,0,0),new Vector_1.Vector(700,0,0)).setMaterial(new Material_1.Material(Color_1.Color.blue,0)),new Plane_1.Plane(new Vector_1.Vector(1,0,0),new Vector_1.Vector(-700,0,0)).setMaterial(new Material_1.Material(Color_1.Color.red,0)),new Plane_1.Plane(new Vector_1.Vector(0,0,-1),new Vector_1.Vector(0,0,700)).setMaterial(new Material_1.Material(Color_1.Color.white,0)),new Plane_1.Plane(new Vector_1.Vector(0,0,1),new Vector_1.Vector(0,0,-700)).setMaterial(new Material_1.Material(Color_1.Color.black,0)),new Sphere_1.Sphere(new Vector_1.Vector(-250,-500,450),200).setMaterial(new Material_1.Material(Color_1.Color.black,1)),new Sphere_1.Sphere(new Vector_1.Vector(250,-500,400),200).setMaterial(new Material_1.Material(Color_1.Color.green,0))]})),r.render(t[0],t[1])};


},{"./Camera":1,"./Color/Color":2,"./Color/RGBColor":4,"./IntersectPoint":5,"./Lights/AbstractLight":6,"./Lights/SphericalLight":7,"./Material":8,"./Objects/Plane":10,"./Objects/Sphere":11,"./Ray":13,"./Scene":14,"./Vector":16}],16:[function(require,module,exports){
var Vector=function(){function t(t,n,r){this.x=t,this.y=n,this.z=r}return t.prototype.getCoordinates=function(){return{x:this.x,y:this.y,z:this.z}},t.prototype.asArray=function(){return[this.x,this.y,this.z]},t.prototype.getLength=function(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2)+Math.pow(this.z,2))},t.scale=function(n,r){return new t(n.x*r,n.y*r,n.z*r)},t.add=function(n,r){return new t(n.x+r.x,n.y+r.y,n.z+r.z)},t.substract=function(n,r){return new t(n.x-r.x,n.y-r.y,n.z-r.z)},t.dot=function(t,n){return t.x*n.x+t.y*n.y+t.z*n.z},t.cross=function(n,r){return new t(n.y*r.z-n.z*r.y,n.z*r.x-n.x*r.z,n.x*r.y-n.y*r.x)},t.normalize=function(n){return t.scale(n,1/n.getLength())},t.pow=function(n,r){return new t(Math.pow(n.y,r),Math.pow(n.z,r),Math.pow(n.x,r))},t.inverse=function(n){return t.scale(n,-1)},t.reflect=function(n,r){var e=2*t.dot(n,r);return t.substract(n,t.scale(r,e))},t}();exports.Vector=Vector;


},{}]},{},[15])(15)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
