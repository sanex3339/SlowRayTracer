(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.TraceWorker = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Vector_1=require("./Vector"),Camera=function(){function t(t,r,e,o){this.position=t,this.direction=Vector_1.Vector.normalize(r),this.screenWidth=e,this.screenHeight=o,this.forwardVector=Vector_1.Vector.normalize(Vector_1.Vector.substract(this.direction,this.position)),this.rightVector=Vector_1.Vector.scale(Vector_1.Vector.normalize(Vector_1.Vector.cross(this.forwardVector,new Vector_1.Vector(0,-1,0))),3),this.upVector=Vector_1.Vector.scale(Vector_1.Vector.normalize(Vector_1.Vector.cross(this.forwardVector,this.rightVector)),3)}return t.prototype.getDirection=function(){return this.direction},t.prototype.getPosition=function(){return this.position},t.prototype.getForwardVector=function(){return this.forwardVector},t.prototype.getRightVector=function(){return this.rightVector},t.prototype.getUpVector=function(){return this.upVector},t.prototype.recenterX=function(t){var r=this.screenHeight/this.screenWidth*2;return(t-this.screenWidth/2)/r/this.screenWidth},t.prototype.recenterY=function(t){return-(t-this.screenHeight/2)/2/this.screenHeight},t}();exports.Camera=Camera;


},{"./Vector":16}],2:[function(require,module,exports){
var RGBColor_1=require("./RGBColor"),FloatColor_1=require("./FloatColor"),Color=function(){function o(o){this.red=o.red,this.green=o.green,this.blue=o.blue}return o.prototype.add=function(e){return new o(new FloatColor_1.FloatColor(this.red+e.red,this.green+e.green,this.blue+e.blue))},o.prototype.substract=function(e){return new o(new FloatColor_1.FloatColor(this.red-e.red,this.green-e.green,this.blue-e.blue))},o.prototype.scaled=function(e){return new o(new FloatColor_1.FloatColor(this.red*e,this.green*e,this.blue*e))},o.prototype.multiple=function(e){return new o(new FloatColor_1.FloatColor(this.red*e.red,this.green*e.green,this.blue*e.blue))},o.prototype.divide=function(e){return new o(new FloatColor_1.FloatColor(this.red/e,this.green/e,this.blue/e))},o.sRGBEncode=function(o){return.0031308>=o?12.92*o:1.055*Math.pow(o,.4166667)-.055},o.toRGB=function(e){return{red:Math.floor(255*o.clampColor(e.red)),green:Math.floor(255*o.clampColor(e.green)),blue:Math.floor(255*o.clampColor(e.blue))}},o.clampColor=function(o){return o>1?1:o},o.black=new o(new RGBColor_1.RGBColor(0,0,0)),o.white=new o(new RGBColor_1.RGBColor(255,255,255)),o.gray=new o(new RGBColor_1.RGBColor(127,127,127)),o.red=new o(new RGBColor_1.RGBColor(255,0,0)),o.green=new o(new RGBColor_1.RGBColor(0,255,0)),o.blue=new o(new RGBColor_1.RGBColor(0,0,255)),o}();exports.Color=Color;


},{"./FloatColor":3,"./RGBColor":4}],3:[function(require,module,exports){
var FloatColor=function(){function o(o,t,r){this.red=o,this.green=t,this.blue=r}return o}();exports.FloatColor=FloatColor;


},{}],4:[function(require,module,exports){
var RGBColor=function(){function o(t,r,n){this.red=o.toFloat(t),this.green=o.toFloat(r),this.blue=o.toFloat(n)}return o.toFloat=function(o){return 0===o?o:o/255},o}();exports.RGBColor=RGBColor;


},{}],5:[function(require,module,exports){
var IntersectPoint=function(){function t(){this.intersected=!1}return t.prototype.getIntersect=function(){return this.intersected},t.prototype.getHitPoint=function(){return this.hitPoint},t.prototype.getNormal=function(){return this.normal},t.prototype.getOwner=function(){return this.owner},t.prototype.getDistanceFromOrigin=function(){return this.distanceFromOrigin},t.prototype.setIntersect=function(){this.intersected=!0},t.prototype.setHitPoint=function(t){this.hitPoint=t},t.prototype.setNormal=function(t){this.normal=t},t.prototype.setOwner=function(t){this.owner=t},t.prototype.setDistanceFromOrigin=function(t){this.distanceFromOrigin=t},t}();exports.IntersectPoint=IntersectPoint;


},{}],6:[function(require,module,exports){
var AbstractLight=function(){function t(){}return t}();exports.AbstractLight=AbstractLight;


},{}],7:[function(require,module,exports){
var __extends=this&&this.__extends||function(t,r){function e(){this.constructor=t}for(var o in r)r.hasOwnProperty(o)&&(t[o]=r[o]);t.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)},AbstractLight_1=require("./AbstractLight"),Color_1=require("./../Color/Color"),Material_1=require("./../Material"),RGBColor_1=require("./../Color/RGBColor"),RTMath_1=require("./../RTMath"),Vector_1=require("./../Vector"),SphericalLight=function(t){function r(r,e,o){t.call(this),this.radius=50,this.fadeRadius=2500,this.material=new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(244,244,244)),0).setLambertCoeff(1),this.center=r,this.power=e,o&&(this.radius=o)}return __extends(r,t),r.prototype.getFadeRadius=function(){return this.radius+this.fadeRadius},r.prototype.getPosition=function(){return this.center},r.prototype.getPower=function(){return this.power},r.prototype.getRadius=function(){return this.radius},r.prototype.getRandomPoint=function(){var t=Math.random(),r=Math.random(),e=2*Math.PI*t,o=Math.pow(Math.cos(2*r-1),-1);return new Vector_1.Vector(this.radius*Math.cos(e)*Math.sin(o),this.radius*Math.sin(e)*Math.sin(o),this.radius*Math.cos(o))},r.prototype.getIntersectData=function(t){var r,e,o,i,a,n,s,c=Vector_1.Vector.substract(t.getOrigin(),this.center),h=Vector_1.Vector.dot(c,t.getDirection()),u=Vector_1.Vector.dot(c,c)-Math.pow(this.radius,2),p=Math.pow(h,2)-u;if(!(h>0||0>p||p>=0&&(r=-h+Math.sqrt(p),e=-h-Math.sqrt(p),o=Math.min(r,e),i=Math.max(r,e),a=o>RTMath_1.RTMath.EPSILON?o:i,a<RTMath_1.RTMath.EPSILON)))return n=Vector_1.Vector.add(Vector_1.Vector.scale(t.getDirection(),a),t.getOrigin()),s=Vector_1.Vector.substract(n,t.getOrigin()).getLength(),{hitPoint:n,normal:this.getNormal(n),distance:s}},r.prototype.getNormal=function(t){return Vector_1.Vector.normalize(Vector_1.Vector.scale(Vector_1.Vector.substract(t,this.center),1/this.radius))},r.prototype.getMaterial=function(){return this.material},r.prototype.setMaterial=function(t){return this.material=t,this},r}(AbstractLight_1.AbstractLight);exports.SphericalLight=SphericalLight;


},{"./../Color/Color":2,"./../Color/RGBColor":4,"./../Material":8,"./../RTMath":12,"./../Vector":16,"./AbstractLight":6}],8:[function(require,module,exports){
var Color_1=require("./Color/Color"),RGBColor_1=require("./Color/RGBColor"),Material=function(){function o(o,t){void 0===o&&(o=new Color_1.Color(new RGBColor_1.RGBColor(255,0,0))),void 0===t&&(t=0),this.lambertCoeff=.5,this.phongCoeff=.5,this.reflectionCoeff=0,this.color=o,this.reflectionCoeff=t}return o.prototype.getColor=function(){return this.color},o.prototype.getLambertCoeff=function(){return this.lambertCoeff},o.prototype.getPhongCoeff=function(){return this.phongCoeff},o.prototype.getReflectionValue=function(){return this.reflectionCoeff},o.prototype.setLambertCoeff=function(o){return this.lambertCoeff=o,this.phongCoeff=1-o,this},o.prototype.setPhongCoeff=function(o){return this.phongCoeff=o,this.lambertCoeff=1-o,this},o}();exports.Material=Material;


},{"./Color/Color":2,"./Color/RGBColor":4}],9:[function(require,module,exports){
var AbstractObject=function(){function t(){}return t}();exports.AbstractObject=AbstractObject;


},{}],10:[function(require,module,exports){
var __extends=this&&this.__extends||function(t,r){function e(){this.constructor=t}for(var o in r)r.hasOwnProperty(o)&&(t[o]=r[o]);t.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)},RTMath_1=require("../RTMath"),AbstractObject_1=require("./AbstractObject"),Color_1=require("../Color/Color"),Material_1=require("../Material"),Vector_1=require("../Vector"),Polygon=function(t){function r(){for(var r=[],e=0;e<arguments.length;e++)r[e-0]=arguments[e];t.call(this),this.material=new Material_1.Material(Color_1.Color.gray,0),this.vertices=r}return __extends(r,t),r.prototype.getIntersectData=function(t){var e,o,c,i,s,a=this.getNormal();if(o=Vector_1.Vector.dot(this.vertices[0],a),s=Vector_1.Vector.dot(a,t.getDirection()),i=-Vector_1.Vector.dot(a,t.getOrigin())+o,e=i/s,!(e<RTMath_1.RTMath.EPSILON)){c=t.getHitPoint(e);for(var n=0,h=this.vertices.length;h>n;n++){var l=this.vertices[n],u=void 0;if(u=n===h-1?this.vertices[0]:this.vertices[n+1],!r.checkSameClockDir(Vector_1.Vector.substract(u,l),Vector_1.Vector.substract(c,l),this.getNormal()))return}return{hitPoint:c,normal:a,distance:e}}},r.prototype.getMaterial=function(){return this.material},r.prototype.getNormal=function(){var t=Vector_1.Vector.substract(this.vertices[2],this.vertices[0]),r=Vector_1.Vector.substract(this.vertices[1],this.vertices[0]);return Vector_1.Vector.normalize(Vector_1.Vector.cross(t,r))},r.prototype.setMaterial=function(t){return this.material=t,this},r.checkSameClockDir=function(t,r,e){var o=Vector_1.Vector.cross(r,t);return Vector_1.Vector.dot(o,e)>=0},r}(AbstractObject_1.AbstractObject);exports.Polygon=Polygon;


},{"../Color/Color":2,"../Material":8,"../RTMath":12,"../Vector":16,"./AbstractObject":9}],11:[function(require,module,exports){
var __extends=this&&this.__extends||function(t,e){function r(){this.constructor=t}for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},RTMath_1=require("../RTMath"),AbstractObject_1=require("./AbstractObject"),Color_1=require("../Color/Color"),Material_1=require("../Material"),Vector_1=require("../Vector"),Sphere=function(t){function e(e,r){t.call(this),this.material=new Material_1.Material(Color_1.Color.red,0),this.center=e,this.radius=r}return __extends(e,t),e.prototype.getIntersectData=function(t){var e,r,o,a,i,c,n,s=Vector_1.Vector.substract(t.getOrigin(),this.center),h=Vector_1.Vector.dot(s,t.getDirection()),u=Vector_1.Vector.dot(s,s)-Math.pow(this.radius,2),_=Math.pow(h,2)-u;if(!(h>0||0>_||_>=0&&(e=-h+Math.sqrt(_),r=-h-Math.sqrt(_),o=Math.min(e,r),a=Math.max(e,r),i=o>RTMath_1.RTMath.EPSILON?o:a,i<RTMath_1.RTMath.EPSILON)))return c=Vector_1.Vector.add(Vector_1.Vector.scale(t.getDirection(),i),t.getOrigin()),n=Vector_1.Vector.substract(c,t.getOrigin()).getLength(),{hitPoint:c,normal:this.getNormal(c),distance:n}},e.prototype.getMaterial=function(){return this.material},e.prototype.getNormal=function(t){return Vector_1.Vector.normalize(Vector_1.Vector.scale(Vector_1.Vector.substract(t,this.center),1/this.radius))},e.prototype.setMaterial=function(t){return this.material=t,this},e}(AbstractObject_1.AbstractObject);exports.Sphere=Sphere;


},{"../Color/Color":2,"../Material":8,"../RTMath":12,"../Vector":16,"./AbstractObject":9}],12:[function(require,module,exports){
var RTMath;!function(t){t.EPSILON=.001}(RTMath=exports.RTMath||(exports.RTMath={}));


},{}],13:[function(require,module,exports){
var Vector_1=require("./Vector"),Ray=function(){function t(t,i,r){this.iteration=8,this.origin=t,this.direction=Vector_1.Vector.normalize(i),r&&(this.iteration=r)}return t.prototype.getOrigin=function(){return this.origin},t.prototype.getDirection=function(){return this.direction},t.prototype.getIteration=function(){return this.iteration},t.prototype.getHitPoint=function(t){return Vector_1.Vector.add(this.origin,Vector_1.Vector.scale(this.direction,t))},t.prototype.setIteration=function(t){this.iteration=t},t}();exports.Ray=Ray;


},{"./Vector":16}],14:[function(require,module,exports){
var Scene=function(){function t(t){this.objects=[],this.lights=[],this.objects=t.objects,this.camera=t.camera,this.lights=t.lights}return t.prototype.addObject=function(t){this.objects.push(t)},t.prototype.getCamera=function(){return this.camera},t.prototype.getLights=function(){return this.lights},t.prototype.getObjects=function(){return this.objects},t}();exports.Scene=Scene;


},{}],15:[function(require,module,exports){
var AbstractLight_1=require("./Lights/AbstractLight"),Camera_1=require("./Camera"),Color_1=require("./Color/Color"),IntersectPoint_1=require("./IntersectPoint"),Material_1=require("./Material"),Polygon_1=require("./Objects/Polygon"),Ray_1=require("./Ray"),RGBColor_1=require("./Color/RGBColor"),Scene_1=require("./Scene"),Sphere_1=require("./Objects/Sphere"),SphericalLight_1=require("./Lights/SphericalLight"),Vector_1=require("./Vector"),Tracer=function(){function e(){this.pixelSamples=4,this.shadowSamples=50,this.giSamples=50,this.aoSamples=50,this.screenWidth=250,this.screenHeight=250}return e.prototype.cosineSampleHemisphere=function(e){var t,r,o=Math.random(),a=Math.random(),c=Math.sqrt(o),i=2*Math.PI*a;return t=Math.abs(e.getCoordinates().x)<.5?Vector_1.Vector.cross(e,new Vector_1.Vector(1,0,0)):Vector_1.Vector.cross(e,new Vector_1.Vector(0,1,0)),r=Vector_1.Vector.cross(e,t),Vector_1.Vector.add(Vector_1.Vector.scale(e,Math.sqrt(1-o)),Vector_1.Vector.add(Vector_1.Vector.scale(t,c*Math.cos(i)),Vector_1.Vector.scale(r,c*Math.sin(i))))},e.prototype.getColor=function(e,t){void 0===t&&(t=!0);var r=this.trace(e),o=Color_1.Color.black,a=Color_1.Color.black;return r.getIntersect()?(o=this.getDiffuseColor(e,r,t),t&&(a=this.getReflectionColor(e,r)),o.add(a)):Color_1.Color.black},e.prototype.getDiffuseColor=function(e,t,r){void 0===r&&(r=!0);for(var o,a,c,i,n,l,s,g,_,V,h=Color_1.Color.black,w=0,C=this.scene.getLights();w<C.length;w++){var p=C[w];if(t.getOwner()instanceof AbstractLight_1.AbstractLight)return t.getOwner().getMaterial().getColor();if(l=this.getLightPower(t,p),o=Color_1.Color.black,a=Color_1.Color.black,c=Color_1.Color.black,n=Vector_1.Vector.normalize(Vector_1.Vector.substract(t.getHitPoint(),p.getPosition())),r)for(var d=0;d<this.giSamples;d++){var m=void 0;i=this.cosineSampleHemisphere(t.getOwner().getNormal(t.getHitPoint())),m=this.getColor(new Ray_1.Ray(t.getHitPoint(),i),!1),c=c.add(m)}c=c.divide(this.giSamples),g=-Vector_1.Vector.dot(n,t.getNormal()),o=o.add(t.getOwner().getMaterial().getColor().add(c).multiple(p.getMaterial().getColor().scaled(l*g*t.getOwner().getMaterial().getLambertCoeff()))),s=Vector_1.Vector.reflect(n,t.getNormal()),_=-Vector_1.Vector.dot(s,e.getDirection()),_>0&&(V=Math.pow(_,35),a=a.add(t.getOwner().getMaterial().getColor().multiple(p.getMaterial().getColor().scaled(l*V*t.getOwner().getMaterial().getPhongCoeff()))));for(var M=0,d=0;d<this.aoSamples;d++){var f=this.cosineSampleHemisphere(t.getOwner().getNormal(t.getHitPoint())),u=this.trace(new Ray_1.Ray(t.getHitPoint(),f));u.getIntersect()&&(u.getDistanceFromOrigin()>200||M++)}h=h.add(o.multiple(Color_1.Color.white.scaled(1-.67*M/this.aoSamples)).add(a))}return h},e.prototype.getReflectionColor=function(e,t){var r,o,a=e.getIteration(),c=t.getOwner().getMaterial().getReflectionValue();return e.setIteration(--a),0===a||0===c?Color_1.Color.black:(o=Vector_1.Vector.reflect(e.getDirection(),t.getNormal()),r=this.getColor(new Ray_1.Ray(t.getHitPoint(),o,a)).scaled(c))},e.prototype.getPerspectiveVector=function(e,t){var r=this.scene.getCamera();return Vector_1.Vector.normalize(Vector_1.Vector.add(r.getForwardVector(),Vector_1.Vector.add(Vector_1.Vector.scale(r.getRightVector(),r.recenterX(e)),Vector_1.Vector.scale(r.getUpVector(),r.recenterY(t)))))},e.prototype.getLightPower=function(e,t){for(var r,o,a=t.getPower(),c=0,i=0;i<this.shadowSamples;i++)r=t.getRandomPoint(),o=this.trace(new Ray_1.Ray(e.getHitPoint(),Vector_1.Vector.substract(Vector_1.Vector.substract(t.getPosition(),r),e.getHitPoint()))),o.getIntersect()&&o.getOwner()instanceof AbstractLight_1.AbstractLight&&(c+=(a-Vector_1.Vector.substract(Vector_1.Vector.substract(t.getPosition(),r),e.getHitPoint()).getLength()*(a/t.getFadeRadius()))/this.shadowSamples);return c},e.prototype.trace=function(e){for(var t,r=new IntersectPoint_1.IntersectPoint,o=1/0,a=this.scene.getObjects().concat(this.scene.getLights()),c=0,i=a;c<i.length;c++){var n=i[c];t=n.getIntersectData(e),t&&t.distance<o&&(o=t.distance,r.setIntersect(),r.setHitPoint(t.hitPoint),r.setNormal(t.normal),r.setDistanceFromOrigin(t.distance),r.setOwner(n))}return r},e.prototype.render=function(e,t,r,o){var a,c,i,n=.5,l=Color_1.Color.black;this.screenWidth=e,this.screenHeight=t;for(var s=0;s<this.pixelSamples;s++)a=0,this.pixelSamples>1&&(s%2?a+=Math.random()*n:a-=Math.random()*n),c=new Ray_1.Ray(this.scene.getCamera().getPosition(),this.getPerspectiveVector(r+a,o+a)),l=l.add(this.getColor(c));l=l.divide(this.pixelSamples);for(var g in l)l[g]=Color_1.Color.sRGBEncode(l[g]);i=Color_1.Color.toRGB(l),self.postMessage([r,o,i.red,i.green,i.blue])},e.prototype.setScene=function(e){this.scene=e},e}();onmessage=function(e){var t=e.data;"string"==typeof t&&(t=JSON.parse("["+t+"]"));var r=new Tracer;r.setScene(new Scene_1.Scene({camera:new Camera_1.Camera(new Vector_1.Vector(0,0,-699),new Vector_1.Vector(0,0,1),t[0],t[1]),lights:[new SphericalLight_1.SphericalLight(new Vector_1.Vector(0,600,0),.6,100).setMaterial(new Material_1.Material(Color_1.Color.white)),new SphericalLight_1.SphericalLight(new Vector_1.Vector(0,0,0),.6,150).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,235,200))))],objects:[new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(700,-700,700),new Vector_1.Vector(-700,-700,700)).setMaterial(new Material_1.Material(Color_1.Color.white,0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,700),new Vector_1.Vector(700,-700,700),new Vector_1.Vector(700,700,700),new Vector_1.Vector(-700,700,700)).setMaterial(new Material_1.Material(Color_1.Color.white,0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,700,700),new Vector_1.Vector(700,700,700),new Vector_1.Vector(700,700,-700),new Vector_1.Vector(-700,700,-700)).setMaterial(new Material_1.Material(Color_1.Color.white,0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(700,-700,700),new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(700,700,-700),new Vector_1.Vector(700,700,700)).setMaterial(new Material_1.Material(Color_1.Color.blue).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(-700,-700,700),new Vector_1.Vector(-700,700,700),new Vector_1.Vector(-700,700,-700)).setMaterial(new Material_1.Material(Color_1.Color.red,0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(-700,700,-700),new Vector_1.Vector(700,700,-700)).setMaterial(new Material_1.Material(Color_1.Color.black,0).setLambertCoeff(1)),new Sphere_1.Sphere(new Vector_1.Vector(-250,-500,450),200).setMaterial(new Material_1.Material(Color_1.Color.black,1)),new Sphere_1.Sphere(new Vector_1.Vector(250,-500,400),200).setMaterial(new Material_1.Material(Color_1.Color.green,0))]})),r.render(t[0],t[1],t[2],t[3])};


},{"./Camera":1,"./Color/Color":2,"./Color/RGBColor":4,"./IntersectPoint":5,"./Lights/AbstractLight":6,"./Lights/SphericalLight":7,"./Material":8,"./Objects/Polygon":10,"./Objects/Sphere":11,"./Ray":13,"./Scene":14,"./Vector":16}],16:[function(require,module,exports){
var Vector=function(){function t(t,n,r){this.x=t,this.y=n,this.z=r}return t.prototype.getCoordinates=function(){return{x:this.x,y:this.y,z:this.z}},t.prototype.asArray=function(){return[this.x,this.y,this.z]},t.prototype.getLength=function(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2)+Math.pow(this.z,2))},t.scale=function(n,r){return new t(n.x*r,n.y*r,n.z*r)},t.add=function(n,r){return new t(n.x+r.x,n.y+r.y,n.z+r.z)},t.substract=function(n,r){return new t(n.x-r.x,n.y-r.y,n.z-r.z)},t.dot=function(t,n){return t.x*n.x+t.y*n.y+t.z*n.z},t.cross=function(n,r){return new t(n.y*r.z-n.z*r.y,n.z*r.x-n.x*r.z,n.x*r.y-n.y*r.x)},t.normalize=function(n){return t.scale(n,1/n.getLength())},t.pow=function(n,r){return new t(Math.pow(n.y,r),Math.pow(n.z,r),Math.pow(n.x,r))},t.inverse=function(n){return t.scale(n,-1)},t.reflect=function(n,r){var e=2*t.dot(n,r);return t.substract(n,t.scale(r,e))},t}();exports.Vector=Vector;


},{}]},{},[15])(15)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Vzci9saWIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIi9zb3VyY2UvQ2FtZXJhLnRzIiwiL3NvdXJjZS9Db2xvci9Db2xvci50cyIsIi9zb3VyY2UvQ29sb3IvRmxvYXRDb2xvci50cyIsIi9zb3VyY2UvQ29sb3IvUkdCQ29sb3IudHMiLCIvc291cmNlL0ludGVyc2VjdFBvaW50LnRzIiwiL3NvdXJjZS9MaWdodHMvQWJzdHJhY3RMaWdodC50cyIsIi9zb3VyY2UvTGlnaHRzL1NwaGVyaWNhbExpZ2h0LmpzIiwiL3NvdXJjZS9MaWdodHMvU3BoZXJpY2FsTGlnaHQudHMiLCIvc291cmNlL01hdGVyaWFsLnRzIiwiL3NvdXJjZS9PYmplY3RzL0Fic3RyYWN0T2JqZWN0LnRzIiwiL3NvdXJjZS9PYmplY3RzL1BvbHlnb24uanMiLCIvc291cmNlL09iamVjdHMvUG9seWdvbi50cyIsIi9zb3VyY2UvT2JqZWN0cy9TcGhlcmUuanMiLCIvc291cmNlL09iamVjdHMvU3BoZXJlLnRzIiwiL3NvdXJjZS9SVE1hdGgudHMiLCIvc291cmNlL1JheS50cyIsIi9zb3VyY2UvU2NlbmUudHMiLCIvc291cmNlL1RyYWNlcldvcmtlci50cyIsIi9zb3VyY2UvVmVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsR0FBQSxVQUFBLFFBQXVCLFlBRXZCLE9BQUEsV0FTSSxRQUFBLEdBQWEsRUFBa0IsRUFBbUIsRUFBcUIsR0FDbkUsS0FBSyxTQUFXLEVBQ2hCLEtBQUssVUFBWSxTQUFBLE9BQU8sVUFBVSxHQUNsQyxLQUFLLFlBQWMsRUFDbkIsS0FBSyxhQUFlLEVBRXBCLEtBQUssY0FBZ0IsU0FBQSxPQUFPLFVBQVUsU0FBQSxPQUFPLFVBQVUsS0FBSyxVQUFXLEtBQUssV0FDNUUsS0FBSyxZQUFjLFNBQUEsT0FBTyxNQUN0QixTQUFBLE9BQU8sVUFDSCxTQUFBLE9BQU8sTUFDSCxLQUFLLGNBQ0wsR0FBSSxVQUFBLE9BQU8sRUFBRyxHQUFJLEtBRzFCLEdBRUosS0FBSyxTQUFXLFNBQUEsT0FBTyxNQUNuQixTQUFBLE9BQU8sVUFDSCxTQUFBLE9BQU8sTUFDSCxLQUFLLGNBQ0wsS0FBSyxjQUdiLEdBaUNaLE1BN0JXLEdBQUEsVUFBQSxhQUFQLFdBQ0ksTUFBTyxNQUFLLFdBR1QsRUFBQSxVQUFBLFlBQVAsV0FDSSxNQUFPLE1BQUssVUFHVCxFQUFBLFVBQUEsaUJBQVAsV0FDSSxNQUFPLE1BQUssZUFHVCxFQUFBLFVBQUEsZUFBUCxXQUNJLE1BQU8sTUFBSyxhQUdULEVBQUEsVUFBQSxZQUFQLFdBQ0ksTUFBTyxNQUFLLFVBR1QsRUFBQSxVQUFBLFVBQVAsU0FBa0IsR0FDZCxHQUFJLEdBQWUsS0FBSyxhQUFlLEtBQUssWUFBZSxDQUUzRCxRQUFRLEVBQUssS0FBSyxZQUFjLEdBQU0sRUFBYyxLQUFLLGFBR3RELEVBQUEsVUFBQSxVQUFQLFNBQWtCLEdBQ2QsUUFBUyxFQUFLLEtBQUssYUFBZSxHQUFNLEVBQUksS0FBSyxjQUV6RCxJQWpFYSxTQUFBLE9BQU07Ozs7QUNGbkIsR0FBQSxZQUFBLFFBQXlCLGNBQ3pCLGFBQUEsUUFBMkIsZ0JBRTNCLE1BQUEsV0FZSSxRQUFBLEdBQWEsR0FDVCxLQUFLLElBQU0sRUFBTSxJQUNqQixLQUFLLE1BQVEsRUFBTSxNQUNuQixLQUFLLEtBQU8sRUFBTSxLQXdFMUIsTUFyRVcsR0FBQSxVQUFBLElBQVAsU0FBWSxHQUNSLE1BQU8sSUFBSSxHQUNQLEdBQUksY0FBQSxXQUNBLEtBQUssSUFBTSxFQUFNLElBQ2pCLEtBQUssTUFBUSxFQUFNLE1BQ25CLEtBQUssS0FBTyxFQUFNLFFBS3ZCLEVBQUEsVUFBQSxVQUFQLFNBQWtCLEdBQ2QsTUFBTyxJQUFJLEdBQ1AsR0FBSSxjQUFBLFdBQ0EsS0FBSyxJQUFNLEVBQU0sSUFDakIsS0FBSyxNQUFRLEVBQU0sTUFDbkIsS0FBSyxLQUFPLEVBQU0sUUFLdkIsRUFBQSxVQUFBLE9BQVAsU0FBZSxHQUNYLE1BQU8sSUFBSSxHQUNQLEdBQUksY0FBQSxXQUNBLEtBQUssSUFBTSxFQUNYLEtBQUssTUFBUSxFQUNiLEtBQUssS0FBTyxLQUtqQixFQUFBLFVBQUEsU0FBUCxTQUFpQixHQUNiLE1BQU8sSUFBSSxHQUNQLEdBQUksY0FBQSxXQUNBLEtBQUssSUFBTSxFQUFNLElBQ2pCLEtBQUssTUFBUSxFQUFNLE1BQ25CLEtBQUssS0FBTyxFQUFNLFFBS3ZCLEVBQUEsVUFBQSxPQUFQLFNBQWUsR0FDWCxNQUFPLElBQUksR0FDUCxHQUFJLGNBQUEsV0FDQSxLQUFLLElBQU0sRUFDWCxLQUFLLE1BQVEsRUFDYixLQUFLLEtBQU8sS0FLVixFQUFBLFdBQWQsU0FBMEIsR0FDdEIsTUFBYSxVQUFULEVBQ08sTUFBUSxFQUVSLE1BQVMsS0FBQSxJQUFBLEVBQVMsVUFBYSxNQUloQyxFQUFBLE1BQWQsU0FBcUIsR0FDakIsT0FDSSxJQUFLLEtBQUssTUFBb0MsSUFBOUIsRUFBTSxXQUFXLEVBQU0sTUFDdkMsTUFBTyxLQUFLLE1BQXNDLElBQWhDLEVBQU0sV0FBVyxFQUFNLFFBQ3pDLEtBQU0sS0FBSyxNQUFxQyxJQUEvQixFQUFNLFdBQVcsRUFBTSxTQUlqQyxFQUFBLFdBQWYsU0FBMkIsR0FDdkIsTUFBTyxHQUFRLEVBQUksRUFBSSxHQWhGYixFQUFBLE1BQVEsR0FBSSxHQUFNLEdBQUksWUFBQSxTQUFTLEVBQUcsRUFBRyxJQUNyQyxFQUFBLE1BQVEsR0FBSSxHQUFNLEdBQUksWUFBQSxTQUFTLElBQUssSUFBSyxNQUN6QyxFQUFBLEtBQU8sR0FBSSxHQUFNLEdBQUksWUFBQSxTQUFTLElBQUssSUFBSyxNQUN4QyxFQUFBLElBQU0sR0FBSSxHQUFNLEdBQUksWUFBQSxTQUFTLElBQUssRUFBRyxJQUNyQyxFQUFBLE1BQVEsR0FBSSxHQUFNLEdBQUksWUFBQSxTQUFTLEVBQUcsSUFBSyxJQUN2QyxFQUFBLEtBQU8sR0FBSSxHQUFNLEdBQUksWUFBQSxTQUFTLEVBQUcsRUFBRyxNQTZFdEQsSUF2RmEsU0FBQSxNQUFLOzs7O0FDSGxCLEdBQUEsWUFBQSxXQUtJLFFBQUEsR0FBYSxFQUFhLEVBQWUsR0FDckMsS0FBSyxJQUFNLEVBQ1gsS0FBSyxNQUFRLEVBQ2IsS0FBSyxLQUFPLEVBRXBCLE1BQUEsS0FWYSxTQUFBLFdBQVU7Ozs7QUNBdkIsR0FBQSxVQUFBLFdBS0ksUUFBQSxHQUFhLEVBQWEsRUFBZSxHQUNyQyxLQUFLLElBQU0sRUFBUyxRQUFRLEdBQzVCLEtBQUssTUFBUSxFQUFTLFFBQVEsR0FDOUIsS0FBSyxLQUFPLEVBQVMsUUFBUSxHQU1yQyxNQUhtQixHQUFBLFFBQWYsU0FBd0IsR0FDcEIsTUFBaUIsS0FBVixFQUFjLEVBQVEsRUFBUSxLQUU3QyxJQWRhLFNBQUEsU0FBUTs7OztBQ0lyQixHQUFBLGdCQUFBLFdBQUEsUUFBQSxLQUNZLEtBQUEsYUFBdUIsRUE2Q25DLE1BdkNXLEdBQUEsVUFBQSxhQUFQLFdBQ0ksTUFBTyxNQUFLLGFBR1QsRUFBQSxVQUFBLFlBQVAsV0FDSSxNQUFPLE1BQUssVUFHVCxFQUFBLFVBQUEsVUFBUCxXQUNJLE1BQU8sTUFBSyxRQUdULEVBQUEsVUFBQSxTQUFQLFdBQ0ksTUFBTyxNQUFLLE9BR1QsRUFBQSxVQUFBLHNCQUFQLFdBQ0ksTUFBTyxNQUFLLG9CQUdULEVBQUEsVUFBQSxhQUFQLFdBQ0ksS0FBSyxhQUFjLEdBR2hCLEVBQUEsVUFBQSxZQUFQLFNBQW9CLEdBQ2hCLEtBQUssU0FBVyxHQUdiLEVBQUEsVUFBQSxVQUFQLFNBQWtCLEdBQ2QsS0FBSyxPQUFTLEdBR1gsRUFBQSxVQUFBLFNBQVAsU0FBaUIsR0FDYixLQUFLLE1BQVEsR0FHVixFQUFBLFVBQUEsc0JBQVAsU0FBOEIsR0FDMUIsS0FBSyxtQkFBcUIsR0FFbEMsSUE5Q2EsU0FBQSxlQUFjOzs7O0FDQTNCLEdBQUEsZUFBQSxXQUFBLFFBQUEsTUFVQSxNQUFBLEtBVnNCLFNBQUEsY0FBYTs7OztBQ0puQyxHQUFJLFdBQWEsTUFBUSxLQUFLLFdBQWMsU0FBVSxFQUFHLEdBRXJELFFBQVMsS0FBTyxLQUFLLFlBQWMsRUFEbkMsSUFBSyxHQUFJLEtBQUssR0FBTyxFQUFFLGVBQWUsS0FBSSxFQUFFLEdBQUssRUFBRSxHQUVuRCxHQUFFLFVBQWtCLE9BQU4sRUFBYSxPQUFPLE9BQU8sSUFBTSxFQUFHLFVBQVksRUFBRSxVQUFXLEdBQUksS0NIbkYsZ0JBQUEsUUFBOEIsbUJBQzlCLFFBQUEsUUFBc0Isb0JBQ3RCLFdBQUEsUUFBeUIsaUJBRXpCLFdBQUEsUUFBeUIsdUJBQ3pCLFNBQUEsUUFBdUIsZUFDdkIsU0FBQSxRQUF1QixlQUV2QixlQUFBLFNBQUEsR0FPSSxRQUFBLEdBQWEsRUFBa0IsRUFBZSxHQUMxQyxFQUFBLEtBQUEsTUFOSSxLQUFBLE9BQWlCLEdBRWpCLEtBQUEsV0FBcUIsS0FDckIsS0FBQSxTQUFxQixHQUFJLFlBQUEsU0FBUyxHQUFJLFNBQUEsTUFBTSxHQUFJLFlBQUEsU0FBUyxJQUFLLElBQUssTUFBTyxHQUFHLGdCQUFnQixHQUtqRyxLQUFLLE9BQVMsRUFDZCxLQUFLLE1BQVEsRUFFVCxJQUNBLEtBQUssT0FBUyxHQXFHMUIsTUFuSG9DLFdBQUEsRUFBQSxHQWtCekIsRUFBQSxVQUFBLGNBQVAsV0FDSSxNQUFPLE1BQUssT0FBUyxLQUFLLFlBR3ZCLEVBQUEsVUFBQSxZQUFQLFdBQ0ksTUFBTyxNQUFLLFFBR1QsRUFBQSxVQUFBLFNBQVAsV0FDSSxNQUFPLE1BQUssT0FHVCxFQUFBLFVBQUEsVUFBUCxXQUNJLE1BQU8sTUFBSyxRQUdULEVBQUEsVUFBQSxlQUFQLFdBQ0ksR0FBSSxHQUFJLEtBQUssU0FDVCxFQUFJLEtBQUssU0FDVCxFQUFJLEVBQUksS0FBSyxHQUFLLEVBQ2xCLEVBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxFQUFJLEVBQUksR0FBSSxHQUV0QyxPQUFPLElBQUksVUFBQSxPQUNQLEtBQUssT0FBUyxLQUFLLElBQUksR0FBSyxLQUFLLElBQUksR0FDckMsS0FBSyxPQUFTLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxHQUNyQyxLQUFLLE9BQVMsS0FBSyxJQUFJLEtBSXhCLEVBQUEsVUFBQSxpQkFBUCxTQUF5QixHQUNyQixHQUlJLEdBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBVkEsRUFBSSxTQUFBLE9BQU8sVUFBVSxFQUFJLFlBQWEsS0FBSyxRQUMzQyxFQUFZLFNBQUEsT0FBTyxJQUFJLEVBQUcsRUFBSSxnQkFDOUIsRUFBWSxTQUFBLE9BQU8sSUFBSSxFQUFHLEdBQUssS0FBQSxJQUFBLEtBQUssT0FBVSxHQUM5QyxFQUFZLEtBQUEsSUFBQSxFQUFLLEdBQUksQ0FTekIsTUFBSSxFQUFJLEdBQVMsRUFBSixHQUlULEdBQUssSUFDTCxHQUFNLEVBQUksS0FBSyxLQUFLLEdBQ3BCLEdBQU0sRUFBSSxLQUFLLEtBQUssR0FDcEIsRUFBTyxLQUFLLElBQUksRUFBSSxHQUNwQixFQUFPLEtBQUssSUFBSSxFQUFJLEdBR2hCLEVBREEsRUFBTyxTQUFBLE9BQU8sUUFDTSxFQUVBLEVBR3BCLEVBQW9CLFNBQUEsT0FBTyxVQWNuQyxNQVRBLEdBQVcsU0FBQSxPQUFPLElBQ2QsU0FBQSxPQUFPLE1BQU0sRUFBSSxlQUFnQixHQUNqQyxFQUFJLGFBRVIsRUFBVyxTQUFBLE9BQU8sVUFDZCxFQUNBLEVBQUksYUFDTixhQUdFLFNBQVUsRUFDVixPQUFRLEtBQUssVUFBVSxHQUN2QixTQUFVLElBSVgsRUFBQSxVQUFBLFVBQVAsU0FBa0IsR0FDZCxNQUFPLFVBQUEsT0FBTyxVQUNWLFNBQUEsT0FBTyxNQUNILFNBQUEsT0FBTyxVQUFVLEVBQU8sS0FBSyxRQUM3QixFQUFJLEtBQUssVUFLZCxFQUFBLFVBQUEsWUFBUCxXQUNJLE1BQU8sTUFBSyxVQUdULEVBQUEsVUFBQSxZQUFQLFNBQW9CLEdBR2hCLE1BRkEsTUFBSyxTQUFXLEVBRVQsTUFFZixHQW5Ib0MsZ0JBQUEsY0FBdkIsU0FBQSxlQUFjOzs7O0FDUjNCLEdBQUEsU0FBQSxRQUFzQixpQkFDdEIsV0FBQSxRQUF5QixvQkFFekIsU0FBQSxXQU1JLFFBQUEsR0FDSSxFQUNBLEdBREEsU0FBQSxJQUFBLEVBQUEsR0FBbUIsU0FBQSxNQUFNLEdBQUksWUFBQSxTQUFTLElBQUssRUFBRyxLQUM5QyxTQUFBLElBQUEsRUFBQSxHQU5JLEtBQUEsYUFBdUIsR0FDdkIsS0FBQSxXQUFxQixHQUNyQixLQUFBLGdCQUEwQixFQU05QixLQUFLLE1BQVEsRUFDYixLQUFLLGdCQUFrQixFQWdDL0IsTUE3QlcsR0FBQSxVQUFBLFNBQVAsV0FDSSxNQUFPLE1BQUssT0FHVCxFQUFBLFVBQUEsZ0JBQVAsV0FDSSxNQUFPLE1BQUssY0FHVCxFQUFBLFVBQUEsY0FBUCxXQUNJLE1BQU8sTUFBSyxZQUdULEVBQUEsVUFBQSxtQkFBUCxXQUNJLE1BQU8sTUFBSyxpQkFHVCxFQUFBLFVBQUEsZ0JBQVAsU0FBdUIsR0FJbkIsTUFIQSxNQUFLLGFBQWUsRUFDcEIsS0FBSyxXQUFhLEVBQUksRUFFZixNQUdKLEVBQUEsVUFBQSxjQUFQLFNBQXFCLEdBSWpCLE1BSEEsTUFBSyxXQUFhLEVBQ2xCLEtBQUssYUFBZSxFQUFJLEVBRWpCLE1BRWYsSUEzQ2EsU0FBQSxTQUFROzs7O0FDQ3JCLEdBQUEsZ0JBQUEsV0FBQSxRQUFBLE1BSUEsTUFBQSxLQUpzQixTQUFBLGVBQWM7Ozs7QUNKcEMsR0FBSSxXQUFhLE1BQVEsS0FBSyxXQUFjLFNBQVUsRUFBRyxHQUVyRCxRQUFTLEtBQU8sS0FBSyxZQUFjLEVBRG5DLElBQUssR0FBSSxLQUFLLEdBQU8sRUFBRSxlQUFlLEtBQUksRUFBRSxHQUFLLEVBQUUsR0FFbkQsR0FBRSxVQUFrQixPQUFOLEVBQWEsT0FBTyxPQUFPLElBQU0sRUFBRyxVQUFZLEVBQUUsVUFBVyxHQUFJLEtDSG5GLFNBQUEsUUFBdUIsYUFDdkIsaUJBQUEsUUFBK0Isb0JBQy9CLFFBQUEsUUFBc0Isa0JBQ3RCLFdBQUEsUUFBeUIsZUFHekIsU0FBQSxRQUF1QixhQUV2QixRQUFBLFNBQUEsR0FJSSxRQUFBLEtERUksSUNGUyxHQUFBLE1BQUEsRUFBQSxFQUFBLEVBQUEsVUFBQSxPQUFBLElBQUEsRUFBQSxFQUFBLEdBQUEsVUFBQSxFQUNULEdBQUEsS0FBQSxNQUhJLEtBQUEsU0FBcUIsR0FBSSxZQUFBLFNBQVMsUUFBQSxNQUFNLEtBQU0sR0FLbEQsS0FBSyxTQUFXLEVBMEV4QixNQWpGNkIsV0FBQSxFQUFBLEdBVWxCLEVBQUEsVUFBQSxpQkFBUCxTQUF5QixHQUNyQixHQUFJLEdBQ0EsRUFDQSxFQUVBLEVBQ0EsRUFGQSxFQUFpQixLQUFLLFdBVzFCLElBUEEsRUFBeUIsU0FBQSxPQUFPLElBQUksS0FBSyxTQUFTLEdBQUksR0FFdEQsRUFBYyxTQUFBLE9BQU8sSUFBSSxFQUFRLEVBQUksZ0JBQ3JDLEdBQWEsU0FBQSxPQUFPLElBQUksRUFBUSxFQUFJLGFBQWUsRUFFbkQsRUFBVyxFQUFZLElBRW5CLEVBQVcsU0FBQSxPQUFPLFNBQXRCLENBSUEsRUFBVyxFQUFJLFlBQVksRUFFM0IsS0FBSyxHQUFJLEdBQUksRUFBRyxFQUFpQixLQUFLLFNBQVMsT0FBWSxFQUFKLEVBQW9CLElBQUssQ0FDNUUsR0FBSSxHQUFrQixLQUFLLFNBQVMsR0FDaEMsRUFBTyxNQVFYLElBTEksRUFEQSxJQUFNLEVBQWlCLEVBQ2IsS0FBSyxTQUFTLEdBRWQsS0FBSyxTQUFTLEVBQUksSUFJM0IsRUFBUSxrQkFDTCxTQUFBLE9BQU8sVUFBVSxFQUFTLEdBQzFCLFNBQUEsT0FBTyxVQUFVLEVBQVUsR0FDM0IsS0FBSyxhQUdULE9BSVIsT0FDSSxTQUFVLEVBQ1YsT0FBUSxFQUNSLFNBQVUsS0FJWCxFQUFBLFVBQUEsWUFBUCxXQUNJLE1BQU8sTUFBSyxVQUdULEVBQUEsVUFBQSxVQUFQLFdBQ0ksR0FBSSxHQUFnQixTQUFBLE9BQU8sVUFBVSxLQUFLLFNBQVMsR0FBSSxLQUFLLFNBQVMsSUFDakUsRUFBZ0IsU0FBQSxPQUFPLFVBQVUsS0FBSyxTQUFTLEdBQUksS0FBSyxTQUFTLEdBRXJFLE9BQU8sVUFBQSxPQUFPLFVBQVUsU0FBQSxPQUFPLE1BQU0sRUFBTyxLQUd6QyxFQUFBLFVBQUEsWUFBUCxTQUFvQixHQUdoQixNQUZBLE1BQUssU0FBVyxFQUVULE1BR0ksRUFBQSxrQkFBZixTQUFrQyxFQUFpQixFQUFpQixHQUNoRSxHQUFJLEdBQXFCLFNBQUEsT0FBTyxNQUFNLEVBQVMsRUFFL0MsT0FBTyxVQUFBLE9BQU8sSUFBSSxFQUFZLElBQVcsR0FFakQsR0FqRjZCLGlCQUFBLGVBQWhCLFNBQUEsUUFBTzs7OztBQ1JwQixHQUFJLFdBQWEsTUFBUSxLQUFLLFdBQWMsU0FBVSxFQUFHLEdBRXJELFFBQVMsS0FBTyxLQUFLLFlBQWMsRUFEbkMsSUFBSyxHQUFJLEtBQUssR0FBTyxFQUFFLGVBQWUsS0FBSSxFQUFFLEdBQUssRUFBRSxHQUVuRCxHQUFFLFVBQWtCLE9BQU4sRUFBYSxPQUFPLE9BQU8sSUFBTSxFQUFHLFVBQVksRUFBRSxVQUFXLEdBQUksS0NIbkYsU0FBQSxRQUF1QixhQUN2QixpQkFBQSxRQUErQixvQkFDL0IsUUFBQSxRQUFzQixrQkFDdEIsV0FBQSxRQUF5QixlQUd6QixTQUFBLFFBQXVCLGFBRXZCLE9BQUEsU0FBQSxHQUtJLFFBQUEsR0FBYSxFQUFnQixHQUN6QixFQUFBLEtBQUEsTUFISSxLQUFBLFNBQXFCLEdBQUksWUFBQSxTQUFTLFFBQUEsTUFBTSxJQUFLLEdBS2pELEtBQUssT0FBUyxFQUNkLEtBQUssT0FBUyxFQXVFdEIsTUFoRjRCLFdBQUEsRUFBQSxHQVlqQixFQUFBLFVBQUEsaUJBQVAsU0FBeUIsR0FDckIsR0FJSSxHQUNBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQVZBLEVBQUksU0FBQSxPQUFPLFVBQVUsRUFBSSxZQUFhLEtBQUssUUFDM0MsRUFBWSxTQUFBLE9BQU8sSUFBSSxFQUFHLEVBQUksZ0JBQzlCLEVBQVksU0FBQSxPQUFPLElBQUksRUFBRyxHQUFLLEtBQUEsSUFBQSxLQUFLLE9BQVUsR0FDOUMsRUFBWSxLQUFBLElBQUEsRUFBSyxHQUFJLENBU3pCLE1BQUksRUFBSSxHQUFTLEVBQUosR0FJVCxHQUFLLElBQ0wsR0FBTSxFQUFJLEtBQUssS0FBSyxHQUNwQixHQUFNLEVBQUksS0FBSyxLQUFLLEdBQ3BCLEVBQU8sS0FBSyxJQUFJLEVBQUksR0FDcEIsRUFBTyxLQUFLLElBQUksRUFBSSxHQUdoQixFQURBLEVBQU8sU0FBQSxPQUFPLFFBQ00sRUFFQSxFQUdwQixFQUFvQixTQUFBLE9BQU8sVUFjbkMsTUFUQSxHQUFXLFNBQUEsT0FBTyxJQUNkLFNBQUEsT0FBTyxNQUFNLEVBQUksZUFBZ0IsR0FDakMsRUFBSSxhQUVSLEVBQVcsU0FBQSxPQUFPLFVBQ2QsRUFDQSxFQUFJLGFBQ04sYUFHRSxTQUFVLEVBQ1YsT0FBUSxLQUFLLFVBQVUsR0FDdkIsU0FBVSxJQUlYLEVBQUEsVUFBQSxZQUFQLFdBQ0ksTUFBTyxNQUFLLFVBR1QsRUFBQSxVQUFBLFVBQVAsU0FBa0IsR0FDZCxNQUFPLFVBQUEsT0FBTyxVQUNWLFNBQUEsT0FBTyxNQUNILFNBQUEsT0FBTyxVQUFVLEVBQU8sS0FBSyxRQUM3QixFQUFJLEtBQUssVUFLZCxFQUFBLFVBQUEsWUFBUCxTQUFvQixHQUdoQixNQUZBLE1BQUssU0FBVyxFQUVULE1BRWYsR0FoRjRCLGlCQUFBLGVBQWYsU0FBQSxPQUFNOzs7O0FDUm5CLEdBQWMsU0FBZCxTQUFjLEdBQ0csRUFBQSxRQUFVLE1BRGIsT0FBQSxRQUFBLFNBQUEsUUFBQTs7OztBQ0FkLEdBQUEsVUFBQSxRQUF1QixZQUV2QixJQUFBLFdBS0ksUUFBQSxHQUFhLEVBQWdCLEVBQW1CLEdBRnhDLEtBQUEsVUFBb0IsRUFHeEIsS0FBSyxPQUFTLEVBQ2QsS0FBSyxVQUFZLFNBQUEsT0FBTyxVQUFVLEdBRTlCLElBQ0EsS0FBSyxVQUFZLEdBdUI3QixNQW5CVyxHQUFBLFVBQUEsVUFBUCxXQUNJLE1BQU8sTUFBSyxRQUdULEVBQUEsVUFBQSxhQUFQLFdBQ0ksTUFBTyxNQUFLLFdBR1QsRUFBQSxVQUFBLGFBQVAsV0FDSSxNQUFPLE1BQUssV0FHVCxFQUFBLFVBQUEsWUFBUCxTQUFvQixHQUNoQixNQUFPLFVBQUEsT0FBTyxJQUFJLEtBQUssT0FBUSxTQUFBLE9BQU8sTUFBTSxLQUFLLFVBQVcsS0FHekQsRUFBQSxVQUFBLGFBQVAsU0FBcUIsR0FDakIsS0FBSyxVQUFZLEdBRXpCLElBakNhLFNBQUEsSUFBRzs7OztBQ0NoQixHQUFBLE9BQUEsV0FLSSxRQUFBLEdBQWEsR0FITCxLQUFBLFdBQ0EsS0FBQSxVQUdKLEtBQUssUUFBVSxFQUFRLFFBQ3ZCLEtBQUssT0FBUyxFQUFRLE9BQ3RCLEtBQUssT0FBUyxFQUFRLE9Ba0I5QixNQWZXLEdBQUEsVUFBQSxVQUFQLFNBQWtCLEdBQ2QsS0FBSyxRQUFRLEtBQUssSUFHZixFQUFBLFVBQUEsVUFBUCxXQUNJLE1BQU8sTUFBSyxRQUdULEVBQUEsVUFBQSxVQUFQLFdBQ0ksTUFBTyxNQUFLLFFBR1QsRUFBQSxVQUFBLFdBQVAsV0FDSSxNQUFPLE1BQUssU0FFcEIsSUExQmEsU0FBQSxNQUFLOzs7O0FDQWxCLEdBQUEsaUJBQUEsUUFBOEIsMEJBRTlCLFNBQUEsUUFBdUIsWUFDdkIsUUFBQSxRQUFzQixpQkFDdEIsaUJBQUEsUUFBK0Isb0JBQy9CLFdBQUEsUUFBeUIsY0FFekIsVUFBQSxRQUF3QixxQkFDeEIsTUFBQSxRQUFvQixTQUNwQixXQUFBLFFBQXlCLG9CQUV6QixRQUFBLFFBQXNCLFdBQ3RCLFNBQUEsUUFBdUIsb0JBQ3ZCLGlCQUFBLFFBQStCLDJCQUMvQixTQUFBLFFBQXVCLFlBRXZCLE9BQUEsV0FBQSxRQUFBLEtBRVksS0FBQSxhQUF1QixFQUN2QixLQUFBLGNBQXdCLEdBQ3hCLEtBQUEsVUFBb0IsR0FDcEIsS0FBQSxVQUFvQixHQUNwQixLQUFBLFlBQXNCLElBQ3RCLEtBQUEsYUFBdUIsSUE2Vm5DLE1BM1ZZLEdBQUEsVUFBQSx1QkFBUixTQUFnQyxHQUM1QixHQUtJLEdBQ0EsRUFOQSxFQUFJLEtBQUssU0FDVCxFQUFJLEtBQUssU0FDVCxFQUFJLEtBQUssS0FBSyxHQUNkLEVBQVEsRUFBSSxLQUFLLEdBQUssQ0FhMUIsT0FQSSxHQURBLEtBQUssSUFBSSxFQUFPLGlCQUFvQixHQUFLLEdBQ2xDLFNBQUEsT0FBTyxNQUFNLEVBQVEsR0FBSSxVQUFBLE9BQU8sRUFBRSxFQUFFLElBRXBDLFNBQUEsT0FBTyxNQUFNLEVBQVEsR0FBSSxVQUFBLE9BQU8sRUFBRSxFQUFFLElBRy9DLEVBQU8sU0FBQSxPQUFPLE1BQU0sRUFBUSxHQUVyQixTQUFBLE9BQU8sSUFDVixTQUFBLE9BQU8sTUFBTSxFQUFTLEtBQUssS0FBSyxFQUFJLElBQ3BDLFNBQUEsT0FBTyxJQUNILFNBQUEsT0FBTyxNQUFNLEVBQU0sRUFBSSxLQUFLLElBQUksSUFDaEMsU0FBQSxPQUFPLE1BQU0sRUFBTSxFQUFJLEtBQUssSUFBSSxPQUtwQyxFQUFBLFVBQUEsU0FBUixTQUFrQixFQUFVLEdBQUEsU0FBQSxJQUFBLEdBQUEsRUFDeEIsSUFBSSxHQUFlLEtBQUssTUFBTSxHQUMxQixFQUFzQixRQUFBLE1BQU0sTUFDNUIsRUFBc0IsUUFBQSxNQUFNLEtBRWhDLE9BQUssR0FBYSxnQkFJbEIsRUFBZSxLQUFLLGdCQUFnQixFQUFLLEVBQWMsR0FFbkQsSUFDQSxFQUFlLEtBQUssbUJBQW1CLEVBQUssSUFHekMsRUFBYSxJQUFJLElBVGIsUUFBQSxNQUFNLE9BWWIsRUFBQSxVQUFBLGdCQUFSLFNBQXlCLEVBQVUsRUFBZ0IsR0FBQSxTQUFBLElBQUEsR0FBQSxFQWEvQyxLQUFrQixHQVpkLEdBQ0EsRUFDQSxFQUVBLEVBQ0EsRUFDQSxFQUNBLEVBQ0EsRUFDQSxFQUNBLEVBUEEsRUFBb0IsUUFBQSxNQUFNLE1BU1osRUFBQSxFQUFBLEVBQUEsS0FBSyxNQUFNLFlBQXhCLEVBQUEsRUFBQSxPQUFBLElBQW9DLENBQXBDLEdBQUksR0FBSyxFQUFBLEVBQ1YsSUFBSSxFQUFVLG9CQUFzQixpQkFBQSxjQUNoQyxNQUFPLEdBQVUsV0FDWixjQUNBLFVBaUJULElBZEEsRUFBYSxLQUFLLGNBQWMsRUFBVyxHQUUzQyxFQUFZLFFBQUEsTUFBTSxNQUNsQixFQUFhLFFBQUEsTUFBTSxNQUNuQixFQUFnQixRQUFBLE1BQU0sTUFFdEIsRUFBaUIsU0FBQSxPQUFPLFVBQ3BCLFNBQUEsT0FBTyxVQUNILEVBQVUsY0FDVixFQUFNLGdCQUtWLEVBQ0EsSUFBSyxHQUFJLEdBQUksRUFBRyxFQUFJLEtBQUssVUFBVyxJQUFLLENBQ3JDLEdBQUksR0FBeUIsTUFFN0IsR0FBMEIsS0FBSyx1QkFDM0IsRUFBVSxXQUFXLFVBQVUsRUFBVSxnQkFHN0MsRUFBNEIsS0FBSyxTQUM3QixHQUFJLE9BQUEsSUFDQSxFQUFVLGNBQ1YsSUFFSixHQUdKLEVBQWdCLEVBQ1gsSUFBSSxHQUlqQixFQUFnQixFQUFjLE9BQU8sS0FBSyxXQUkxQyxHQUFXLFNBQUEsT0FBTyxJQUNkLEVBQ0EsRUFBVSxhQUdkLEVBQVksRUFBVSxJQUNsQixFQUNLLFdBQ0EsY0FDQSxXQUNBLElBQUksR0FDSixTQUNHLEVBQU0sY0FDRCxXQUNBLE9BQ0csRUFBYSxFQUFVLEVBQVUsV0FBVyxjQUFjLHFCQU85RSxFQUF3QixTQUFBLE9BQU8sUUFDM0IsRUFDQSxFQUFVLGFBRWQsR0FBWSxTQUFBLE9BQU8sSUFBSSxFQUF1QixFQUFJLGdCQUU5QyxFQUFXLElBQ1gsRUFBUSxLQUFLLElBQUksRUFBVSxJQUMzQixFQUFhLEVBQVcsSUFDcEIsRUFBVSxXQUNMLGNBQ0EsV0FDQSxTQUNHLEVBQU0sY0FDRCxXQUNBLE9BQ0csRUFBYSxFQUFRLEVBQVUsV0FBVyxjQUFjLG1CQVNoRixLQUFLLEdBRkQsR0FBSSxFQUVDLEVBQUksRUFBRyxFQUFJLEtBQUssVUFBVyxJQUFLLENBQ3JDLEdBQUksR0FBTSxLQUFLLHVCQUF1QixFQUFVLFdBQVcsVUFBVSxFQUFVLGdCQUUzRSxFQUFjLEtBQUssTUFDbkIsR0FBSSxPQUFBLElBQ0EsRUFBVSxjQUNWLEdBSUgsR0FBWSxpQkFJYixFQUFZLHdCQUEwQixLQUkxQyxLQUdKLEVBQWEsRUFBVyxJQUNwQixFQUFVLFNBQVMsUUFBQSxNQUFNLE1BQU0sT0FBTyxFQUFTLElBQUosRUFBVyxLQUFLLFlBQWEsSUFBSSxJQUlwRixNQUFPLElBR0gsRUFBQSxVQUFBLG1CQUFSLFNBQTRCLEVBQVUsR0FDbEMsR0FDSSxHQUVBLEVBSEEsRUFBdUIsRUFBSSxlQUUzQixFQUEwQixFQUFVLFdBQVcsY0FBYyxvQkFLakUsT0FGQSxHQUFJLGVBQWUsR0FHRSxJQUFqQixHQUNvQixJQUFwQixFQUVPLFFBQUEsTUFBTSxPQUdqQixFQUFlLFNBQUEsT0FBTyxRQUNsQixFQUFJLGVBQ0osRUFBVSxhQUdkLEVBQWtCLEtBQUssU0FDbkIsR0FBSSxPQUFBLElBQUksRUFBVSxjQUFlLEVBQWMsSUFDakQsT0FBTyxLQUtMLEVBQUEsVUFBQSxxQkFBUixTQUE4QixFQUFXLEdBQ3JDLEdBQUksR0FBaUIsS0FBSyxNQUFNLFdBRWhDLE9BQU8sVUFBQSxPQUFPLFVBQ1YsU0FBQSxPQUFPLElBQ0gsRUFBTyxtQkFDUCxTQUFBLE9BQU8sSUFDSCxTQUFBLE9BQU8sTUFDSCxFQUFPLGlCQUNQLEVBQU8sVUFBVSxJQUVyQixTQUFBLE9BQU8sTUFDSCxFQUFPLGNBQ1AsRUFBTyxVQUFVLFFBTzdCLEVBQUEsVUFBQSxjQUFSLFNBQXVCLEVBQWdCLEdBTW5DLElBQUssR0FKRCxHQUNBLEVBRkEsRUFBYSxFQUFNLFdBR25CLEVBQXNCLEVBRWpCLEVBQUksRUFBRyxFQUFJLEtBQUssY0FBZSxJQUNwQyxFQUFtQixFQUFNLGlCQUV6QixFQUFZLEtBQUssTUFDYixHQUFJLE9BQUEsSUFDQSxFQUFVLGNBQ1YsU0FBQSxPQUFPLFVBQ0gsU0FBQSxPQUFPLFVBQ0gsRUFBTSxjQUNOLEdBRUosRUFBVSxpQkFLakIsRUFBVSxnQkFJVCxFQUFVLG9CQUFzQixpQkFBQSxnQkFJdEMsSUFDSSxFQUVJLFNBQUEsT0FBTyxVQUNILFNBQUEsT0FBTyxVQUNILEVBQU0sY0FDTixHQUVKLEVBQVUsZUFDWixhQUFlLEVBQWEsRUFBTSxrQkFFeEMsS0FBSyxjQUdiLE9BQU8sSUFHSCxFQUFBLFVBQUEsTUFBUixTQUFlLEdBTVgsSUFBbUIsR0FKZixHQURBLEVBQWUsR0FBSSxrQkFBQSxlQUVuQixFQUFzQixFQUFBLEVBQ3RCLEVBQWlELEtBQUssTUFBTSxhQUFhLE9BQU8sS0FBSyxNQUFNLGFBRTVFLEVBQUEsRUFBQSxFQUFBLEVBQWQsRUFBQSxFQUFBLE9BQUEsSUFBMkIsQ0FBM0IsR0FBSSxHQUFNLEVBQUEsRUFDWCxHQUFnQixFQUFPLGlCQUFpQixHQUdwQyxHQUNBLEVBQXdCLFNBQUksSUFFNUIsRUFBYyxFQUF3QixTQUV0QyxFQUFhLGVBQ2IsRUFBYSxZQUFZLEVBQXdCLFVBQ2pELEVBQWEsVUFBVSxFQUFzQixRQUM3QyxFQUFhLHNCQUFzQixFQUF3QixVQUMzRCxFQUFhLFNBQVMsSUFJOUIsTUFBTyxJQUdKLEVBQUEsVUFBQSxPQUFQLFNBQWUsRUFBcUIsRUFBc0IsRUFBVyxHQUNqRSxHQUdJLEdBQ0EsRUFDQSxFQUxFLEVBQWtCLEdBRXBCLEVBQWUsUUFBQSxNQUFNLEtBU3pCLE1BQUssWUFBYyxFQUNuQixLQUFLLGFBQWUsQ0FFcEIsS0FBSyxHQUFJLEdBQVMsRUFBRyxFQUFTLEtBQUssYUFBYyxJQUM3QyxFQUFPLEVBRUgsS0FBSyxhQUFlLElBQ2hCLEVBQVMsRUFDVCxHQUFRLEtBQUssU0FBVyxFQUV4QixHQUFRLEtBQUssU0FBVyxHQUloQyxFQUFNLEdBQUksT0FBQSxJQUNOLEtBQUssTUFBTSxZQUFZLGNBQ3ZCLEtBQUsscUJBQXFCLEVBQUksRUFBTSxFQUFJLElBRzVDLEVBQVEsRUFBTSxJQUFJLEtBQUssU0FBUyxHQUdwQyxHQUFRLEVBQU0sT0FBTyxLQUFLLGFBRTFCLEtBQUssR0FBSSxLQUFhLEdBQ2xCLEVBQU0sR0FBYSxRQUFBLE1BQU0sV0FBVyxFQUFNLEdBRzlDLEdBQVcsUUFBQSxNQUFNLE1BQU0sR0FFdkIsS0FBSyxhQUFhLEVBQUcsRUFBRyxFQUFTLElBQUssRUFBUyxNQUFPLEVBQVMsUUFHNUQsRUFBQSxVQUFBLFNBQVAsU0FBaUIsR0FDYixLQUFLLE1BQVEsR0FFckIsSUFFQSxXQUFZLFNBQVUsR0FDbEIsR0FBSSxHQUFPLEVBQVEsSUFFQyxpQkFBVixLQUNOLEVBQU8sS0FBSyxNQUFNLElBQUksRUFBSyxLQUcvQixJQUFJLEdBQVMsR0FBSSxPQUVqQixHQUFPLFNBQ0gsR0FBSSxTQUFBLE9BQ0EsT0FBUSxHQUFJLFVBQUEsT0FDUixHQUFJLFVBQUEsT0FBTyxFQUFHLEVBQUcsTUFDakIsR0FBSSxVQUFBLE9BQU8sRUFBRyxFQUFHLEdBQ2pCLEVBQUssR0FDTCxFQUFLLElBRVQsUUFDSSxHQUFJLGtCQUFBLGVBQWUsR0FBSSxVQUFBLE9BQVEsRUFBRyxJQUFLLEdBQUksR0FBSyxLQUMzQyxZQUFZLEdBQUksWUFBQSxTQUFTLFFBQUEsTUFBTSxRQUNwQyxHQUFJLGtCQUFBLGVBQWUsR0FBSSxVQUFBLE9BQVEsRUFBRyxFQUFHLEdBQUksR0FBSyxLQUN6QyxZQUFZLEdBQUksWUFBQSxTQUFTLEdBQUksU0FBQSxNQUFNLEdBQUksWUFBQSxTQUFTLElBQUssSUFBSyxTQUVuRSxTQUdJLEdBQUksV0FBQSxRQUNBLEdBQUksVUFBQSxPQUFPLEtBQU0sS0FBTSxNQUN2QixHQUFJLFVBQUEsT0FBTyxJQUFLLEtBQU0sTUFDdEIsR0FBSSxVQUFBLE9BQU8sSUFBSyxLQUFNLEtBQ3RCLEdBQUksVUFBQSxPQUFPLEtBQU0sS0FBTSxNQUN6QixZQUFZLEdBQUksWUFBQSxTQUFTLFFBQUEsTUFBTSxNQUFPLEdBQUcsZ0JBQWdCLElBRTNELEdBQUksV0FBQSxRQUNBLEdBQUksVUFBQSxPQUFPLEtBQU0sS0FBTSxLQUN2QixHQUFJLFVBQUEsT0FBTyxJQUFLLEtBQU0sS0FDdEIsR0FBSSxVQUFBLE9BQU8sSUFBSyxJQUFLLEtBQ3JCLEdBQUksVUFBQSxPQUFPLEtBQU0sSUFBSyxNQUN4QixZQUFZLEdBQUksWUFBQSxTQUFTLFFBQUEsTUFBTSxNQUFPLEdBQUcsZ0JBQWdCLElBRTNELEdBQUksV0FBQSxRQUNBLEdBQUksVUFBQSxPQUFPLEtBQU0sSUFBSyxLQUN0QixHQUFJLFVBQUEsT0FBTyxJQUFLLElBQUssS0FDckIsR0FBSSxVQUFBLE9BQU8sSUFBSyxJQUFLLE1BQ3JCLEdBQUksVUFBQSxPQUFPLEtBQU0sSUFBSyxPQUN4QixZQUFZLEdBQUksWUFBQSxTQUFTLFFBQUEsTUFBTSxNQUFPLEdBQUcsZ0JBQWdCLElBRTNELEdBQUksV0FBQSxRQUNBLEdBQUksVUFBQSxPQUFPLElBQUssS0FBTSxLQUN0QixHQUFJLFVBQUEsT0FBTyxJQUFLLEtBQU0sTUFDdEIsR0FBSSxVQUFBLE9BQU8sSUFBSyxJQUFLLE1BQ3JCLEdBQUksVUFBQSxPQUFPLElBQUssSUFBSyxNQUN2QixZQUFZLEdBQUksWUFBQSxTQUFTLFFBQUEsTUFBTSxNQUFNLGdCQUFnQixJQUV2RCxHQUFJLFdBQUEsUUFDQSxHQUFJLFVBQUEsT0FBTyxLQUFNLEtBQU0sTUFDdkIsR0FBSSxVQUFBLE9BQU8sS0FBTSxLQUFNLEtBQ3ZCLEdBQUksVUFBQSxPQUFPLEtBQU0sSUFBSyxLQUN0QixHQUFJLFVBQUEsT0FBTyxLQUFNLElBQUssT0FDeEIsWUFBWSxHQUFJLFlBQUEsU0FBUyxRQUFBLE1BQU0sSUFBSyxHQUFHLGdCQUFnQixJQUV6RCxHQUFJLFdBQUEsUUFDQSxHQUFJLFVBQUEsT0FBTyxJQUFLLEtBQU0sTUFDdEIsR0FBSSxVQUFBLE9BQU8sS0FBTSxLQUFNLE1BQ3ZCLEdBQUksVUFBQSxPQUFPLEtBQU0sSUFBSyxNQUN0QixHQUFJLFVBQUEsT0FBTyxJQUFLLElBQUssT0FDdkIsWUFBWSxHQUFJLFlBQUEsU0FBUyxRQUFBLE1BQU0sTUFBTyxHQUFHLGdCQUFnQixJQUMzRCxHQUFJLFVBQUEsT0FBTyxHQUFJLFVBQUEsT0FBTyxLQUFNLEtBQU0sS0FBTSxLQUNuQyxZQUFZLEdBQUksWUFBQSxTQUFTLFFBQUEsTUFBTSxNQUFPLElBQzNDLEdBQUksVUFBQSxPQUFPLEdBQUksVUFBQSxPQUFPLElBQUssS0FBTSxLQUFNLEtBQ2xDLFlBQVksR0FBSSxZQUFBLFNBQVMsUUFBQSxNQUFNLE1BQU8sUUFLdkQsRUFBTyxPQUFPLEVBQUssR0FBSSxFQUFLLEdBQUksRUFBSyxHQUFJLEVBQUs7Ozs7QUNwY2xELEdBQUEsUUFBQSxXQUtJLFFBQUEsR0FBYSxFQUFXLEVBQVcsR0FDL0IsS0FBSyxFQUFJLEVBQ1QsS0FBSyxFQUFJLEVBQ1QsS0FBSyxFQUFJLEVBdUVqQixNQXBFSSxHQUFBLFVBQUEsZUFBQSxXQUNJLE9BQ0ksRUFBRyxLQUFLLEVBQ1IsRUFBRyxLQUFLLEVBQ1IsRUFBRyxLQUFLLElBSVQsRUFBQSxVQUFBLFFBQVAsV0FDSSxPQUNJLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxJQUlOLEVBQUEsVUFBQSxVQUFQLFdBQ0ksTUFBTyxNQUFLLEtBQUssS0FBQSxJQUFBLEtBQUssRUFBSyxHQUFJLEtBQUEsSUFBQSxLQUFLLEVBQUssR0FBSSxLQUFBLElBQUEsS0FBSyxFQUFLLEtBRzdDLEVBQUEsTUFBZCxTQUFxQixFQUFnQixHQUNqQyxNQUFPLElBQUksR0FBTyxFQUFPLEVBQUksRUFBWSxFQUFPLEVBQUksRUFBWSxFQUFPLEVBQUksSUFHakUsRUFBQSxJQUFkLFNBQW1CLEVBQWlCLEdBQ2hDLE1BQU8sSUFBSSxHQUFPLEVBQVEsRUFBSSxFQUFRLEVBQUcsRUFBUSxFQUFJLEVBQVEsRUFBRyxFQUFRLEVBQUksRUFBUSxJQUcxRSxFQUFBLFVBQWQsU0FBeUIsRUFBaUIsR0FDdEMsTUFBTyxJQUFJLEdBQU8sRUFBUSxFQUFJLEVBQVEsRUFBRyxFQUFRLEVBQUksRUFBUSxFQUFHLEVBQVEsRUFBSSxFQUFRLElBRzFFLEVBQUEsSUFBZCxTQUFtQixFQUFpQixHQUNoQyxNQUFPLEdBQVEsRUFBSSxFQUFRLEVBQUksRUFBUSxFQUFJLEVBQVEsRUFBSSxFQUFRLEVBQUksRUFBUSxHQUdqRSxFQUFBLE1BQWQsU0FBcUIsRUFBaUIsR0FDbEMsTUFBTyxJQUFJLEdBQ1AsRUFBUSxFQUFJLEVBQVEsRUFBSSxFQUFRLEVBQUksRUFBUSxFQUM1QyxFQUFRLEVBQUksRUFBUSxFQUFJLEVBQVEsRUFBSSxFQUFRLEVBQzVDLEVBQVEsRUFBSSxFQUFRLEVBQUksRUFBUSxFQUFJLEVBQVEsSUFJdEMsRUFBQSxVQUFkLFNBQXlCLEdBQ3JCLE1BQU8sR0FBTyxNQUFNLEVBQVEsRUFBSSxFQUFPLGNBRzdCLEVBQUEsSUFBZCxTQUFtQixFQUFnQixHQUMvQixNQUFPLElBQUksR0FDUCxLQUFBLElBQUEsRUFBTyxFQUFLLEdBQ1osS0FBQSxJQUFBLEVBQU8sRUFBSyxHQUNaLEtBQUEsSUFBQSxFQUFPLEVBQUssS0FJTixFQUFBLFFBQWQsU0FBdUIsR0FDbkIsTUFBTyxHQUFPLE1BQU0sRUFBUSxLQUdsQixFQUFBLFFBQWQsU0FBdUIsRUFBZ0IsR0FDbkMsR0FBSSxHQUFJLEVBQUksRUFBTyxJQUFJLEVBQVEsRUFFL0IsT0FBTyxHQUFPLFVBQ1YsRUFDQSxFQUFPLE1BQU0sRUFBUSxLQUdqQyxJQS9FYSxTQUFBLE9BQU0iLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSBcIi4vVmVjdG9yXCI7XG5cbmV4cG9ydCBjbGFzcyBDYW1lcmEge1xuICAgIHByaXZhdGUgZGlyZWN0aW9uOiBWZWN0b3I7XG4gICAgcHJpdmF0ZSBwb3NpdGlvbjogVmVjdG9yO1xuICAgIHByaXZhdGUgZm9yd2FyZFZlY3RvcjogVmVjdG9yO1xuICAgIHByaXZhdGUgcmlnaHRWZWN0b3I6IFZlY3RvcjtcbiAgICBwcml2YXRlIHVwVmVjdG9yOiBWZWN0b3I7XG4gICAgcHJpdmF0ZSBzY3JlZW5XaWR0aDogbnVtYmVyO1xuICAgIHByaXZhdGUgc2NyZWVuSGVpZ2h0OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvciAocG9zaXRpb246IFZlY3RvciwgZGlyZWN0aW9uOiBWZWN0b3IsIHNjcmVlbldpZHRoOiBudW1iZXIsIHNjcmVlbkhlaWdodDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBWZWN0b3Iubm9ybWFsaXplKGRpcmVjdGlvbik7XG4gICAgICAgIHRoaXMuc2NyZWVuV2lkdGggPSBzY3JlZW5XaWR0aDtcbiAgICAgICAgdGhpcy5zY3JlZW5IZWlnaHQgPSBzY3JlZW5IZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5mb3J3YXJkVmVjdG9yID0gVmVjdG9yLm5vcm1hbGl6ZShWZWN0b3Iuc3Vic3RyYWN0KHRoaXMuZGlyZWN0aW9uLCB0aGlzLnBvc2l0aW9uKSk7XG4gICAgICAgIHRoaXMucmlnaHRWZWN0b3IgPSBWZWN0b3Iuc2NhbGUoXG4gICAgICAgICAgICBWZWN0b3Iubm9ybWFsaXplKFxuICAgICAgICAgICAgICAgIFZlY3Rvci5jcm9zcyhcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3J3YXJkVmVjdG9yLFxuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yKDAsIC0xLCAwKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICAzXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMudXBWZWN0b3IgPSBWZWN0b3Iuc2NhbGUoXG4gICAgICAgICAgICBWZWN0b3Iubm9ybWFsaXplKFxuICAgICAgICAgICAgICAgIFZlY3Rvci5jcm9zcyhcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3J3YXJkVmVjdG9yLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0VmVjdG9yXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIDNcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0RGlyZWN0aW9uICgpOiBWZWN0b3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3Rpb247XG4gICAgfVxuXG4gICAgcHVibGljIGdldFBvc2l0aW9uICgpOiBWZWN0b3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Rm9yd2FyZFZlY3RvciAoKTogVmVjdG9yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yd2FyZFZlY3RvcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UmlnaHRWZWN0b3IgKCk6IFZlY3RvciB7XG4gICAgICAgIHJldHVybiB0aGlzLnJpZ2h0VmVjdG9yO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRVcFZlY3RvciAoKTogVmVjdG9yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXBWZWN0b3I7XG4gICAgfVxuXG4gICAgcHVibGljIHJlY2VudGVyWCAoeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IGFzcGVjdENvZWZmID0gKHRoaXMuc2NyZWVuSGVpZ2h0IC8gdGhpcy5zY3JlZW5XaWR0aCkgKiAyO1xuXG4gICAgICAgIHJldHVybiAoeCAtICh0aGlzLnNjcmVlbldpZHRoIC8gMikpIC8gYXNwZWN0Q29lZmYgLyB0aGlzLnNjcmVlbldpZHRoO1xuICAgIH1cblxuICAgIHB1YmxpYyByZWNlbnRlclkgKHk6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAtKHkgLSAodGhpcy5zY3JlZW5IZWlnaHQgLyAyKSkgLyAyIC8gdGhpcy5zY3JlZW5IZWlnaHQ7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgUkdCQ29sb3IgfSBmcm9tIFwiLi9SR0JDb2xvclwiO1xuaW1wb3J0IHsgRmxvYXRDb2xvciB9IGZyb20gXCIuL0Zsb2F0Q29sb3JcIjtcblxuZXhwb3J0IGNsYXNzIENvbG9yIHtcbiAgICByZWQ6IG51bWJlcjtcbiAgICBncmVlbjogbnVtYmVyO1xuICAgIGJsdWU6IG51bWJlcjtcblxuICAgIHB1YmxpYyBzdGF0aWMgYmxhY2sgPSBuZXcgQ29sb3IobmV3IFJHQkNvbG9yKDAsIDAsIDApKTtcbiAgICBwdWJsaWMgc3RhdGljIHdoaXRlID0gbmV3IENvbG9yKG5ldyBSR0JDb2xvcigyNTUsIDI1NSwgMjU1KSk7XG4gICAgcHVibGljIHN0YXRpYyBncmF5ID0gbmV3IENvbG9yKG5ldyBSR0JDb2xvcigxMjcsIDEyNywgMTI3KSk7XG4gICAgcHVibGljIHN0YXRpYyByZWQgPSBuZXcgQ29sb3IobmV3IFJHQkNvbG9yKDI1NSwgMCwgMCkpO1xuICAgIHB1YmxpYyBzdGF0aWMgZ3JlZW4gPSBuZXcgQ29sb3IobmV3IFJHQkNvbG9yKDAsIDI1NSwgMCkpO1xuICAgIHB1YmxpYyBzdGF0aWMgYmx1ZSA9IG5ldyBDb2xvcihuZXcgUkdCQ29sb3IoMCwgMCwgMjU1KSk7XG5cbiAgICBjb25zdHJ1Y3RvciAoY29sb3I6IFJHQkNvbG9yfEZsb2F0Q29sb3IpIHtcbiAgICAgICAgdGhpcy5yZWQgPSBjb2xvci5yZWQ7XG4gICAgICAgIHRoaXMuZ3JlZW4gPSBjb2xvci5ncmVlbjtcbiAgICAgICAgdGhpcy5ibHVlID0gY29sb3IuYmx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkIChjb2xvcjogQ29sb3IpOiBDb2xvciB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IoXG4gICAgICAgICAgICBuZXcgRmxvYXRDb2xvcihcbiAgICAgICAgICAgICAgICB0aGlzLnJlZCArIGNvbG9yLnJlZCxcbiAgICAgICAgICAgICAgICB0aGlzLmdyZWVuICsgY29sb3IuZ3JlZW4sXG4gICAgICAgICAgICAgICAgdGhpcy5ibHVlICsgY29sb3IuYmx1ZVxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdWJzdHJhY3QgKGNvbG9yOiBDb2xvcik6IENvbG9yIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihcbiAgICAgICAgICAgIG5ldyBGbG9hdENvbG9yKFxuICAgICAgICAgICAgICAgIHRoaXMucmVkIC0gY29sb3IucmVkLFxuICAgICAgICAgICAgICAgIHRoaXMuZ3JlZW4gLSBjb2xvci5ncmVlbixcbiAgICAgICAgICAgICAgICB0aGlzLmJsdWUgLSBjb2xvci5ibHVlXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIHNjYWxlZCAobXVsdGlwbGllcjogbnVtYmVyKTogQ29sb3Ige1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yKFxuICAgICAgICAgICAgbmV3IEZsb2F0Q29sb3IoXG4gICAgICAgICAgICAgICAgdGhpcy5yZWQgKiBtdWx0aXBsaWVyLFxuICAgICAgICAgICAgICAgIHRoaXMuZ3JlZW4gKiBtdWx0aXBsaWVyLFxuICAgICAgICAgICAgICAgIHRoaXMuYmx1ZSAqIG11bHRpcGxpZXJcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbXVsdGlwbGUgKGNvbG9yOiBDb2xvcik6IENvbG9yIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihcbiAgICAgICAgICAgIG5ldyBGbG9hdENvbG9yKFxuICAgICAgICAgICAgICAgIHRoaXMucmVkICogY29sb3IucmVkLFxuICAgICAgICAgICAgICAgIHRoaXMuZ3JlZW4gKiBjb2xvci5ncmVlbixcbiAgICAgICAgICAgICAgICB0aGlzLmJsdWUgKiBjb2xvci5ibHVlXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIGRpdmlkZSAodmFsdWU6IG51bWJlcik6IENvbG9yIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihcbiAgICAgICAgICAgIG5ldyBGbG9hdENvbG9yKFxuICAgICAgICAgICAgICAgIHRoaXMucmVkIC8gdmFsdWUsXG4gICAgICAgICAgICAgICAgdGhpcy5ncmVlbiAvIHZhbHVlLFxuICAgICAgICAgICAgICAgIHRoaXMuYmx1ZSAvIHZhbHVlXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBzUkdCRW5jb2RlIChjb2xvcjogbnVtYmVyKSB7XG4gICAgICAgIGlmIChjb2xvciA8PSAwLjAwMzEzMDgpIHtcbiAgICAgICAgICAgIHJldHVybiAxMi45MiAqIGNvbG9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDEuMDU1ICogKGNvbG9yICoqIDAuNDE2NjY2NykgLSAwLjA1NTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgdG9SR0IgKGNvbG9yOiBDb2xvcik6IHtyZWQ6IG51bWJlciwgZ3JlZW46IG51bWJlciwgYmx1ZTogbnVtYmVyfSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZWQ6IE1hdGguZmxvb3IoQ29sb3IuY2xhbXBDb2xvcihjb2xvci5yZWQpICogMjU1KSxcbiAgICAgICAgICAgIGdyZWVuOiBNYXRoLmZsb29yKENvbG9yLmNsYW1wQ29sb3IoY29sb3IuZ3JlZW4pICogMjU1KSxcbiAgICAgICAgICAgIGJsdWU6IE1hdGguZmxvb3IoQ29sb3IuY2xhbXBDb2xvcihjb2xvci5ibHVlKSAqIDI1NSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGNsYW1wQ29sb3IgKGNvbG9yOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gY29sb3IgPiAxID8gMSA6IGNvbG9yO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBGbG9hdENvbG9yIHtcbiAgICBwdWJsaWMgcmVkOiBudW1iZXI7XG4gICAgcHVibGljIGdyZWVuOiBudW1iZXI7XG4gICAgcHVibGljIGJsdWU6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yIChyZWQ6IG51bWJlciwgZ3JlZW46IG51bWJlciwgYmx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMucmVkID0gcmVkO1xuICAgICAgICB0aGlzLmdyZWVuID0gZ3JlZW47XG4gICAgICAgIHRoaXMuYmx1ZSA9IGJsdWU7XG4gICAgfVxufSIsImV4cG9ydCBjbGFzcyBSR0JDb2xvciB7XG4gICAgcHVibGljIHJlZDogbnVtYmVyO1xuICAgIHB1YmxpYyBncmVlbjogbnVtYmVyO1xuICAgIHB1YmxpYyBibHVlOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvciAocmVkOiBudW1iZXIsIGdyZWVuOiBudW1iZXIsIGJsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLnJlZCA9IFJHQkNvbG9yLnRvRmxvYXQocmVkKTtcbiAgICAgICAgdGhpcy5ncmVlbiA9IFJHQkNvbG9yLnRvRmxvYXQoZ3JlZW4pO1xuICAgICAgICB0aGlzLmJsdWUgPSBSR0JDb2xvci50b0Zsb2F0KGJsdWUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIHRvRmxvYXQgKGNvbG9yOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gY29sb3IgPT09IDAgPyBjb2xvciA6IGNvbG9yIC8gMjU1O1xuICAgIH1cbn0iLCJpbXBvcnQgeyBBYnN0cmFjdE9iamVjdCB9IGZyb20gXCIuL09iamVjdHMvQWJzdHJhY3RPYmplY3RcIjtcbmltcG9ydCB7IFJheSB9IGZyb20gXCIuL1JheVwiO1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSBcIi4vVmVjdG9yXCI7XG5cbmV4cG9ydCBjbGFzcyBJbnRlcnNlY3RQb2ludCB7XG4gICAgcHJpdmF0ZSBpbnRlcnNlY3RlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgaGl0UG9pbnQ6IFZlY3RvcjtcbiAgICBwcml2YXRlIG5vcm1hbDogVmVjdG9yO1xuICAgIHByaXZhdGUgZGlzdGFuY2VGcm9tT3JpZ2luOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBvd25lcjogQWJzdHJhY3RPYmplY3Q7XG5cbiAgICBwdWJsaWMgZ2V0SW50ZXJzZWN0ICgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJzZWN0ZWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEhpdFBvaW50ICgpOiBWZWN0b3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5oaXRQb2ludDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Tm9ybWFsICgpOiBWZWN0b3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWw7XG4gICAgfVxuXG4gICAgcHVibGljIGdldE93bmVyICgpOiBBYnN0cmFjdE9iamVjdCB7XG4gICAgICAgIHJldHVybiB0aGlzLm93bmVyO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXREaXN0YW5jZUZyb21PcmlnaW4gKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpc3RhbmNlRnJvbU9yaWdpbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0SW50ZXJzZWN0ICgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pbnRlcnNlY3RlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcHVibGljIHNldEhpdFBvaW50IChoaXRQb2ludDogVmVjdG9yKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaGl0UG9pbnQgPSBoaXRQb2ludFxuICAgIH1cblxuICAgIHB1YmxpYyBzZXROb3JtYWwgKG5vcm1hbDogVmVjdG9yKTogdm9pZCB7XG4gICAgICAgIHRoaXMubm9ybWFsID0gbm9ybWFsO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRPd25lciAob3duZXI6IEFic3RyYWN0T2JqZWN0KTogdm9pZCB7XG4gICAgICAgIHRoaXMub3duZXIgPSBvd25lcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0RGlzdGFuY2VGcm9tT3JpZ2luIChkaXN0YW5jZUZyb21PcmlnaW46IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLmRpc3RhbmNlRnJvbU9yaWdpbiA9IGRpc3RhbmNlRnJvbU9yaWdpbjtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gXCIuLi9NYXRlcmlhbFwiO1xuaW1wb3J0IHsgUmF5IH0gZnJvbSBcIi4uL1JheVwiO1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSBcIi4uL1ZlY3RvclwiO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RMaWdodCB7XG4gICAgcHVibGljIGFic3RyYWN0IGdldEZhZGVSYWRpdXMgKCk6IG51bWJlcjtcbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0UG9zaXRpb24gKCk6IFZlY3RvcjtcbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0UG93ZXIgKCk6IG51bWJlcjtcbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0UmFkaXVzICgpOiBudW1iZXI7XG4gICAgcHVibGljIGFic3RyYWN0IGdldEludGVyc2VjdERhdGEgKHJheTogUmF5KTogYW55O1xuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXROb3JtYWwgKHBvaW50OiBWZWN0b3IpOiBWZWN0b3I7XG4gICAgcHVibGljIGFic3RyYWN0IGdldE1hdGVyaWFsICgpOiBNYXRlcmlhbDtcbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0UmFuZG9tUG9pbnQgKCk6IFZlY3RvcjtcbiAgICBwdWJsaWMgYWJzdHJhY3Qgc2V0TWF0ZXJpYWwgKG1hdGVyaWFsOiBNYXRlcmlhbCk6IHRoaXM7XG59XG4iLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBBYnN0cmFjdExpZ2h0XzEgPSByZXF1aXJlKFwiLi9BYnN0cmFjdExpZ2h0XCIpO1xudmFyIENvbG9yXzEgPSByZXF1aXJlKFwiLi8uLi9Db2xvci9Db2xvclwiKTtcbnZhciBNYXRlcmlhbF8xID0gcmVxdWlyZShcIi4vLi4vTWF0ZXJpYWxcIik7XG52YXIgUkdCQ29sb3JfMSA9IHJlcXVpcmUoXCIuLy4uL0NvbG9yL1JHQkNvbG9yXCIpO1xudmFyIFJUTWF0aF8xID0gcmVxdWlyZShcIi4vLi4vUlRNYXRoXCIpO1xudmFyIFZlY3Rvcl8xID0gcmVxdWlyZShcIi4vLi4vVmVjdG9yXCIpO1xudmFyIFNwaGVyaWNhbExpZ2h0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3BoZXJpY2FsTGlnaHQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3BoZXJpY2FsTGlnaHQocG9zaXRpb24sIHBvd2VyLCByYWRpdXMpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMucmFkaXVzID0gNTA7XG4gICAgICAgIHRoaXMuZmFkZVJhZGl1cyA9IDI1MDA7XG4gICAgICAgIHRoaXMubWF0ZXJpYWwgPSBuZXcgTWF0ZXJpYWxfMS5NYXRlcmlhbChuZXcgQ29sb3JfMS5Db2xvcihuZXcgUkdCQ29sb3JfMS5SR0JDb2xvcigyNDQsIDI0NCwgMjQ0KSksIDApLnNldExhbWJlcnRDb2VmZigxKTtcbiAgICAgICAgdGhpcy5jZW50ZXIgPSBwb3NpdGlvbjtcbiAgICAgICAgdGhpcy5wb3dlciA9IHBvd2VyO1xuICAgICAgICBpZiAocmFkaXVzKSB7XG4gICAgICAgICAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cztcbiAgICAgICAgfVxuICAgIH1cbiAgICBTcGhlcmljYWxMaWdodC5wcm90b3R5cGUuZ2V0RmFkZVJhZGl1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmFkaXVzICsgdGhpcy5mYWRlUmFkaXVzO1xuICAgIH07XG4gICAgU3BoZXJpY2FsTGlnaHQucHJvdG90eXBlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jZW50ZXI7XG4gICAgfTtcbiAgICBTcGhlcmljYWxMaWdodC5wcm90b3R5cGUuZ2V0UG93ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvd2VyO1xuICAgIH07XG4gICAgU3BoZXJpY2FsTGlnaHQucHJvdG90eXBlLmdldFJhZGl1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmFkaXVzO1xuICAgIH07XG4gICAgU3BoZXJpY2FsTGlnaHQucHJvdG90eXBlLmdldFJhbmRvbVBvaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdSA9IE1hdGgucmFuZG9tKCksIHYgPSBNYXRoLnJhbmRvbSgpLCBxID0gMiAqIE1hdGguUEkgKiB1LCBmID0gTWF0aC5wb3coTWF0aC5jb3MoMiAqIHYgLSAxKSwgLTEpO1xuICAgICAgICByZXR1cm4gbmV3IFZlY3Rvcl8xLlZlY3Rvcih0aGlzLnJhZGl1cyAqIE1hdGguY29zKHEpICogTWF0aC5zaW4oZiksIHRoaXMucmFkaXVzICogTWF0aC5zaW4ocSkgKiBNYXRoLnNpbihmKSwgdGhpcy5yYWRpdXMgKiBNYXRoLmNvcyhmKSk7XG4gICAgfTtcbiAgICBTcGhlcmljYWxMaWdodC5wcm90b3R5cGUuZ2V0SW50ZXJzZWN0RGF0YSA9IGZ1bmN0aW9uIChyYXkpIHtcbiAgICAgICAgdmFyIGsgPSBWZWN0b3JfMS5WZWN0b3Iuc3Vic3RyYWN0KHJheS5nZXRPcmlnaW4oKSwgdGhpcy5jZW50ZXIpLCBiID0gVmVjdG9yXzEuVmVjdG9yLmRvdChrLCByYXkuZ2V0RGlyZWN0aW9uKCkpLCBjID0gVmVjdG9yXzEuVmVjdG9yLmRvdChrLCBrKSAtIE1hdGgucG93KHRoaXMucmFkaXVzLCAyKSwgZCA9IE1hdGgucG93KGIsIDIpIC0gYywgdDEsIHQyLCBtaW5ULCBtYXhULCBpbnRlcnNlY3Rpb25Qb2ludCwgaGl0UG9pbnQsIGRpc3RhbmNlO1xuICAgICAgICBpZiAoYiA+IDAgfHwgZCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZCA+PSAwKSB7XG4gICAgICAgICAgICB0MSA9IC1iICsgTWF0aC5zcXJ0KGQpO1xuICAgICAgICAgICAgdDIgPSAtYiAtIE1hdGguc3FydChkKTtcbiAgICAgICAgICAgIG1pblQgPSBNYXRoLm1pbih0MSwgdDIpO1xuICAgICAgICAgICAgbWF4VCA9IE1hdGgubWF4KHQxLCB0Mik7XG4gICAgICAgICAgICBpZiAobWluVCA+IFJUTWF0aF8xLlJUTWF0aC5FUFNJTE9OKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnQgPSBtaW5UO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnQgPSBtYXhUO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGludGVyc2VjdGlvblBvaW50IDwgUlRNYXRoXzEuUlRNYXRoLkVQU0lMT04pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaGl0UG9pbnQgPSBWZWN0b3JfMS5WZWN0b3IuYWRkKFZlY3Rvcl8xLlZlY3Rvci5zY2FsZShyYXkuZ2V0RGlyZWN0aW9uKCksIGludGVyc2VjdGlvblBvaW50KSwgcmF5LmdldE9yaWdpbigpKTtcbiAgICAgICAgZGlzdGFuY2UgPSBWZWN0b3JfMS5WZWN0b3Iuc3Vic3RyYWN0KGhpdFBvaW50LCByYXkuZ2V0T3JpZ2luKCkpLmdldExlbmd0aCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGl0UG9pbnQ6IGhpdFBvaW50LFxuICAgICAgICAgICAgbm9ybWFsOiB0aGlzLmdldE5vcm1hbChoaXRQb2ludCksXG4gICAgICAgICAgICBkaXN0YW5jZTogZGlzdGFuY2VcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIFNwaGVyaWNhbExpZ2h0LnByb3RvdHlwZS5nZXROb3JtYWwgPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIFZlY3Rvcl8xLlZlY3Rvci5ub3JtYWxpemUoVmVjdG9yXzEuVmVjdG9yLnNjYWxlKFZlY3Rvcl8xLlZlY3Rvci5zdWJzdHJhY3QocG9pbnQsIHRoaXMuY2VudGVyKSwgMSAvIHRoaXMucmFkaXVzKSk7XG4gICAgfTtcbiAgICBTcGhlcmljYWxMaWdodC5wcm90b3R5cGUuZ2V0TWF0ZXJpYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hdGVyaWFsO1xuICAgIH07XG4gICAgU3BoZXJpY2FsTGlnaHQucHJvdG90eXBlLnNldE1hdGVyaWFsID0gZnVuY3Rpb24gKG1hdGVyaWFsKSB7XG4gICAgICAgIHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICByZXR1cm4gU3BoZXJpY2FsTGlnaHQ7XG59KShBYnN0cmFjdExpZ2h0XzEuQWJzdHJhY3RMaWdodCk7XG5leHBvcnRzLlNwaGVyaWNhbExpZ2h0ID0gU3BoZXJpY2FsTGlnaHQ7XG4iLCJpbXBvcnQgeyBBYnN0cmFjdExpZ2h0IH0gZnJvbSBcIi4vQWJzdHJhY3RMaWdodFwiO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tIFwiLi8uLi9Db2xvci9Db2xvclwiO1xuaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tIFwiLi8uLi9NYXRlcmlhbFwiO1xuaW1wb3J0IHsgUmF5IH0gZnJvbSBcIi4vLi4vUmF5XCI7XG5pbXBvcnQgeyBSR0JDb2xvciB9IGZyb20gXCIuLy4uL0NvbG9yL1JHQkNvbG9yXCI7XG5pbXBvcnQgeyBSVE1hdGggfSBmcm9tIFwiLi8uLi9SVE1hdGhcIlxuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSBcIi4vLi4vVmVjdG9yXCI7XG5cbmV4cG9ydCBjbGFzcyBTcGhlcmljYWxMaWdodCBleHRlbmRzIEFic3RyYWN0TGlnaHQge1xuICAgIHByaXZhdGUgY2VudGVyOiBWZWN0b3I7XG4gICAgcHJpdmF0ZSByYWRpdXM6IG51bWJlciA9IDUwO1xuICAgIHByaXZhdGUgcG93ZXI6IG51bWJlcjtcbiAgICBwcml2YXRlIGZhZGVSYWRpdXM6IG51bWJlciA9IDI1MDA7XG4gICAgcHJpdmF0ZSBtYXRlcmlhbDogTWF0ZXJpYWwgPSBuZXcgTWF0ZXJpYWwobmV3IENvbG9yKG5ldyBSR0JDb2xvcigyNDQsIDI0NCwgMjQ0KSksIDApLnNldExhbWJlcnRDb2VmZigxKTtcblxuICAgIGNvbnN0cnVjdG9yIChwb3NpdGlvbjogVmVjdG9yLCBwb3dlcjogbnVtYmVyLCByYWRpdXM/OiBudW1iZXIpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmNlbnRlciA9IHBvc2l0aW9uO1xuICAgICAgICB0aGlzLnBvd2VyID0gcG93ZXI7XG5cbiAgICAgICAgaWYgKHJhZGl1cykge1xuICAgICAgICAgICAgdGhpcy5yYWRpdXMgPSByYWRpdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0RmFkZVJhZGl1cyAoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmFkaXVzICsgdGhpcy5mYWRlUmFkaXVzO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRQb3NpdGlvbiAoKTogVmVjdG9yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2VudGVyO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRQb3dlciAoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG93ZXI7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFJhZGl1cyAoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmFkaXVzO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRSYW5kb21Qb2ludCAoKTogVmVjdG9yIHtcbiAgICAgICAgbGV0IHUgPSBNYXRoLnJhbmRvbSgpLFxuICAgICAgICAgICAgdiA9IE1hdGgucmFuZG9tKCksXG4gICAgICAgICAgICBxID0gMiAqIE1hdGguUEkgKiB1LFxuICAgICAgICAgICAgZiA9IE1hdGgucG93KE1hdGguY29zKDIgKiB2IC0gMSksIC0xKTtcblxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcihcbiAgICAgICAgICAgIHRoaXMucmFkaXVzICogTWF0aC5jb3MocSkgKiBNYXRoLnNpbihmKSxcbiAgICAgICAgICAgIHRoaXMucmFkaXVzICogTWF0aC5zaW4ocSkgKiBNYXRoLnNpbihmKSxcbiAgICAgICAgICAgIHRoaXMucmFkaXVzICogTWF0aC5jb3MoZilcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0SW50ZXJzZWN0RGF0YSAocmF5OiBSYXkpOiBhbnkge1xuICAgICAgICBsZXQgayA9IFZlY3Rvci5zdWJzdHJhY3QocmF5LmdldE9yaWdpbigpLCB0aGlzLmNlbnRlciksXG4gICAgICAgICAgICBiOiBudW1iZXIgPSBWZWN0b3IuZG90KGssIHJheS5nZXREaXJlY3Rpb24oKSksXG4gICAgICAgICAgICBjOiBudW1iZXIgPSBWZWN0b3IuZG90KGssIGspIC0gdGhpcy5yYWRpdXMgKiogMixcbiAgICAgICAgICAgIGQ6IG51bWJlciA9IGIgKiogMiAtIGMsXG4gICAgICAgICAgICB0MTogbnVtYmVyLFxuICAgICAgICAgICAgdDI6IG51bWJlcixcbiAgICAgICAgICAgIG1pblQ6IG51bWJlcixcbiAgICAgICAgICAgIG1heFQ6IG51bWJlcixcbiAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50OiBudW1iZXIsXG4gICAgICAgICAgICBoaXRQb2ludDogVmVjdG9yLFxuICAgICAgICAgICAgZGlzdGFuY2U6IG51bWJlcjtcblxuICAgICAgICBpZiAoYiA+IDAgfHwgZCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkID49IDApIHtcbiAgICAgICAgICAgIHQxID0gLWIgKyBNYXRoLnNxcnQoZCk7XG4gICAgICAgICAgICB0MiA9IC1iIC0gTWF0aC5zcXJ0KGQpO1xuICAgICAgICAgICAgbWluVCA9IE1hdGgubWluKHQxLCB0Mik7XG4gICAgICAgICAgICBtYXhUID0gTWF0aC5tYXgodDEsIHQyKTtcblxuICAgICAgICAgICAgaWYgKG1pblQgPiBSVE1hdGguRVBTSUxPTikge1xuICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50ID0gbWluVDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnQgPSBtYXhUO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uUG9pbnQgPCBSVE1hdGguRVBTSUxPTikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGhpdFBvaW50ID0gVmVjdG9yLmFkZChcbiAgICAgICAgICAgIFZlY3Rvci5zY2FsZShyYXkuZ2V0RGlyZWN0aW9uKCksIGludGVyc2VjdGlvblBvaW50KSxcbiAgICAgICAgICAgIHJheS5nZXRPcmlnaW4oKVxuICAgICAgICApO1xuICAgICAgICBkaXN0YW5jZSA9IFZlY3Rvci5zdWJzdHJhY3QoXG4gICAgICAgICAgICBoaXRQb2ludCxcbiAgICAgICAgICAgIHJheS5nZXRPcmlnaW4oKVxuICAgICAgICApLmdldExlbmd0aCgpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoaXRQb2ludDogaGl0UG9pbnQsXG4gICAgICAgICAgICBub3JtYWw6IHRoaXMuZ2V0Tm9ybWFsKGhpdFBvaW50KSxcbiAgICAgICAgICAgIGRpc3RhbmNlOiBkaXN0YW5jZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXROb3JtYWwgKHBvaW50OiBWZWN0b3IpOiBWZWN0b3Ige1xuICAgICAgICByZXR1cm4gVmVjdG9yLm5vcm1hbGl6ZShcbiAgICAgICAgICAgIFZlY3Rvci5zY2FsZShcbiAgICAgICAgICAgICAgICBWZWN0b3Iuc3Vic3RyYWN0KHBvaW50LCB0aGlzLmNlbnRlciksXG4gICAgICAgICAgICAgICAgMSAvIHRoaXMucmFkaXVzXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldE1hdGVyaWFsICgpOiBNYXRlcmlhbCB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hdGVyaWFsO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRNYXRlcmlhbCAobWF0ZXJpYWw6IE1hdGVyaWFsKTogdGhpcyB7XG4gICAgICAgIHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbDtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb2xvciB9IGZyb20gXCIuL0NvbG9yL0NvbG9yXCI7XG5pbXBvcnQgeyBSR0JDb2xvciB9IGZyb20gXCIuL0NvbG9yL1JHQkNvbG9yXCI7XG5cbmV4cG9ydCBjbGFzcyBNYXRlcmlhbCB7XG4gICAgcHJpdmF0ZSBjb2xvcjogQ29sb3I7XG4gICAgcHJpdmF0ZSBsYW1iZXJ0Q29lZmY6IG51bWJlciA9IDAuNTtcbiAgICBwcml2YXRlIHBob25nQ29lZmY6IG51bWJlciA9IDAuNTtcbiAgICBwcml2YXRlIHJlZmxlY3Rpb25Db2VmZjogbnVtYmVyID0gMDtcblxuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgY29sb3I6IENvbG9yID0gbmV3IENvbG9yKG5ldyBSR0JDb2xvcigyNTUsIDAsIDApKSxcbiAgICAgICAgcmVmbGVjdGlvbkNvZWZmOiBudW1iZXIgPSAwXG4gICAgKSB7XG4gICAgICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcbiAgICAgICAgdGhpcy5yZWZsZWN0aW9uQ29lZmYgPSByZWZsZWN0aW9uQ29lZmY7XG4gICAgfVxuXG4gICAgcHVibGljIGdldENvbG9yICgpOiBDb2xvciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbG9yO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRMYW1iZXJ0Q29lZmYoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGFtYmVydENvZWZmO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRQaG9uZ0NvZWZmKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnBob25nQ29lZmY7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFJlZmxlY3Rpb25WYWx1ZSAoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVmbGVjdGlvbkNvZWZmO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRMYW1iZXJ0Q29lZmYobGFtYmVydENvZWZmOiBudW1iZXIpOiB0aGlzIHtcbiAgICAgICAgdGhpcy5sYW1iZXJ0Q29lZmYgPSBsYW1iZXJ0Q29lZmY7XG4gICAgICAgIHRoaXMucGhvbmdDb2VmZiA9IDEgLSBsYW1iZXJ0Q29lZmY7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIHNldFBob25nQ29lZmYocGhvbmdDb2VmZjogbnVtYmVyKTogdGhpcyB7XG4gICAgICAgIHRoaXMucGhvbmdDb2VmZiA9IHBob25nQ29lZmY7XG4gICAgICAgIHRoaXMubGFtYmVydENvZWZmID0gMSAtIHBob25nQ29lZmY7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufSIsImltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSBcIi4uL01hdGVyaWFsXCI7XG5pbXBvcnQgeyBSYXkgfSBmcm9tIFwiLi4vUmF5XCI7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tIFwiLi4vVmVjdG9yXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdE9iamVjdCB7XG4gICAgYWJzdHJhY3QgZ2V0SW50ZXJzZWN0RGF0YSAocmF5OiBSYXkpOiBhbnk7XG4gICAgYWJzdHJhY3QgZ2V0TWF0ZXJpYWwgKCk6IE1hdGVyaWFsO1xuICAgIGFic3RyYWN0IHNldE1hdGVyaWFsIChtYXRlcmlhbDogTWF0ZXJpYWwpOiB0aGlzO1xufVxuIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgUlRNYXRoXzEgPSByZXF1aXJlKFwiLi4vUlRNYXRoXCIpO1xudmFyIEFic3RyYWN0T2JqZWN0XzEgPSByZXF1aXJlKFwiLi9BYnN0cmFjdE9iamVjdFwiKTtcbnZhciBDb2xvcl8xID0gcmVxdWlyZShcIi4uL0NvbG9yL0NvbG9yXCIpO1xudmFyIE1hdGVyaWFsXzEgPSByZXF1aXJlKFwiLi4vTWF0ZXJpYWxcIik7XG52YXIgVmVjdG9yXzEgPSByZXF1aXJlKFwiLi4vVmVjdG9yXCIpO1xudmFyIFBvbHlnb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQb2x5Z29uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBvbHlnb24oKSB7XG4gICAgICAgIHZhciB2ZXJ0aWNlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmVydGljZXNbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMubWF0ZXJpYWwgPSBuZXcgTWF0ZXJpYWxfMS5NYXRlcmlhbChDb2xvcl8xLkNvbG9yLmdyYXksIDApO1xuICAgICAgICB0aGlzLnZlcnRpY2VzID0gdmVydGljZXM7XG4gICAgfVxuICAgIFBvbHlnb24ucHJvdG90eXBlLmdldEludGVyc2VjdERhdGEgPSBmdW5jdGlvbiAocmF5KSB7XG4gICAgICAgIHZhciBkaXN0YW5jZSwgZGlzdGFuY2VGcm9tQXhpc0NlbnRlciwgaGl0UG9pbnQsIG5vcm1hbCA9IHRoaXMuZ2V0Tm9ybWFsKCksIG51bWVyYXRvciwgZGVub21pbmF0b3I7XG4gICAgICAgIGRpc3RhbmNlRnJvbUF4aXNDZW50ZXIgPSBWZWN0b3JfMS5WZWN0b3IuZG90KHRoaXMudmVydGljZXNbMF0sIG5vcm1hbCk7XG4gICAgICAgIGRlbm9taW5hdG9yID0gVmVjdG9yXzEuVmVjdG9yLmRvdChub3JtYWwsIHJheS5nZXREaXJlY3Rpb24oKSk7XG4gICAgICAgIG51bWVyYXRvciA9IC1WZWN0b3JfMS5WZWN0b3IuZG90KG5vcm1hbCwgcmF5LmdldE9yaWdpbigpKSArIGRpc3RhbmNlRnJvbUF4aXNDZW50ZXI7XG4gICAgICAgIGRpc3RhbmNlID0gbnVtZXJhdG9yIC8gZGVub21pbmF0b3I7XG4gICAgICAgIGlmIChkaXN0YW5jZSA8IFJUTWF0aF8xLlJUTWF0aC5FUFNJTE9OKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaGl0UG9pbnQgPSByYXkuZ2V0SGl0UG9pbnQoZGlzdGFuY2UpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgdmVydGljZXNMZW5ndGggPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgaSA8IHZlcnRpY2VzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB2ZXJ0ZXgxID0gdGhpcy52ZXJ0aWNlc1tpXSwgdmVydGV4MiA9IHZvaWQgMDtcbiAgICAgICAgICAgIGlmIChpID09PSB2ZXJ0aWNlc0xlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICB2ZXJ0ZXgyID0gdGhpcy52ZXJ0aWNlc1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZlcnRleDIgPSB0aGlzLnZlcnRpY2VzW2kgKyAxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghUG9seWdvbi5jaGVja1NhbWVDbG9ja0RpcihWZWN0b3JfMS5WZWN0b3Iuc3Vic3RyYWN0KHZlcnRleDIsIHZlcnRleDEpLCBWZWN0b3JfMS5WZWN0b3Iuc3Vic3RyYWN0KGhpdFBvaW50LCB2ZXJ0ZXgxKSwgdGhpcy5nZXROb3JtYWwoKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhpdFBvaW50OiBoaXRQb2ludCxcbiAgICAgICAgICAgIG5vcm1hbDogbm9ybWFsLFxuICAgICAgICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBQb2x5Z29uLnByb3RvdHlwZS5nZXRNYXRlcmlhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0ZXJpYWw7XG4gICAgfTtcbiAgICBQb2x5Z29uLnByb3RvdHlwZS5nZXROb3JtYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlZGdlMSA9IFZlY3Rvcl8xLlZlY3Rvci5zdWJzdHJhY3QodGhpcy52ZXJ0aWNlc1syXSwgdGhpcy52ZXJ0aWNlc1swXSksIGVkZ2UyID0gVmVjdG9yXzEuVmVjdG9yLnN1YnN0cmFjdCh0aGlzLnZlcnRpY2VzWzFdLCB0aGlzLnZlcnRpY2VzWzBdKTtcbiAgICAgICAgcmV0dXJuIFZlY3Rvcl8xLlZlY3Rvci5ub3JtYWxpemUoVmVjdG9yXzEuVmVjdG9yLmNyb3NzKGVkZ2UxLCBlZGdlMikpO1xuICAgIH07XG4gICAgUG9seWdvbi5wcm90b3R5cGUuc2V0TWF0ZXJpYWwgPSBmdW5jdGlvbiAobWF0ZXJpYWwpIHtcbiAgICAgICAgdGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFBvbHlnb24uY2hlY2tTYW1lQ2xvY2tEaXIgPSBmdW5jdGlvbiAodmVjdG9yMSwgdmVjdG9yMiwgbm9ybWFsKSB7XG4gICAgICAgIHZhciBub3JtYWxWMVYyID0gVmVjdG9yXzEuVmVjdG9yLmNyb3NzKHZlY3RvcjIsIHZlY3RvcjEpO1xuICAgICAgICByZXR1cm4gVmVjdG9yXzEuVmVjdG9yLmRvdChub3JtYWxWMVYyLCBub3JtYWwpID49IDA7XG4gICAgfTtcbiAgICByZXR1cm4gUG9seWdvbjtcbn0pKEFic3RyYWN0T2JqZWN0XzEuQWJzdHJhY3RPYmplY3QpO1xuZXhwb3J0cy5Qb2x5Z29uID0gUG9seWdvbjtcbiIsImltcG9ydCB7IFJUTWF0aCB9IGZyb20gXCIuLi9SVE1hdGhcIjtcbmltcG9ydCB7IEFic3RyYWN0T2JqZWN0IH0gZnJvbSBcIi4vQWJzdHJhY3RPYmplY3RcIjtcbmltcG9ydCB7IENvbG9yIH0gZnJvbSBcIi4uL0NvbG9yL0NvbG9yXCI7XG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gXCIuLi9NYXRlcmlhbFwiO1xuaW1wb3J0IHsgUmF5IH0gZnJvbSBcIi4uL1JheVwiO1xuaW1wb3J0IHsgUkdCQ29sb3IgfSBmcm9tIFwiLi4vQ29sb3IvUkdCQ29sb3JcIjtcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gXCIuLi9WZWN0b3JcIjtcblxuZXhwb3J0IGNsYXNzIFBvbHlnb24gZXh0ZW5kcyBBYnN0cmFjdE9iamVjdCB7XG4gICAgcHJpdmF0ZSB2ZXJ0aWNlczogVmVjdG9yW107XG4gICAgcHJpdmF0ZSBtYXRlcmlhbDogTWF0ZXJpYWwgPSBuZXcgTWF0ZXJpYWwoQ29sb3IuZ3JheSwgMCk7XG5cbiAgICBjb25zdHJ1Y3RvciAoLi4udmVydGljZXM6IFZlY3RvcltdKSB7XG4gICAgICAgIHN1cGVyICgpO1xuXG4gICAgICAgIHRoaXMudmVydGljZXMgPSB2ZXJ0aWNlcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0SW50ZXJzZWN0RGF0YSAocmF5OiBSYXkpOiBhbnkge1xuICAgICAgICBsZXQgZGlzdGFuY2U6IG51bWJlcixcbiAgICAgICAgICAgIGRpc3RhbmNlRnJvbUF4aXNDZW50ZXI6IG51bWJlcixcbiAgICAgICAgICAgIGhpdFBvaW50OiBWZWN0b3IsXG4gICAgICAgICAgICBub3JtYWw6IFZlY3RvciA9IHRoaXMuZ2V0Tm9ybWFsKCksXG4gICAgICAgICAgICBudW1lcmF0b3I6IG51bWJlcixcbiAgICAgICAgICAgIGRlbm9taW5hdG9yOiBudW1iZXI7XG5cbiAgICAgICAgZGlzdGFuY2VGcm9tQXhpc0NlbnRlciA9IFZlY3Rvci5kb3QodGhpcy52ZXJ0aWNlc1swXSwgbm9ybWFsKTtcblxuICAgICAgICBkZW5vbWluYXRvciA9IFZlY3Rvci5kb3Qobm9ybWFsLCByYXkuZ2V0RGlyZWN0aW9uKCkpO1xuICAgICAgICBudW1lcmF0b3IgPSAtVmVjdG9yLmRvdChub3JtYWwsIHJheS5nZXRPcmlnaW4oKSkgKyBkaXN0YW5jZUZyb21BeGlzQ2VudGVyO1xuXG4gICAgICAgIGRpc3RhbmNlID0gbnVtZXJhdG9yIC8gZGVub21pbmF0b3I7XG5cbiAgICAgICAgaWYgKGRpc3RhbmNlIDwgUlRNYXRoLkVQU0lMT04pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGhpdFBvaW50ID0gcmF5LmdldEhpdFBvaW50KGRpc3RhbmNlKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMCwgdmVydGljZXNMZW5ndGggPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgaSA8IHZlcnRpY2VzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB2ZXJ0ZXgxOiBWZWN0b3IgPSB0aGlzLnZlcnRpY2VzW2ldLFxuICAgICAgICAgICAgICAgIHZlcnRleDI6IFZlY3RvcjtcblxuICAgICAgICAgICAgaWYgKGkgPT09IHZlcnRpY2VzTGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIHZlcnRleDIgPSB0aGlzLnZlcnRpY2VzWzBdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2ZXJ0ZXgyID0gdGhpcy52ZXJ0aWNlc1tpICsgMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAhUG9seWdvbi5jaGVja1NhbWVDbG9ja0RpcihcbiAgICAgICAgICAgICAgICAgICAgVmVjdG9yLnN1YnN0cmFjdCh2ZXJ0ZXgyLCB2ZXJ0ZXgxKSxcbiAgICAgICAgICAgICAgICAgICAgVmVjdG9yLnN1YnN0cmFjdChoaXRQb2ludCwgdmVydGV4MSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0Tm9ybWFsKClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGl0UG9pbnQ6IGhpdFBvaW50LFxuICAgICAgICAgICAgbm9ybWFsOiBub3JtYWwsXG4gICAgICAgICAgICBkaXN0YW5jZTogZGlzdGFuY2VcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TWF0ZXJpYWwgKCk6IE1hdGVyaWFsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0ZXJpYWw7XG4gICAgfVxuXG4gICAgcHVibGljIGdldE5vcm1hbCAoKTogVmVjdG9yIHtcbiAgICAgICAgbGV0IGVkZ2UxOiBWZWN0b3IgPSBWZWN0b3Iuc3Vic3RyYWN0KHRoaXMudmVydGljZXNbMl0sIHRoaXMudmVydGljZXNbMF0pLFxuICAgICAgICAgICAgZWRnZTI6IFZlY3RvciA9IFZlY3Rvci5zdWJzdHJhY3QodGhpcy52ZXJ0aWNlc1sxXSwgdGhpcy52ZXJ0aWNlc1swXSk7XG5cbiAgICAgICAgcmV0dXJuIFZlY3Rvci5ub3JtYWxpemUoVmVjdG9yLmNyb3NzKGVkZ2UxLCBlZGdlMikpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRNYXRlcmlhbCAobWF0ZXJpYWw6IE1hdGVyaWFsKTogdGhpcyB7XG4gICAgICAgIHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbDtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBjaGVja1NhbWVDbG9ja0RpciAodmVjdG9yMTogVmVjdG9yLCB2ZWN0b3IyOiBWZWN0b3IsIG5vcm1hbDogVmVjdG9yKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBub3JtYWxWMVYyOiBWZWN0b3IgPSBWZWN0b3IuY3Jvc3ModmVjdG9yMiwgdmVjdG9yMSk7XG5cbiAgICAgICAgcmV0dXJuIFZlY3Rvci5kb3Qobm9ybWFsVjFWMiwgbm9ybWFsKSA+PSAwO1xuICAgIH1cbn1cbiIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFJUTWF0aF8xID0gcmVxdWlyZShcIi4uL1JUTWF0aFwiKTtcbnZhciBBYnN0cmFjdE9iamVjdF8xID0gcmVxdWlyZShcIi4vQWJzdHJhY3RPYmplY3RcIik7XG52YXIgQ29sb3JfMSA9IHJlcXVpcmUoXCIuLi9Db2xvci9Db2xvclwiKTtcbnZhciBNYXRlcmlhbF8xID0gcmVxdWlyZShcIi4uL01hdGVyaWFsXCIpO1xudmFyIFZlY3Rvcl8xID0gcmVxdWlyZShcIi4uL1ZlY3RvclwiKTtcbnZhciBTcGhlcmUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTcGhlcmUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3BoZXJlKGNlbnRlciwgcmFkaXVzKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLm1hdGVyaWFsID0gbmV3IE1hdGVyaWFsXzEuTWF0ZXJpYWwoQ29sb3JfMS5Db2xvci5yZWQsIDApO1xuICAgICAgICB0aGlzLmNlbnRlciA9IGNlbnRlcjtcbiAgICAgICAgdGhpcy5yYWRpdXMgPSByYWRpdXM7XG4gICAgfVxuICAgIFNwaGVyZS5wcm90b3R5cGUuZ2V0SW50ZXJzZWN0RGF0YSA9IGZ1bmN0aW9uIChyYXkpIHtcbiAgICAgICAgdmFyIGsgPSBWZWN0b3JfMS5WZWN0b3Iuc3Vic3RyYWN0KHJheS5nZXRPcmlnaW4oKSwgdGhpcy5jZW50ZXIpLCBiID0gVmVjdG9yXzEuVmVjdG9yLmRvdChrLCByYXkuZ2V0RGlyZWN0aW9uKCkpLCBjID0gVmVjdG9yXzEuVmVjdG9yLmRvdChrLCBrKSAtIE1hdGgucG93KHRoaXMucmFkaXVzLCAyKSwgZCA9IE1hdGgucG93KGIsIDIpIC0gYywgdDEsIHQyLCBtaW5ULCBtYXhULCBpbnRlcnNlY3Rpb25Qb2ludCwgaGl0UG9pbnQsIGRpc3RhbmNlO1xuICAgICAgICBpZiAoYiA+IDAgfHwgZCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZCA+PSAwKSB7XG4gICAgICAgICAgICB0MSA9IC1iICsgTWF0aC5zcXJ0KGQpO1xuICAgICAgICAgICAgdDIgPSAtYiAtIE1hdGguc3FydChkKTtcbiAgICAgICAgICAgIG1pblQgPSBNYXRoLm1pbih0MSwgdDIpO1xuICAgICAgICAgICAgbWF4VCA9IE1hdGgubWF4KHQxLCB0Mik7XG4gICAgICAgICAgICBpZiAobWluVCA+IFJUTWF0aF8xLlJUTWF0aC5FUFNJTE9OKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnQgPSBtaW5UO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnQgPSBtYXhUO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGludGVyc2VjdGlvblBvaW50IDwgUlRNYXRoXzEuUlRNYXRoLkVQU0lMT04pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaGl0UG9pbnQgPSBWZWN0b3JfMS5WZWN0b3IuYWRkKFZlY3Rvcl8xLlZlY3Rvci5zY2FsZShyYXkuZ2V0RGlyZWN0aW9uKCksIGludGVyc2VjdGlvblBvaW50KSwgcmF5LmdldE9yaWdpbigpKTtcbiAgICAgICAgZGlzdGFuY2UgPSBWZWN0b3JfMS5WZWN0b3Iuc3Vic3RyYWN0KGhpdFBvaW50LCByYXkuZ2V0T3JpZ2luKCkpLmdldExlbmd0aCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGl0UG9pbnQ6IGhpdFBvaW50LFxuICAgICAgICAgICAgbm9ybWFsOiB0aGlzLmdldE5vcm1hbChoaXRQb2ludCksXG4gICAgICAgICAgICBkaXN0YW5jZTogZGlzdGFuY2VcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIFNwaGVyZS5wcm90b3R5cGUuZ2V0TWF0ZXJpYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hdGVyaWFsO1xuICAgIH07XG4gICAgU3BoZXJlLnByb3RvdHlwZS5nZXROb3JtYWwgPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIFZlY3Rvcl8xLlZlY3Rvci5ub3JtYWxpemUoVmVjdG9yXzEuVmVjdG9yLnNjYWxlKFZlY3Rvcl8xLlZlY3Rvci5zdWJzdHJhY3QocG9pbnQsIHRoaXMuY2VudGVyKSwgMSAvIHRoaXMucmFkaXVzKSk7XG4gICAgfTtcbiAgICBTcGhlcmUucHJvdG90eXBlLnNldE1hdGVyaWFsID0gZnVuY3Rpb24gKG1hdGVyaWFsKSB7XG4gICAgICAgIHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICByZXR1cm4gU3BoZXJlO1xufSkoQWJzdHJhY3RPYmplY3RfMS5BYnN0cmFjdE9iamVjdCk7XG5leHBvcnRzLlNwaGVyZSA9IFNwaGVyZTtcbiIsImltcG9ydCB7IFJUTWF0aCB9IGZyb20gXCIuLi9SVE1hdGhcIjtcbmltcG9ydCB7IEFic3RyYWN0T2JqZWN0IH0gZnJvbSBcIi4vQWJzdHJhY3RPYmplY3RcIjtcbmltcG9ydCB7IENvbG9yIH0gZnJvbSBcIi4uL0NvbG9yL0NvbG9yXCI7XG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gXCIuLi9NYXRlcmlhbFwiO1xuaW1wb3J0IHsgUmF5IH0gZnJvbSBcIi4uL1JheVwiO1xuaW1wb3J0IHsgUkdCQ29sb3IgfSBmcm9tIFwiLi4vQ29sb3IvUkdCQ29sb3JcIjtcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gXCIuLi9WZWN0b3JcIjtcblxuZXhwb3J0IGNsYXNzIFNwaGVyZSBleHRlbmRzIEFic3RyYWN0T2JqZWN0IHtcbiAgICBwcml2YXRlIGNlbnRlcjogVmVjdG9yO1xuICAgIHByaXZhdGUgcmFkaXVzOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBtYXRlcmlhbDogTWF0ZXJpYWwgPSBuZXcgTWF0ZXJpYWwoQ29sb3IucmVkLCAwKTtcblxuICAgIGNvbnN0cnVjdG9yIChjZW50ZXI6IFZlY3RvciwgcmFkaXVzOiBudW1iZXIpIHtcbiAgICAgICAgc3VwZXIgKCk7XG5cbiAgICAgICAgdGhpcy5jZW50ZXIgPSBjZW50ZXI7XG4gICAgICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRJbnRlcnNlY3REYXRhIChyYXk6IFJheSk6IGFueSB7XG4gICAgICAgIGxldCBrID0gVmVjdG9yLnN1YnN0cmFjdChyYXkuZ2V0T3JpZ2luKCksIHRoaXMuY2VudGVyKSxcbiAgICAgICAgICAgIGI6IG51bWJlciA9IFZlY3Rvci5kb3QoaywgcmF5LmdldERpcmVjdGlvbigpKSxcbiAgICAgICAgICAgIGM6IG51bWJlciA9IFZlY3Rvci5kb3QoaywgaykgLSB0aGlzLnJhZGl1cyAqKiAyLFxuICAgICAgICAgICAgZDogbnVtYmVyID0gYiAqKiAyIC0gYyxcbiAgICAgICAgICAgIHQxOiBudW1iZXIsXG4gICAgICAgICAgICB0MjogbnVtYmVyLFxuICAgICAgICAgICAgbWluVDogbnVtYmVyLFxuICAgICAgICAgICAgbWF4VDogbnVtYmVyLFxuICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnQ6IG51bWJlcixcbiAgICAgICAgICAgIGhpdFBvaW50OiBWZWN0b3IsXG4gICAgICAgICAgICBkaXN0YW5jZTogbnVtYmVyO1xuXG4gICAgICAgIGlmIChiID4gMCB8fCBkIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGQgPj0gMCkge1xuICAgICAgICAgICAgdDEgPSAtYiArIE1hdGguc3FydChkKTtcbiAgICAgICAgICAgIHQyID0gLWIgLSBNYXRoLnNxcnQoZCk7XG4gICAgICAgICAgICBtaW5UID0gTWF0aC5taW4odDEsIHQyKTtcbiAgICAgICAgICAgIG1heFQgPSBNYXRoLm1heCh0MSwgdDIpO1xuXG4gICAgICAgICAgICBpZiAobWluVCA+IFJUTWF0aC5FUFNJTE9OKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnQgPSBtaW5UO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25Qb2ludCA9IG1heFQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludCA8IFJUTWF0aC5FUFNJTE9OKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaGl0UG9pbnQgPSBWZWN0b3IuYWRkKFxuICAgICAgICAgICAgVmVjdG9yLnNjYWxlKHJheS5nZXREaXJlY3Rpb24oKSwgaW50ZXJzZWN0aW9uUG9pbnQpLFxuICAgICAgICAgICAgcmF5LmdldE9yaWdpbigpXG4gICAgICAgICk7XG4gICAgICAgIGRpc3RhbmNlID0gVmVjdG9yLnN1YnN0cmFjdChcbiAgICAgICAgICAgIGhpdFBvaW50LFxuICAgICAgICAgICAgcmF5LmdldE9yaWdpbigpXG4gICAgICAgICkuZ2V0TGVuZ3RoKCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhpdFBvaW50OiBoaXRQb2ludCxcbiAgICAgICAgICAgIG5vcm1hbDogdGhpcy5nZXROb3JtYWwoaGl0UG9pbnQpLFxuICAgICAgICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIGdldE1hdGVyaWFsICgpOiBNYXRlcmlhbCB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hdGVyaWFsO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXROb3JtYWwgKHBvaW50OiBWZWN0b3IpOiBWZWN0b3Ige1xuICAgICAgICByZXR1cm4gVmVjdG9yLm5vcm1hbGl6ZShcbiAgICAgICAgICAgIFZlY3Rvci5zY2FsZShcbiAgICAgICAgICAgICAgICBWZWN0b3Iuc3Vic3RyYWN0KHBvaW50LCB0aGlzLmNlbnRlciksXG4gICAgICAgICAgICAgICAgMSAvIHRoaXMucmFkaXVzXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldE1hdGVyaWFsIChtYXRlcmlhbDogTWF0ZXJpYWwpOiB0aGlzIHtcbiAgICAgICAgdGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbiIsImV4cG9ydCBtb2R1bGUgUlRNYXRoIHtcbiAgICBleHBvcnQgY29uc3QgRVBTSUxPTiA9IDAuMDAxO1xufSIsImltcG9ydCB7IFZlY3RvciB9IGZyb20gXCIuL1ZlY3RvclwiO1xuXG5leHBvcnQgY2xhc3MgUmF5IHtcbiAgICBwcml2YXRlIG9yaWdpbjogVmVjdG9yO1xuICAgIHByaXZhdGUgZGlyZWN0aW9uOiAgVmVjdG9yO1xuICAgIHByaXZhdGUgaXRlcmF0aW9uOiBudW1iZXIgPSA4O1xuXG4gICAgY29uc3RydWN0b3IgKG9yaWdpbjogVmVjdG9yLCBkaXJlY3Rpb246IFZlY3RvciwgaXRlcmF0aW9uPzogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMub3JpZ2luID0gb3JpZ2luO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IFZlY3Rvci5ub3JtYWxpemUoZGlyZWN0aW9uKTtcblxuICAgICAgICBpZiAoaXRlcmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLml0ZXJhdGlvbiA9IGl0ZXJhdGlvbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRPcmlnaW4gKCk6IFZlY3RvciB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWdpbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0RGlyZWN0aW9uICgpOiBWZWN0b3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3Rpb247XG4gICAgfVxuXG4gICAgcHVibGljIGdldEl0ZXJhdGlvbiAoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlcmF0aW9uO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRIaXRQb2ludCAoZGlzdGFuY2U6IG51bWJlcik6IFZlY3RvciB7XG4gICAgICAgIHJldHVybiBWZWN0b3IuYWRkKHRoaXMub3JpZ2luLCBWZWN0b3Iuc2NhbGUodGhpcy5kaXJlY3Rpb24sIGRpc3RhbmNlKSk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldEl0ZXJhdGlvbiAoaXRlcmF0aW9uOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pdGVyYXRpb24gPSBpdGVyYXRpb247XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ2FtZXJhIH0gZnJvbSBcIi4vQ2FtZXJhXCI7XG5pbXBvcnQgeyBBYnN0cmFjdExpZ2h0IH0gZnJvbSBcIi4vTGlnaHRzL0Fic3RyYWN0TGlnaHRcIjtcblxuZXhwb3J0IGNsYXNzIFNjZW5lIHtcbiAgICBwcml2YXRlIGNhbWVyYTogQ2FtZXJhO1xuICAgIHByaXZhdGUgb2JqZWN0czogYW55W10gPSBbXTtcbiAgICBwcml2YXRlIGxpZ2h0czogQWJzdHJhY3RMaWdodFtdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvciAob2JqZWN0czogYW55KSB7XG4gICAgICAgIHRoaXMub2JqZWN0cyA9IG9iamVjdHMub2JqZWN0cztcbiAgICAgICAgdGhpcy5jYW1lcmEgPSBvYmplY3RzLmNhbWVyYTtcbiAgICAgICAgdGhpcy5saWdodHMgPSBvYmplY3RzLmxpZ2h0cztcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkT2JqZWN0IChvYmplY3Q6IGFueSk6IHZvaWQge1xuICAgICAgICB0aGlzLm9iamVjdHMucHVzaChvYmplY3QpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDYW1lcmEgKCk6IENhbWVyYSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbWVyYTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TGlnaHRzICgpOiBBYnN0cmFjdExpZ2h0W10ge1xuICAgICAgICByZXR1cm4gdGhpcy5saWdodHM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldE9iamVjdHMgKCk6IGFueVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2JqZWN0cztcbiAgICB9XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBuby1kZWZhdWx0LWxpYj1cInRydWVcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwibGliL2xpYi53ZWJ3b3JrZXIuZC50c1wiIC8+XG5cbmltcG9ydCB7IEFic3RyYWN0TGlnaHQgfSBmcm9tIFwiLi9MaWdodHMvQWJzdHJhY3RMaWdodFwiO1xuaW1wb3J0IHsgQWJzdHJhY3RPYmplY3QgfSBmcm9tIFwiLi9PYmplY3RzL0Fic3RyYWN0T2JqZWN0XCI7XG5pbXBvcnQgeyBDYW1lcmEgfSBmcm9tIFwiLi9DYW1lcmFcIjtcbmltcG9ydCB7IENvbG9yIH0gZnJvbSBcIi4vQ29sb3IvQ29sb3JcIjtcbmltcG9ydCB7IEludGVyc2VjdFBvaW50IH0gZnJvbSBcIi4vSW50ZXJzZWN0UG9pbnRcIjtcbmltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSBcIi4vTWF0ZXJpYWxcIjtcbmltcG9ydCB7IFBsYW5lIH0gZnJvbSBcIi4vT2JqZWN0cy9QbGFuZVwiO1xuaW1wb3J0IHsgUG9seWdvbiB9IGZyb20gXCIuL09iamVjdHMvUG9seWdvblwiO1xuaW1wb3J0IHsgUmF5IH0gZnJvbSBcIi4vUmF5XCI7XG5pbXBvcnQgeyBSR0JDb2xvciB9IGZyb20gXCIuL0NvbG9yL1JHQkNvbG9yXCI7XG5pbXBvcnQgeyBSVE1hdGggfSBmcm9tIFwiLi9SVE1hdGhcIjtcbmltcG9ydCB7IFNjZW5lIH0gZnJvbSBcIi4vU2NlbmVcIjtcbmltcG9ydCB7IFNwaGVyZSB9IGZyb20gXCIuL09iamVjdHMvU3BoZXJlXCI7XG5pbXBvcnQgeyBTcGhlcmljYWxMaWdodCB9IGZyb20gXCIuL0xpZ2h0cy9TcGhlcmljYWxMaWdodFwiO1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSBcIi4vVmVjdG9yXCI7XG5cbmNsYXNzIFRyYWNlciB7XG4gICAgcHJpdmF0ZSBzY2VuZTogU2NlbmU7XG4gICAgcHJpdmF0ZSBwaXhlbFNhbXBsZXM6IG51bWJlciA9IDQ7XG4gICAgcHJpdmF0ZSBzaGFkb3dTYW1wbGVzOiBudW1iZXIgPSA1MDtcbiAgICBwcml2YXRlIGdpU2FtcGxlczogbnVtYmVyID0gNTA7XG4gICAgcHJpdmF0ZSBhb1NhbXBsZXM6IG51bWJlciA9IDUwO1xuICAgIHByaXZhdGUgc2NyZWVuV2lkdGg6IG51bWJlciA9IDI1MDtcbiAgICBwcml2YXRlIHNjcmVlbkhlaWdodDogbnVtYmVyID0gMjUwO1xuXG4gICAgcHJpdmF0ZSBjb3NpbmVTYW1wbGVIZW1pc3BoZXJlIChub3JtYWw6IFZlY3Rvcik6IFZlY3RvciB7XG4gICAgICAgIGxldCB1ID0gTWF0aC5yYW5kb20oKTtcbiAgICAgICAgbGV0IHYgPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgICBsZXQgciA9IE1hdGguc3FydCh1KTtcbiAgICAgICAgbGV0IGFuZ2xlID0gMiAqIE1hdGguUEkgKiB2O1xuXG4gICAgICAgIGxldCBzZGlyLFxuICAgICAgICAgICAgdGRpcjtcblxuICAgICAgICBpZiAoTWF0aC5hYnMobm9ybWFsLmdldENvb3JkaW5hdGVzKClbJ3gnXSkgPCAwLjUpIHtcbiAgICAgICAgICAgIHNkaXIgPSBWZWN0b3IuY3Jvc3Mobm9ybWFsLCBuZXcgVmVjdG9yKDEsMCwwKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZGlyID0gVmVjdG9yLmNyb3NzKG5vcm1hbCwgbmV3IFZlY3RvcigwLDEsMCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGRpciA9IFZlY3Rvci5jcm9zcyhub3JtYWwsIHNkaXIpO1xuXG4gICAgICAgIHJldHVybiBWZWN0b3IuYWRkKFxuICAgICAgICAgICAgVmVjdG9yLnNjYWxlKG5vcm1hbCwgIE1hdGguc3FydCgxIC0gdSkpLFxuICAgICAgICAgICAgVmVjdG9yLmFkZChcbiAgICAgICAgICAgICAgICBWZWN0b3Iuc2NhbGUoc2RpciwgciAqIE1hdGguY29zKGFuZ2xlKSksXG4gICAgICAgICAgICAgICAgVmVjdG9yLnNjYWxlKHRkaXIsIHIgKiBNYXRoLnNpbihhbmdsZSkpXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRDb2xvciAocmF5OiBSYXksIHJlY3VyY2l2ZTogYm9vbGVhbiA9IHRydWUpOiBDb2xvciB7XG4gICAgICAgIGxldCBpbnRlcnNlY3Rpb24gPSB0aGlzLnRyYWNlKHJheSksXG4gICAgICAgICAgICBkaWZmdXNlQ29sb3I6IENvbG9yID0gQ29sb3IuYmxhY2ssXG4gICAgICAgICAgICByZWZsZWN0Q29sb3I6IENvbG9yID0gQ29sb3IuYmxhY2s7XG5cbiAgICAgICAgaWYgKCFpbnRlcnNlY3Rpb24uZ2V0SW50ZXJzZWN0KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBDb2xvci5ibGFjaztcbiAgICAgICAgfVxuXG4gICAgICAgIGRpZmZ1c2VDb2xvciA9IHRoaXMuZ2V0RGlmZnVzZUNvbG9yKHJheSwgaW50ZXJzZWN0aW9uLCByZWN1cmNpdmUpO1xuXG4gICAgICAgIGlmIChyZWN1cmNpdmUpIHtcbiAgICAgICAgICAgIHJlZmxlY3RDb2xvciA9IHRoaXMuZ2V0UmVmbGVjdGlvbkNvbG9yKHJheSwgaW50ZXJzZWN0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkaWZmdXNlQ29sb3IuYWRkKHJlZmxlY3RDb2xvcik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXREaWZmdXNlQ29sb3IgKHJheTogUmF5LCBpbnRlcnNlY3Q6IGFueSwgcmVjdXJzaXZlOiBib29sZWFuID0gdHJ1ZSk6IENvbG9yIHtcbiAgICAgICAgbGV0IGxhbWJDb2xvcjogQ29sb3IsXG4gICAgICAgICAgICBwaG9uZ0NvbG9yOiBDb2xvcixcbiAgICAgICAgICAgIHJhZGlhbmNlQ29sb3I6IENvbG9yLFxuICAgICAgICAgICAgcGl4ZWxDb2xvcjogQ29sb3IgPSBDb2xvci5ibGFjayxcbiAgICAgICAgICAgIHJhZGlhbmNlUmFuZG9tRGlyZWN0aW9uOiBWZWN0b3IsXG4gICAgICAgICAgICBsaWdodERpcmVjdGlvbjogVmVjdG9yLFxuICAgICAgICAgICAgbGlnaHRQb3dlcjogbnVtYmVyLFxuICAgICAgICAgICAgcmVmbGVjdFBob25nVmVjdG9yRGlyOiBWZWN0b3IsXG4gICAgICAgICAgICBsYW1iQ29zOiBudW1iZXIsXG4gICAgICAgICAgICBwaG9uZ0NvczogbnVtYmVyLFxuICAgICAgICAgICAgcGhvbmc6IG51bWJlcjtcblxuICAgICAgICBmb3IgKGxldCBsaWdodCBvZiB0aGlzLnNjZW5lLmdldExpZ2h0cygpKSB7XG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0LmdldE93bmVyKCkgaW5zdGFuY2VvZiBBYnN0cmFjdExpZ2h0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGludGVyc2VjdC5nZXRPd25lcigpXG4gICAgICAgICAgICAgICAgICAgIC5nZXRNYXRlcmlhbCgpXG4gICAgICAgICAgICAgICAgICAgIC5nZXRDb2xvcigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsaWdodFBvd2VyID0gdGhpcy5nZXRMaWdodFBvd2VyKGludGVyc2VjdCwgbGlnaHQpO1xuXG4gICAgICAgICAgICBsYW1iQ29sb3IgPSBDb2xvci5ibGFjaztcbiAgICAgICAgICAgIHBob25nQ29sb3IgPSBDb2xvci5ibGFjaztcbiAgICAgICAgICAgIHJhZGlhbmNlQ29sb3IgPSBDb2xvci5ibGFjaztcblxuICAgICAgICAgICAgbGlnaHREaXJlY3Rpb24gPSBWZWN0b3Iubm9ybWFsaXplKFxuICAgICAgICAgICAgICAgIFZlY3Rvci5zdWJzdHJhY3QoXG4gICAgICAgICAgICAgICAgICAgIGludGVyc2VjdC5nZXRIaXRQb2ludCgpLFxuICAgICAgICAgICAgICAgICAgICBsaWdodC5nZXRQb3NpdGlvbigpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgLy9naVxuICAgICAgICAgICAgaWYgKHJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5naVNhbXBsZXM7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmFkaWFuY2VJblJhbmRvbURpcmVjdGlvbjogQ29sb3I7XG5cbiAgICAgICAgICAgICAgICAgICAgcmFkaWFuY2VSYW5kb21EaXJlY3Rpb24gPSB0aGlzLmNvc2luZVNhbXBsZUhlbWlzcGhlcmUoXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3QuZ2V0T3duZXIoKS5nZXROb3JtYWwoaW50ZXJzZWN0LmdldEhpdFBvaW50KCkpXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmFkaWFuY2VJblJhbmRvbURpcmVjdGlvbiA9IHRoaXMuZ2V0Q29sb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgUmF5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdC5nZXRIaXRQb2ludCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGlhbmNlUmFuZG9tRGlyZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICByYWRpYW5jZUNvbG9yID0gcmFkaWFuY2VDb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZChyYWRpYW5jZUluUmFuZG9tRGlyZWN0aW9uKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmFkaWFuY2VDb2xvciA9IHJhZGlhbmNlQ29sb3IuZGl2aWRlKHRoaXMuZ2lTYW1wbGVzKTtcblxuICAgICAgICAgICAgLy8gbGFtYmVydFxuXG4gICAgICAgICAgICBsYW1iQ29zID0gLVZlY3Rvci5kb3QoXG4gICAgICAgICAgICAgICAgbGlnaHREaXJlY3Rpb24sXG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0LmdldE5vcm1hbCgpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBsYW1iQ29sb3IgPSBsYW1iQ29sb3IuYWRkKFxuICAgICAgICAgICAgICAgIGludGVyc2VjdFxuICAgICAgICAgICAgICAgICAgICAuZ2V0T3duZXIoKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0TWF0ZXJpYWwoKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0Q29sb3IoKVxuICAgICAgICAgICAgICAgICAgICAuYWRkKHJhZGlhbmNlQ29sb3IpXG4gICAgICAgICAgICAgICAgICAgIC5tdWx0aXBsZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0LmdldE1hdGVyaWFsKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0Q29sb3IoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zY2FsZWQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0UG93ZXIgKiBsYW1iQ29zICogaW50ZXJzZWN0LmdldE93bmVyKCkuZ2V0TWF0ZXJpYWwoKS5nZXRMYW1iZXJ0Q29lZmYoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgLy8gcGhvbmdcblxuICAgICAgICAgICAgcmVmbGVjdFBob25nVmVjdG9yRGlyID0gVmVjdG9yLnJlZmxlY3QoXG4gICAgICAgICAgICAgICAgbGlnaHREaXJlY3Rpb24sXG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0LmdldE5vcm1hbCgpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcGhvbmdDb3MgPSAtVmVjdG9yLmRvdChyZWZsZWN0UGhvbmdWZWN0b3JEaXIsIHJheS5nZXREaXJlY3Rpb24oKSk7XG5cbiAgICAgICAgICAgIGlmIChwaG9uZ0NvcyA+IDApIHtcbiAgICAgICAgICAgICAgICBwaG9uZyA9IE1hdGgucG93KHBob25nQ29zLCAzNSk7XG4gICAgICAgICAgICAgICAgcGhvbmdDb2xvciA9IHBob25nQ29sb3IuYWRkKFxuICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3QuZ2V0T3duZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldE1hdGVyaWFsKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRDb2xvcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAubXVsdGlwbGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHQuZ2V0TWF0ZXJpYWwoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0Q29sb3IoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2NhbGVkKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHRQb3dlciAqIHBob25nICogaW50ZXJzZWN0LmdldE93bmVyKCkuZ2V0TWF0ZXJpYWwoKS5nZXRQaG9uZ0NvZWZmKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vYW1iaWVudCBvY2NsdXNpb25cbiAgICAgICAgICAgIGxldCBjID0gMDtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmFvU2FtcGxlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGRpciA9IHRoaXMuY29zaW5lU2FtcGxlSGVtaXNwaGVyZShpbnRlcnNlY3QuZ2V0T3duZXIoKS5nZXROb3JtYWwoaW50ZXJzZWN0LmdldEhpdFBvaW50KCkpKTtcblxuICAgICAgICAgICAgICAgIGxldCBhb0ludGVyc2VjdCA9IHRoaXMudHJhY2UoXG4gICAgICAgICAgICAgICAgICAgIG5ldyBSYXkoXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3QuZ2V0SGl0UG9pbnQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpclxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGlmICghYW9JbnRlcnNlY3QuZ2V0SW50ZXJzZWN0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGFvSW50ZXJzZWN0LmdldERpc3RhbmNlRnJvbU9yaWdpbigpID4gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGMrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGl4ZWxDb2xvciA9IHBpeGVsQ29sb3IuYWRkKFxuICAgICAgICAgICAgICAgIGxhbWJDb2xvci5tdWx0aXBsZShDb2xvci53aGl0ZS5zY2FsZWQoMSAtIChjICogMC42NyAvIHRoaXMuYW9TYW1wbGVzKSkpLmFkZChwaG9uZ0NvbG9yKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwaXhlbENvbG9yO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UmVmbGVjdGlvbkNvbG9yIChyYXk6IFJheSwgaW50ZXJzZWN0OiBhbnkpOiBhbnkge1xuICAgICAgICBsZXQgcmF5SXRlcmF0aW9uOiBudW1iZXIgPSByYXkuZ2V0SXRlcmF0aW9uKCksXG4gICAgICAgICAgICByZWZsZWN0aW9uQ29sb3I6IENvbG9yLFxuICAgICAgICAgICAgcmVmbGVjdGlvblZhbHVlOiBudW1iZXIgPSBpbnRlcnNlY3QuZ2V0T3duZXIoKS5nZXRNYXRlcmlhbCgpLmdldFJlZmxlY3Rpb25WYWx1ZSgpLFxuICAgICAgICAgICAgcmVmbGVjdGVkUmF5OiBWZWN0b3I7XG5cbiAgICAgICAgcmF5LnNldEl0ZXJhdGlvbigtLXJheUl0ZXJhdGlvbik7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgcmF5SXRlcmF0aW9uID09PSAwIHx8XG4gICAgICAgICAgICByZWZsZWN0aW9uVmFsdWUgPT09IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gQ29sb3IuYmxhY2s7XG4gICAgICAgIH1cblxuICAgICAgICByZWZsZWN0ZWRSYXkgPSBWZWN0b3IucmVmbGVjdChcbiAgICAgICAgICAgIHJheS5nZXREaXJlY3Rpb24oKSxcbiAgICAgICAgICAgIGludGVyc2VjdC5nZXROb3JtYWwoKVxuICAgICAgICApO1xuXG4gICAgICAgIHJlZmxlY3Rpb25Db2xvciA9IHRoaXMuZ2V0Q29sb3IoXG4gICAgICAgICAgICBuZXcgUmF5KGludGVyc2VjdC5nZXRIaXRQb2ludCgpLCByZWZsZWN0ZWRSYXksIHJheUl0ZXJhdGlvbilcbiAgICAgICAgKS5zY2FsZWQocmVmbGVjdGlvblZhbHVlKTtcblxuICAgICAgICByZXR1cm4gcmVmbGVjdGlvbkNvbG9yO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UGVyc3BlY3RpdmVWZWN0b3IgKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgICAgIGxldCBjYW1lcmE6IENhbWVyYSA9IHRoaXMuc2NlbmUuZ2V0Q2FtZXJhKCk7XG5cbiAgICAgICAgcmV0dXJuIFZlY3Rvci5ub3JtYWxpemUoXG4gICAgICAgICAgICBWZWN0b3IuYWRkKFxuICAgICAgICAgICAgICAgIGNhbWVyYS5nZXRGb3J3YXJkVmVjdG9yKCksXG4gICAgICAgICAgICAgICAgVmVjdG9yLmFkZChcbiAgICAgICAgICAgICAgICAgICAgVmVjdG9yLnNjYWxlKFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FtZXJhLmdldFJpZ2h0VmVjdG9yKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW1lcmEucmVjZW50ZXJYKHgpXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFZlY3Rvci5zY2FsZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbWVyYS5nZXRVcFZlY3RvcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FtZXJhLnJlY2VudGVyWSh5KVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0TGlnaHRQb3dlciAoaW50ZXJzZWN0OiBhbnksIGxpZ2h0OiBBYnN0cmFjdExpZ2h0KTogbnVtYmVyIHtcbiAgICAgICAgbGV0IGxpZ2h0UG93ZXIgPSBsaWdodC5nZXRQb3dlcigpLFxuICAgICAgICAgICAgbGlnaHRSYW5kb21Qb2ludDogVmVjdG9yLFxuICAgICAgICAgICAgc2hhZG93UmF5OiBJbnRlcnNlY3RQb2ludCxcbiAgICAgICAgICAgIHJlc3VsdFBvd2VyOiBudW1iZXIgPSAwO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zaGFkb3dTYW1wbGVzOyBpKyspIHtcbiAgICAgICAgICAgIGxpZ2h0UmFuZG9tUG9pbnQgPSBsaWdodC5nZXRSYW5kb21Qb2ludCgpO1xuXG4gICAgICAgICAgICBzaGFkb3dSYXkgPSB0aGlzLnRyYWNlKFxuICAgICAgICAgICAgICAgIG5ldyBSYXkoXG4gICAgICAgICAgICAgICAgICAgIGludGVyc2VjdC5nZXRIaXRQb2ludCgpLFxuICAgICAgICAgICAgICAgICAgICBWZWN0b3Iuc3Vic3RyYWN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgVmVjdG9yLnN1YnN0cmFjdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWdodC5nZXRQb3NpdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0UmFuZG9tUG9pbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3QuZ2V0SGl0UG9pbnQoKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKCFzaGFkb3dSYXkuZ2V0SW50ZXJzZWN0KCkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEoc2hhZG93UmF5LmdldE93bmVyKCkgaW5zdGFuY2VvZiBBYnN0cmFjdExpZ2h0KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXN1bHRQb3dlciArPSAoXG4gICAgICAgICAgICAgICAgbGlnaHRQb3dlciAtXG4gICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICBWZWN0b3Iuc3Vic3RyYWN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgVmVjdG9yLnN1YnN0cmFjdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWdodC5nZXRQb3NpdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0UmFuZG9tUG9pbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3QuZ2V0SGl0UG9pbnQoKVxuICAgICAgICAgICAgICAgICAgICApLmdldExlbmd0aCgpICogKGxpZ2h0UG93ZXIgLyBsaWdodC5nZXRGYWRlUmFkaXVzKCkpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSAvIHRoaXMuc2hhZG93U2FtcGxlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHRQb3dlcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIHRyYWNlIChyYXk6IFJheSk6IEludGVyc2VjdFBvaW50IHtcbiAgICAgICAgbGV0IGludGVyc2VjdGlvbiA9IG5ldyBJbnRlcnNlY3RQb2ludCgpLFxuICAgICAgICAgICAgaW50ZXJzZWN0RGF0YTogYW55LFxuICAgICAgICAgICAgbWluRGlzdGFuY2U6IG51bWJlciA9IEluZmluaXR5LFxuICAgICAgICAgICAgc2NlbmVPYmplY3RzOiBBYnN0cmFjdE9iamVjdFtdJkFic3RyYWN0TGlnaHRbXSA9IHRoaXMuc2NlbmUuZ2V0T2JqZWN0cygpLmNvbmNhdCh0aGlzLnNjZW5lLmdldExpZ2h0cygpKTtcblxuICAgICAgICBmb3IgKGxldCBvYmplY3Qgb2Ygc2NlbmVPYmplY3RzKSB7XG4gICAgICAgICAgICBpbnRlcnNlY3REYXRhID0gb2JqZWN0LmdldEludGVyc2VjdERhdGEocmF5KTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGludGVyc2VjdERhdGEgJiZcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3REYXRhWydkaXN0YW5jZSddIDwgbWluRGlzdGFuY2VcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIG1pbkRpc3RhbmNlID0gaW50ZXJzZWN0RGF0YVsnZGlzdGFuY2UnXTtcblxuICAgICAgICAgICAgICAgIGludGVyc2VjdGlvbi5zZXRJbnRlcnNlY3QoKTtcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb24uc2V0SGl0UG9pbnQoaW50ZXJzZWN0RGF0YVsnaGl0UG9pbnQnXSk7XG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uLnNldE5vcm1hbChpbnRlcnNlY3REYXRhWydub3JtYWwnXSk7XG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uLnNldERpc3RhbmNlRnJvbU9yaWdpbihpbnRlcnNlY3REYXRhWydkaXN0YW5jZSddKTtcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb24uc2V0T3duZXIob2JqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb247XG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlciAoc2NyZWVuV2lkdGg6IG51bWJlciwgc2NyZWVuSGVpZ2h0OiBudW1iZXIsIHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHJhbmRvTXVsdGlwbGllciA9IDAuNTtcblxuICAgICAgICBsZXQgY29sb3I6IENvbG9yID0gQ29sb3IuYmxhY2ssXG4gICAgICAgICAgICByYW5kOiBudW1iZXIsXG4gICAgICAgICAgICByYXk6IFJheSxcbiAgICAgICAgICAgIHJnYkNvbG9yOiB7XG4gICAgICAgICAgICAgICAgcmVkOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgZ3JlZW46IG51bWJlcixcbiAgICAgICAgICAgICAgICBibHVlOiBudW1iZXJcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5zY3JlZW5XaWR0aCA9IHNjcmVlbldpZHRoO1xuICAgICAgICB0aGlzLnNjcmVlbkhlaWdodCA9IHNjcmVlbkhlaWdodDtcblxuICAgICAgICBmb3IgKGxldCBzYW1wbGUgPSAwOyBzYW1wbGUgPCB0aGlzLnBpeGVsU2FtcGxlczsgc2FtcGxlKyspIHtcbiAgICAgICAgICAgIHJhbmQgPSAwO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5waXhlbFNhbXBsZXMgPiAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNhbXBsZSAlIDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZCArPSBNYXRoLnJhbmRvbSgpICogcmFuZG9NdWx0aXBsaWVyO1xuICAgICAgICAgICAgICAgIH0gIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByYW5kIC09IE1hdGgucmFuZG9tKCkgKiByYW5kb011bHRpcGxpZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByYXkgPSBuZXcgUmF5KFxuICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUuZ2V0Q2FtZXJhKCkuZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgICAgICAgICB0aGlzLmdldFBlcnNwZWN0aXZlVmVjdG9yKHggKyByYW5kLCB5ICsgcmFuZClcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbG9yID0gY29sb3IuYWRkKHRoaXMuZ2V0Q29sb3IocmF5KSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb2xvciA9IGNvbG9yLmRpdmlkZSh0aGlzLnBpeGVsU2FtcGxlcyk7XG5cbiAgICAgICAgZm9yIChsZXQgY29tcG9uZW50IGluIGNvbG9yKSB7XG4gICAgICAgICAgICBjb2xvcltjb21wb25lbnRdID0gQ29sb3Iuc1JHQkVuY29kZShjb2xvcltjb21wb25lbnRdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJnYkNvbG9yID0gQ29sb3IudG9SR0IoY29sb3IpO1xuXG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2UoW3gsIHksIHJnYkNvbG9yLnJlZCwgcmdiQ29sb3IuZ3JlZW4sIHJnYkNvbG9yLmJsdWVdKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0U2NlbmUgKHNjZW5lOiBTY2VuZSk6IHZvaWQge1xuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgfVxufVxuXG5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIHZhciBkYXRhID0gbWVzc2FnZS5kYXRhO1xuXG4gICAgaWYgKHR5cGVvZihkYXRhKSA9PSAnc3RyaW5nJykge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZSgnWycrZGF0YSsnXScpO1xuICAgIH1cblxuICAgIGxldCB0cmFjZXIgPSBuZXcgVHJhY2VyKCk7XG5cbiAgICB0cmFjZXIuc2V0U2NlbmUoXG4gICAgICAgIG5ldyBTY2VuZSh7XG4gICAgICAgICAgICBjYW1lcmE6IG5ldyBDYW1lcmEoXG4gICAgICAgICAgICAgICAgbmV3IFZlY3RvcigwLCAwLCAtNjk5KSxcbiAgICAgICAgICAgICAgICBuZXcgVmVjdG9yKDAsIDAsIDEpLFxuICAgICAgICAgICAgICAgIGRhdGFbMF0sXG4gICAgICAgICAgICAgICAgZGF0YVsxXVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGxpZ2h0czogW1xuICAgICAgICAgICAgICAgIG5ldyBTcGhlcmljYWxMaWdodChuZXcgVmVjdG9yICgwLCA2MDAsIDApLCAwLjYsIDEwMClcbiAgICAgICAgICAgICAgICAgICAgLnNldE1hdGVyaWFsKG5ldyBNYXRlcmlhbChDb2xvci53aGl0ZSkpLFxuICAgICAgICAgICAgICAgIG5ldyBTcGhlcmljYWxMaWdodChuZXcgVmVjdG9yICgwLCAwLCAwKSwgMC42LCAxNTApXG4gICAgICAgICAgICAgICAgICAgIC5zZXRNYXRlcmlhbChuZXcgTWF0ZXJpYWwobmV3IENvbG9yKG5ldyBSR0JDb2xvcigyNTUsIDIzNSwgMjAwKSkpKVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIG9iamVjdHM6IFtcbiAgICAgICAgICAgICAgICAvLyBuZXcgUGxhbmUobmV3IFZlY3RvcigwLCAxLCAwKSwgbmV3IFZlY3RvciAoMCwgLTQwMCwgMCkpLnNldE1hdGVyaWFsKG5ldyBNYXRlcmlhbChDb2xvci5ncmF5LCAwKSksXG4gICAgICAgICAgICAgICAgLy8gYm90dG9tIHBsYW5lXG4gICAgICAgICAgICAgICAgbmV3IFBvbHlnb24oXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoLTcwMCwgLTcwMCwgLTcwMCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoNzAwLCAtNzAwLCAtNzAwKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3Rvcig3MDAsIC03MDAsIDcwMCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoLTcwMCwgLTcwMCwgNzAwKVxuICAgICAgICAgICAgICAgICkuc2V0TWF0ZXJpYWwobmV3IE1hdGVyaWFsKENvbG9yLndoaXRlLCAwKS5zZXRMYW1iZXJ0Q29lZmYoMSkpLFxuICAgICAgICAgICAgICAgIC8vIGZyb250IHBsYW5lXG4gICAgICAgICAgICAgICAgbmV3IFBvbHlnb24oXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoLTcwMCwgLTcwMCwgNzAwKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3Rvcig3MDAsIC03MDAsIDcwMCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoNzAwLCA3MDAsIDcwMCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoLTcwMCwgNzAwLCA3MDApXG4gICAgICAgICAgICAgICAgKS5zZXRNYXRlcmlhbChuZXcgTWF0ZXJpYWwoQ29sb3Iud2hpdGUsIDApLnNldExhbWJlcnRDb2VmZigxKSksXG4gICAgICAgICAgICAgICAgLy8gdG9wIHBsYW5lXG4gICAgICAgICAgICAgICAgbmV3IFBvbHlnb24oXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoLTcwMCwgNzAwLCA3MDApLFxuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yKDcwMCwgNzAwLCA3MDApLFxuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yKDcwMCwgNzAwLCAtNzAwKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcigtNzAwLCA3MDAsIC03MDApXG4gICAgICAgICAgICAgICAgKS5zZXRNYXRlcmlhbChuZXcgTWF0ZXJpYWwoQ29sb3Iud2hpdGUsIDApLnNldExhbWJlcnRDb2VmZigxKSksXG4gICAgICAgICAgICAgICAgLy9yaWdodCBwbGFuZVxuICAgICAgICAgICAgICAgIG5ldyBQb2x5Z29uKFxuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yKDcwMCwgLTcwMCwgNzAwKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3Rvcig3MDAsIC03MDAsIC03MDApLFxuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yKDcwMCwgNzAwLCAtNzAwKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3Rvcig3MDAsIDcwMCwgNzAwKVxuICAgICAgICAgICAgICAgICkuc2V0TWF0ZXJpYWwobmV3IE1hdGVyaWFsKENvbG9yLmJsdWUpLnNldExhbWJlcnRDb2VmZigxKSksXG4gICAgICAgICAgICAgICAgLy9sZWZ0IHBsYW5lXG4gICAgICAgICAgICAgICAgbmV3IFBvbHlnb24oXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoLTcwMCwgLTcwMCwgLTcwMCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoLTcwMCwgLTcwMCwgNzAwKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcigtNzAwLCA3MDAsIDcwMCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoLTcwMCwgNzAwLCAtNzAwKVxuICAgICAgICAgICAgICAgICkuc2V0TWF0ZXJpYWwobmV3IE1hdGVyaWFsKENvbG9yLnJlZCwgMCkuc2V0TGFtYmVydENvZWZmKDEpKSxcbiAgICAgICAgICAgICAgICAvLyBiYWNrIHBsYW5lXG4gICAgICAgICAgICAgICAgbmV3IFBvbHlnb24oXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoNzAwLCAtNzAwLCAtNzAwKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcigtNzAwLCAtNzAwLCAtNzAwKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcigtNzAwLCA3MDAsIC03MDApLFxuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yKDcwMCwgNzAwLCAtNzAwKVxuICAgICAgICAgICAgICAgICkuc2V0TWF0ZXJpYWwobmV3IE1hdGVyaWFsKENvbG9yLmJsYWNrLCAwKS5zZXRMYW1iZXJ0Q29lZmYoMSkpLFxuICAgICAgICAgICAgICAgIG5ldyBTcGhlcmUobmV3IFZlY3RvcigtMjUwLCAtNTAwLCA0NTApLCAyMDApXG4gICAgICAgICAgICAgICAgICAgIC5zZXRNYXRlcmlhbChuZXcgTWF0ZXJpYWwoQ29sb3IuYmxhY2ssIDEpKSxcbiAgICAgICAgICAgICAgICBuZXcgU3BoZXJlKG5ldyBWZWN0b3IoMjUwLCAtNTAwLCA0MDApLCAyMDApXG4gICAgICAgICAgICAgICAgICAgIC5zZXRNYXRlcmlhbChuZXcgTWF0ZXJpYWwoQ29sb3IuZ3JlZW4sIDApKVxuICAgICAgICAgICAgXVxuICAgICAgICB9KVxuICAgICk7XG5cbiAgICB0cmFjZXIucmVuZGVyKGRhdGFbMF0sIGRhdGFbMV0sIGRhdGFbMl0sIGRhdGFbM10pO1xufTsiLCJleHBvcnQgY2xhc3MgVmVjdG9yIHtcbiAgICBwcml2YXRlIHg6IG51bWJlcjtcbiAgICBwcml2YXRlIHk6IG51bWJlcjtcbiAgICBwcml2YXRlIHo6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yICh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIHRoaXMueiA9IHo7XG4gICAgfVxuXG4gICAgZ2V0Q29vcmRpbmF0ZXMgKCk6IHt4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyfSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB0aGlzLngsXG4gICAgICAgICAgICB5OiB0aGlzLnksXG4gICAgICAgICAgICB6OiB0aGlzLnpcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXNBcnJheSAoKTogbnVtYmVyW10ge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgdGhpcy54LFxuICAgICAgICAgICAgdGhpcy55LFxuICAgICAgICAgICAgdGhpcy56XG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgcHVibGljIGdldExlbmd0aCAoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiogMiArIHRoaXMueSAqKiAyICsgdGhpcy56ICoqIDIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgc2NhbGUgKHZlY3RvcjogVmVjdG9yLCBtdWx0aXBsaWVyOiBudW1iZXIpOiBWZWN0b3Ige1xuICAgICAgICByZXR1cm4gbmV3IFZlY3Rvcih2ZWN0b3IueCAqIG11bHRpcGxpZXIsIHZlY3Rvci55ICogbXVsdGlwbGllciwgdmVjdG9yLnogKiBtdWx0aXBsaWVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGFkZCAodmVjdG9yMTogVmVjdG9yLCB2ZWN0b3IyOiBWZWN0b3IpOiBWZWN0b3Ige1xuICAgICAgICByZXR1cm4gbmV3IFZlY3Rvcih2ZWN0b3IxLnggKyB2ZWN0b3IyLngsIHZlY3RvcjEueSArIHZlY3RvcjIueSwgdmVjdG9yMS56ICsgdmVjdG9yMi56KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHN1YnN0cmFjdCAodmVjdG9yMTogVmVjdG9yLCB2ZWN0b3IyOiBWZWN0b3IpOiBWZWN0b3Ige1xuICAgICAgICByZXR1cm4gbmV3IFZlY3Rvcih2ZWN0b3IxLnggLSB2ZWN0b3IyLngsIHZlY3RvcjEueSAtIHZlY3RvcjIueSwgdmVjdG9yMS56IC0gdmVjdG9yMi56KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGRvdCAodmVjdG9yMTogVmVjdG9yLCB2ZWN0b3IyOiBWZWN0b3IpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdmVjdG9yMS54ICogdmVjdG9yMi54ICsgdmVjdG9yMS55ICogdmVjdG9yMi55ICsgdmVjdG9yMS56ICogdmVjdG9yMi56O1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgY3Jvc3MgKHZlY3RvcjE6IFZlY3RvciwgdmVjdG9yMjogVmVjdG9yKTogVmVjdG9yIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IoXG4gICAgICAgICAgICB2ZWN0b3IxLnkgKiB2ZWN0b3IyLnogLSB2ZWN0b3IxLnogKiB2ZWN0b3IyLnksXG4gICAgICAgICAgICB2ZWN0b3IxLnogKiB2ZWN0b3IyLnggLSB2ZWN0b3IxLnggKiB2ZWN0b3IyLnosXG4gICAgICAgICAgICB2ZWN0b3IxLnggKiB2ZWN0b3IyLnkgLSB2ZWN0b3IxLnkgKiB2ZWN0b3IyLnhcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIG5vcm1hbGl6ZSAodmVjdG9yOiBWZWN0b3IpOiBWZWN0b3Ige1xuICAgICAgICByZXR1cm4gVmVjdG9yLnNjYWxlKHZlY3RvciwgMSAvIHZlY3Rvci5nZXRMZW5ndGgoKSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBwb3cgKHZlY3RvcjogVmVjdG9yLCB2YWx1ZTogbnVtYmVyKTogVmVjdG9yIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IoXG4gICAgICAgICAgICB2ZWN0b3IueSAqKiB2YWx1ZSxcbiAgICAgICAgICAgIHZlY3Rvci56ICoqIHZhbHVlLFxuICAgICAgICAgICAgdmVjdG9yLnggKiogdmFsdWVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGludmVyc2UgKHZlY3RvcjogVmVjdG9yKTogVmVjdG9yIHtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5zY2FsZSh2ZWN0b3IsIC0xKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHJlZmxlY3QgKHZlY3RvcjogVmVjdG9yLCBub3JtYWw6IFZlY3Rvcik6IFZlY3RvciB7XG4gICAgICAgIGxldCBmID0gMiAqIFZlY3Rvci5kb3QodmVjdG9yLCBub3JtYWwpO1xuXG4gICAgICAgIHJldHVybiBWZWN0b3Iuc3Vic3RyYWN0KFxuICAgICAgICAgICAgdmVjdG9yLFxuICAgICAgICAgICAgVmVjdG9yLnNjYWxlKG5vcm1hbCwgZilcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=
