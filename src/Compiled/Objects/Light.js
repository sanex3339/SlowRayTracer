var Vector_1=require("./../Vector"),RTMath_1=require("./../RTMath"),Light=function(){function t(t,r){this.radius=25,this.type="light",this.position=t,this.power=r}return t.prototype.getPosition=function(){return this.position},t.prototype.getPower=function(){return this.power},t.prototype.getIntersectData=function(t){var r,e,o,i,c,n,s,a=Vector_1.Vector.substract(t.getOrigin(),this.position),h=Vector_1.Vector.dot(a,t.getDirection()),p=Vector_1.Vector.dot(a,a)-Math.pow(this.radius,2),u=Math.pow(h,2)-p;if(!(h>0||0>u||u>=0&&(r=-h+Math.sqrt(u),e=-h-Math.sqrt(u),o=Math.min(r,e),i=Math.max(r,e),c=o>RTMath_1.RTMath.EPSILON?o:i,c<RTMath_1.RTMath.EPSILON)))return n=Vector_1.Vector.add(Vector_1.Vector.scaled(t.getDirection(),c),t.getOrigin()),s=Vector_1.Vector.substract(n,t.getOrigin()).getLength(),{point:n,distance:s}},t.prototype.getNormal=function(t){return Vector_1.Vector.normalized(Vector_1.Vector.scaled(Vector_1.Vector.substract(t,this.position),1/this.radius))},t.prototype.getType=function(){return this.type},t}();exports.Light=Light;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk9iamVjdHMvTGlnaHQudHMiXSwibmFtZXMiOlsiVmVjdG9yXzEiLCJyZXF1aXJlIiwiUlRNYXRoXzEiLCJMaWdodCIsIkxpZ2h0LmNvbnN0cnVjdG9yIiwiTGlnaHQuZ2V0UG9zaXRpb24iLCJMaWdodC5nZXRQb3dlciIsIkxpZ2h0LmdldEludGVyc2VjdERhdGEiLCJMaWdodC5nZXROb3JtYWwiLCJMaWdodC5nZXRUeXBlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsR0FBQUEsVUFBQUMsUUFBdUIsZUFFdkJDLFNBQUFELFFBQXVCLGVBRXZCRSxNQUFBLFdBTUlBLFFBQUFBLEdBQWFBLEVBQWtCQSxHQUp2QkMsS0FBQUEsT0FBaUJBLEdBRWpCQSxLQUFBQSxLQUFlQSxRQUduQkEsS0FBS0EsU0FBV0EsRUFDaEJBLEtBQUtBLE1BQVFBLEVBd0VyQkQsTUFyRUlBLEdBQUFBLFVBQUFBLFlBQUFBLFdBQ0lFLE1BQU9BLE1BQUtBLFVBR2hCRixFQUFBQSxVQUFBQSxTQUFBQSxXQUNJRyxNQUFPQSxNQUFLQSxPQUdUSCxFQUFBQSxVQUFBQSxpQkFBUEEsU0FBeUJBLEdBQ3JCSSxHQUlJQSxHQUNBQSxFQUNBQSxFQUNBQSxFQUNBQSxFQUNBQSxFQUNBQSxFQVZBQSxFQUFJQSxTQUFBQSxPQUFPQSxVQUFVQSxFQUFJQSxZQUFhQSxLQUFLQSxVQUMzQ0EsRUFBWUEsU0FBQUEsT0FBT0EsSUFBSUEsRUFBR0EsRUFBSUEsZ0JBQzlCQSxFQUFZQSxTQUFBQSxPQUFPQSxJQUFJQSxFQUFHQSxHQUFLQSxLQUFBQSxJQUFBQSxLQUFLQSxPQUFVQSxHQUM5Q0EsRUFBWUEsS0FBQUEsSUFBQUEsRUFBS0EsR0FBSUEsQ0FTekJBLE1BQUlBLEVBQUlBLEdBQVNBLEVBQUpBLEdBSVRBLEdBQUtBLElBQ0xBLEdBQU1BLEVBQUlBLEtBQUtBLEtBQUtBLEdBQ3BCQSxHQUFNQSxFQUFJQSxLQUFLQSxLQUFLQSxHQUNwQkEsRUFBT0EsS0FBS0EsSUFBSUEsRUFBSUEsR0FDcEJBLEVBQU9BLEtBQUtBLElBQUlBLEVBQUlBLEdBR2hCQSxFQURBQSxFQUFPQSxTQUFBQSxPQUFPQSxRQUNNQSxFQUVBQSxFQUdwQkEsRUFBb0JBLFNBQUFBLE9BQU9BLFVBY25DQSxNQVRBQSxHQUFRQSxTQUFBQSxPQUFPQSxJQUNYQSxTQUFBQSxPQUFPQSxPQUFPQSxFQUFJQSxlQUFnQkEsR0FDbENBLEVBQUlBLGFBRVJBLEVBQVdBLFNBQUFBLE9BQU9BLFVBQ2RBLEVBQ0FBLEVBQUlBLGFBQ05BLGFBR0VBLE1BQUFBLEVBQ0FBLFNBQUFBLElBSURKLEVBQUFBLFVBQUFBLFVBQVBBLFNBQWtCQSxHQUNkSyxNQUFPQSxVQUFBQSxPQUFPQSxXQUNWQSxTQUFBQSxPQUFPQSxPQUNIQSxTQUFBQSxPQUFPQSxVQUFVQSxFQUFPQSxLQUFLQSxVQUM3QkEsRUFBSUEsS0FBS0EsVUFLZEwsRUFBQUEsVUFBQUEsUUFBUEEsV0FDSU0sTUFBT0EsTUFBS0EsTUFFcEJOLElBaEZhTyxTQUFBUCxNQUFLQSIsImZpbGUiOiJPYmplY3RzL0xpZ2h0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSBcIi4vLi4vVmVjdG9yXCI7XG5pbXBvcnQgeyBSYXkgfSBmcm9tIFwiLi8uLi9SYXlcIjtcbmltcG9ydCB7IFJUTWF0aCB9IGZyb20gXCIuLy4uL1JUTWF0aFwiXG5cbmV4cG9ydCBjbGFzcyBMaWdodCB7XG4gICAgcHJpdmF0ZSBwb3NpdGlvbjogVmVjdG9yO1xuICAgIHByaXZhdGUgcmFkaXVzOiBudW1iZXIgPSAyNTtcbiAgICBwcml2YXRlIHBvd2VyOiBudW1iZXI7XG4gICAgcHJpdmF0ZSB0eXBlOiBzdHJpbmcgPSAnbGlnaHQnO1xuXG4gICAgY29uc3RydWN0b3IgKHBvc2l0aW9uOiBWZWN0b3IsIHBvd2VyOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgICAgICB0aGlzLnBvd2VyID0gcG93ZXI7XG4gICAgfVxuXG4gICAgZ2V0UG9zaXRpb24gKCk6IFZlY3RvciB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uO1xuICAgIH1cblxuICAgIGdldFBvd2VyICgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3dlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0SW50ZXJzZWN0RGF0YSAocmF5OiBSYXkpOiBhbnkge1xuICAgICAgICBsZXQgayA9IFZlY3Rvci5zdWJzdHJhY3QocmF5LmdldE9yaWdpbigpLCB0aGlzLnBvc2l0aW9uKSxcbiAgICAgICAgICAgIGI6IG51bWJlciA9IFZlY3Rvci5kb3QoaywgcmF5LmdldERpcmVjdGlvbigpKSxcbiAgICAgICAgICAgIGM6IG51bWJlciA9IFZlY3Rvci5kb3QoaywgaykgLSB0aGlzLnJhZGl1cyAqKiAyLFxuICAgICAgICAgICAgZDogbnVtYmVyID0gYiAqKiAyIC0gYyxcbiAgICAgICAgICAgIHQxOiBudW1iZXIsXG4gICAgICAgICAgICB0MjogbnVtYmVyLFxuICAgICAgICAgICAgbWluVDogbnVtYmVyLFxuICAgICAgICAgICAgbWF4VDogbnVtYmVyLFxuICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnQ6IG51bWJlcixcbiAgICAgICAgICAgIHBvaW50OiBWZWN0b3IsXG4gICAgICAgICAgICBkaXN0YW5jZTogbnVtYmVyO1xuXG4gICAgICAgIGlmIChiID4gMCB8fCBkIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGQgPj0gMCkge1xuICAgICAgICAgICAgdDEgPSAtYiArIE1hdGguc3FydChkKTtcbiAgICAgICAgICAgIHQyID0gLWIgLSBNYXRoLnNxcnQoZCk7XG4gICAgICAgICAgICBtaW5UID0gTWF0aC5taW4odDEsIHQyKTtcbiAgICAgICAgICAgIG1heFQgPSBNYXRoLm1heCh0MSwgdDIpO1xuXG4gICAgICAgICAgICBpZiAobWluVCA+IFJUTWF0aC5FUFNJTE9OKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnQgPSBtaW5UO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25Qb2ludCA9IG1heFQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludCA8IFJUTWF0aC5FUFNJTE9OKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcG9pbnQgPSBWZWN0b3IuYWRkKFxuICAgICAgICAgICAgVmVjdG9yLnNjYWxlZChyYXkuZ2V0RGlyZWN0aW9uKCksIGludGVyc2VjdGlvblBvaW50KSxcbiAgICAgICAgICAgIHJheS5nZXRPcmlnaW4oKVxuICAgICAgICApO1xuICAgICAgICBkaXN0YW5jZSA9IFZlY3Rvci5zdWJzdHJhY3QoXG4gICAgICAgICAgICBwb2ludCxcbiAgICAgICAgICAgIHJheS5nZXRPcmlnaW4oKVxuICAgICAgICApLmdldExlbmd0aCgpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwb2ludCxcbiAgICAgICAgICAgIGRpc3RhbmNlXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIGdldE5vcm1hbCAocG9pbnQ6IFZlY3Rvcik6IFZlY3RvciB7XG4gICAgICAgIHJldHVybiBWZWN0b3Iubm9ybWFsaXplZChcbiAgICAgICAgICAgIFZlY3Rvci5zY2FsZWQoXG4gICAgICAgICAgICAgICAgVmVjdG9yLnN1YnN0cmFjdChwb2ludCwgdGhpcy5wb3NpdGlvbiksXG4gICAgICAgICAgICAgICAgMSAvIHRoaXMucmFkaXVzXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFR5cGUgKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGU7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
