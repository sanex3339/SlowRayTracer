var __extends=this&&this.__extends||function(t,e){function r(){this.constructor=t}for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},RTMath_1=require("../RTMath"),AbstractObject_1=require("./AbstractObject"),Color_1=require("../Color/Color"),Material_1=require("../Material"),RGBColor_1=require("../Color/RGBColor"),Vector_1=require("../Vector"),Sphere=function(t){function e(e,r){t.call(this),this.material=new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,0,0)),0),this.type="surface",this.center=e,this.radius=r}return __extends(e,t),e.prototype.getIntersectData=function(t){var e,r,o,i,a,c,n,s=Vector_1.Vector.substract(t.getOrigin(),this.center),h=Vector_1.Vector.dot(s,t.getDirection()),u=Vector_1.Vector.dot(s,s)-Math.pow(this.radius,2),l=Math.pow(h,2)-u;if(!(h>0||0>l||l>=0&&(e=-h+Math.sqrt(l),r=-h-Math.sqrt(l),o=Math.min(e,r),i=Math.max(e,r),a=o>RTMath_1.RTMath.EPSILON?o:i,a<RTMath_1.RTMath.EPSILON)))return c=Vector_1.Vector.add(Vector_1.Vector.scaled(t.getDirection(),a),t.getOrigin()),n=Vector_1.Vector.substract(c,t.getOrigin()).getLength(),{point:c,distance:n}},e.prototype.getMaterial=function(){return this.material},e.prototype.getNormal=function(t){return Vector_1.Vector.normalized(Vector_1.Vector.scaled(Vector_1.Vector.substract(t,this.center),1/this.radius))},e.prototype.getType=function(){return this.type},e.prototype.setMaterial=function(t){return this.material=t,this},e}(AbstractObject_1.AbstractObject);exports.Sphere=Sphere;
//# sourceMappingURL=data:application/json;base64,
