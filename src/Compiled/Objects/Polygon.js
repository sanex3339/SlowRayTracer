var __extends=this&&this.__extends||function(t,r){function e(){this.constructor=t}for(var o in r)r.hasOwnProperty(o)&&(t[o]=r[o]);t.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)},RTMath_1=require("../RTMath"),AbstractObject_1=require("./AbstractObject"),Color_1=require("../Color/Color"),Material_1=require("../Material"),Vector_1=require("../Vector"),Polygon=function(t){function r(){for(var r=[],e=0;e<arguments.length;e++)r[e-0]=arguments[e];t.call(this),this.material=new Material_1.Material(Color_1.Color.gray,0),this.vertices=r}return __extends(r,t),r.prototype.getIntersectData=function(t){var e,o,c,i,s,a=this.getNormal();if(o=Vector_1.Vector.dot(this.vertices[0],a),s=Vector_1.Vector.dot(a,t.getDirection()),i=-Vector_1.Vector.dot(a,t.getOrigin())+o,e=i/s,!(e<RTMath_1.RTMath.EPSILON)){c=t.getHitPoint(e);for(var n=0,h=this.vertices.length;h>n;n++){var l=this.vertices[n],u=void 0;if(u=n===h-1?this.vertices[0]:this.vertices[n+1],!r.checkSameClockDir(Vector_1.Vector.substract(u,l),Vector_1.Vector.substract(c,l),this.getNormal()))return}return{hitPoint:c,normal:a,distance:e}}},r.prototype.getMaterial=function(){return this.material},r.prototype.getNormal=function(){var t=Vector_1.Vector.substract(this.vertices[2],this.vertices[0]),r=Vector_1.Vector.substract(this.vertices[1],this.vertices[0]);return Vector_1.Vector.normalize(Vector_1.Vector.cross(t,r))},r.prototype.setMaterial=function(t){return this.material=t,this},r.checkSameClockDir=function(t,r,e){var o=Vector_1.Vector.cross(r,t);return Vector_1.Vector.dot(o,e)>=0},r}(AbstractObject_1.AbstractObject);exports.Polygon=Polygon;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk9iamVjdHMvUG9seWdvbi5qcyIsIk9iamVjdHMvUG9seWdvbi50cyJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJ0aGlzIiwiZCIsImIiLCJfXyIsImNvbnN0cnVjdG9yIiwicCIsImhhc093blByb3BlcnR5IiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiUlRNYXRoXzEiLCJyZXF1aXJlIiwiQWJzdHJhY3RPYmplY3RfMSIsIkNvbG9yXzEiLCJNYXRlcmlhbF8xIiwiVmVjdG9yXzEiLCJQb2x5Z29uIiwiX3N1cGVyIiwiUG9seWdvbi5jb25zdHJ1Y3RvciIsIlBvbHlnb24uZ2V0SW50ZXJzZWN0RGF0YSIsIlBvbHlnb24uZ2V0TWF0ZXJpYWwiLCJQb2x5Z29uLmdldE5vcm1hbCIsIlBvbHlnb24uc2V0TWF0ZXJpYWwiLCJQb2x5Z29uLmNoZWNrU2FtZUNsb2NrRGlyIiwiQWJzdHJhY3RPYmplY3QiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFJQSxXQUFhQyxNQUFRQSxLQUFLRCxXQUFjLFNBQVVFLEVBQUdDLEdBRXJELFFBQVNDLEtBQU9ILEtBQUtJLFlBQWNILEVBRG5DLElBQUssR0FBSUksS0FBS0gsR0FBT0EsRUFBRUksZUFBZUQsS0FBSUosRUFBRUksR0FBS0gsRUFBRUcsR0FFbkRKLEdBQUVNLFVBQWtCLE9BQU5MLEVBQWFNLE9BQU9DLE9BQU9QLElBQU1DLEVBQUdJLFVBQVlMLEVBQUVLLFVBQVcsR0FBSUosS0NIbkZPLFNBQUFDLFFBQXVCLGFBQ3ZCQyxpQkFBQUQsUUFBK0Isb0JBQy9CRSxRQUFBRixRQUFzQixrQkFDdEJHLFdBQUFILFFBQXlCLGVBR3pCSSxTQUFBSixRQUF1QixhQUV2QkssUUFBQSxTQUFBQyxHQUlJRCxRQUFBQSxLREVJLElDRlNFLEdBQUFBLE1BQUFBLEVBQUFBLEVBQUFBLEVBQUFBLFVBQUFBLE9BQUFBLElBQUFBLEVBQUFBLEVBQUFBLEdBQUFBLFVBQUFBLEVBQ1RBLEdBQUFBLEtBQUFBLE1BSElBLEtBQUFBLFNBQXFCQSxHQUFJQSxZQUFBQSxTQUFTQSxRQUFBQSxNQUFNQSxLQUFNQSxHQUtsREEsS0FBS0EsU0FBV0EsRUEwRXhCRixNQWpGNkJBLFdBQUFBLEVBQUFBLEdBVWxCQSxFQUFBQSxVQUFBQSxpQkFBUEEsU0FBeUJBLEdBQ3JCRyxHQUFJQSxHQUNBQSxFQUNBQSxFQUVBQSxFQUNBQSxFQUZBQSxFQUFpQkEsS0FBS0EsV0FXMUJBLElBUEFBLEVBQXlCQSxTQUFBQSxPQUFPQSxJQUFJQSxLQUFLQSxTQUFTQSxHQUFJQSxHQUV0REEsRUFBY0EsU0FBQUEsT0FBT0EsSUFBSUEsRUFBUUEsRUFBSUEsZ0JBQ3JDQSxHQUFhQSxTQUFBQSxPQUFPQSxJQUFJQSxFQUFRQSxFQUFJQSxhQUFlQSxFQUVuREEsRUFBV0EsRUFBWUEsSUFFbkJBLEVBQVdBLFNBQUFBLE9BQU9BLFNBQXRCQSxDQUlBQSxFQUFXQSxFQUFJQSxZQUFZQSxFQUUzQkEsS0FBS0EsR0FBSUEsR0FBSUEsRUFBR0EsRUFBaUJBLEtBQUtBLFNBQVNBLE9BQVlBLEVBQUpBLEVBQW9CQSxJQUFLQSxDQUM1RUEsR0FBSUEsR0FBa0JBLEtBQUtBLFNBQVNBLEdBQ2hDQSxFQUFPQSxNQVFYQSxJQUxJQSxFQURBQSxJQUFNQSxFQUFpQkEsRUFDYkEsS0FBS0EsU0FBU0EsR0FFZEEsS0FBS0EsU0FBU0EsRUFBSUEsSUFJM0JBLEVBQVFBLGtCQUNMQSxTQUFBQSxPQUFPQSxVQUFVQSxFQUFTQSxHQUMxQkEsU0FBQUEsT0FBT0EsVUFBVUEsRUFBVUEsR0FDM0JBLEtBQUtBLGFBR1RBLE9BSVJBLE9BQ0lBLFNBQVVBLEVBQ1ZBLE9BQVFBLEVBQ1JBLFNBQVVBLEtBSVhILEVBQUFBLFVBQUFBLFlBQVBBLFdBQ0lJLE1BQU9BLE1BQUtBLFVBR1RKLEVBQUFBLFVBQUFBLFVBQVBBLFdBQ0lLLEdBQUlBLEdBQWdCQSxTQUFBQSxPQUFPQSxVQUFVQSxLQUFLQSxTQUFTQSxHQUFJQSxLQUFLQSxTQUFTQSxJQUNqRUEsRUFBZ0JBLFNBQUFBLE9BQU9BLFVBQVVBLEtBQUtBLFNBQVNBLEdBQUlBLEtBQUtBLFNBQVNBLEdBRXJFQSxPQUFPQSxVQUFBQSxPQUFPQSxVQUFVQSxTQUFBQSxPQUFPQSxNQUFNQSxFQUFPQSxLQUd6Q0wsRUFBQUEsVUFBQUEsWUFBUEEsU0FBb0JBLEdBR2hCTSxNQUZBQSxNQUFLQSxTQUFXQSxFQUVUQSxNQUdJTixFQUFBQSxrQkFBZkEsU0FBa0NBLEVBQWlCQSxFQUFpQkEsR0FDaEVPLEdBQUlBLEdBQXFCQSxTQUFBQSxPQUFPQSxNQUFNQSxFQUFTQSxFQUUvQ0EsT0FBT0EsVUFBQUEsT0FBT0EsSUFBSUEsRUFBWUEsSUFBV0EsR0FFakRQLEdBakY2QkosaUJBQUFZLGVBQWhCQyxTQUFBVCxRQUFPQSIsImZpbGUiOiJPYmplY3RzL1BvbHlnb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBSVE1hdGhfMSA9IHJlcXVpcmUoXCIuLi9SVE1hdGhcIik7XG52YXIgQWJzdHJhY3RPYmplY3RfMSA9IHJlcXVpcmUoXCIuL0Fic3RyYWN0T2JqZWN0XCIpO1xudmFyIENvbG9yXzEgPSByZXF1aXJlKFwiLi4vQ29sb3IvQ29sb3JcIik7XG52YXIgTWF0ZXJpYWxfMSA9IHJlcXVpcmUoXCIuLi9NYXRlcmlhbFwiKTtcbnZhciBWZWN0b3JfMSA9IHJlcXVpcmUoXCIuLi9WZWN0b3JcIik7XG52YXIgUG9seWdvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBvbHlnb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUG9seWdvbigpIHtcbiAgICAgICAgdmFyIHZlcnRpY2VzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2ZXJ0aWNlc1tfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5tYXRlcmlhbCA9IG5ldyBNYXRlcmlhbF8xLk1hdGVyaWFsKENvbG9yXzEuQ29sb3IuZ3JheSwgMCk7XG4gICAgICAgIHRoaXMudmVydGljZXMgPSB2ZXJ0aWNlcztcbiAgICB9XG4gICAgUG9seWdvbi5wcm90b3R5cGUuZ2V0SW50ZXJzZWN0RGF0YSA9IGZ1bmN0aW9uIChyYXkpIHtcbiAgICAgICAgdmFyIGRpc3RhbmNlLCBkaXN0YW5jZUZyb21BeGlzQ2VudGVyLCBoaXRQb2ludCwgbm9ybWFsID0gdGhpcy5nZXROb3JtYWwoKSwgbnVtZXJhdG9yLCBkZW5vbWluYXRvcjtcbiAgICAgICAgZGlzdGFuY2VGcm9tQXhpc0NlbnRlciA9IFZlY3Rvcl8xLlZlY3Rvci5kb3QodGhpcy52ZXJ0aWNlc1swXSwgbm9ybWFsKTtcbiAgICAgICAgZGVub21pbmF0b3IgPSBWZWN0b3JfMS5WZWN0b3IuZG90KG5vcm1hbCwgcmF5LmdldERpcmVjdGlvbigpKTtcbiAgICAgICAgbnVtZXJhdG9yID0gLVZlY3Rvcl8xLlZlY3Rvci5kb3Qobm9ybWFsLCByYXkuZ2V0T3JpZ2luKCkpICsgZGlzdGFuY2VGcm9tQXhpc0NlbnRlcjtcbiAgICAgICAgZGlzdGFuY2UgPSBudW1lcmF0b3IgLyBkZW5vbWluYXRvcjtcbiAgICAgICAgaWYgKGRpc3RhbmNlIDwgUlRNYXRoXzEuUlRNYXRoLkVQU0lMT04pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBoaXRQb2ludCA9IHJheS5nZXRIaXRQb2ludChkaXN0YW5jZSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCB2ZXJ0aWNlc0xlbmd0aCA9IHRoaXMudmVydGljZXMubGVuZ3RoOyBpIDwgdmVydGljZXNMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHZlcnRleDEgPSB0aGlzLnZlcnRpY2VzW2ldLCB2ZXJ0ZXgyID0gdm9pZCAwO1xuICAgICAgICAgICAgaWYgKGkgPT09IHZlcnRpY2VzTGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIHZlcnRleDIgPSB0aGlzLnZlcnRpY2VzWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmVydGV4MiA9IHRoaXMudmVydGljZXNbaSArIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFQb2x5Z29uLmNoZWNrU2FtZUNsb2NrRGlyKFZlY3Rvcl8xLlZlY3Rvci5zdWJzdHJhY3QodmVydGV4MiwgdmVydGV4MSksIFZlY3Rvcl8xLlZlY3Rvci5zdWJzdHJhY3QoaGl0UG9pbnQsIHZlcnRleDEpLCB0aGlzLmdldE5vcm1hbCgpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGl0UG9pbnQ6IGhpdFBvaW50LFxuICAgICAgICAgICAgbm9ybWFsOiBub3JtYWwsXG4gICAgICAgICAgICBkaXN0YW5jZTogZGlzdGFuY2VcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIFBvbHlnb24ucHJvdG90eXBlLmdldE1hdGVyaWFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXRlcmlhbDtcbiAgICB9O1xuICAgIFBvbHlnb24ucHJvdG90eXBlLmdldE5vcm1hbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVkZ2UxID0gVmVjdG9yXzEuVmVjdG9yLnN1YnN0cmFjdCh0aGlzLnZlcnRpY2VzWzJdLCB0aGlzLnZlcnRpY2VzWzBdKSwgZWRnZTIgPSBWZWN0b3JfMS5WZWN0b3Iuc3Vic3RyYWN0KHRoaXMudmVydGljZXNbMV0sIHRoaXMudmVydGljZXNbMF0pO1xuICAgICAgICByZXR1cm4gVmVjdG9yXzEuVmVjdG9yLm5vcm1hbGl6ZShWZWN0b3JfMS5WZWN0b3IuY3Jvc3MoZWRnZTEsIGVkZ2UyKSk7XG4gICAgfTtcbiAgICBQb2x5Z29uLnByb3RvdHlwZS5zZXRNYXRlcmlhbCA9IGZ1bmN0aW9uIChtYXRlcmlhbCkge1xuICAgICAgICB0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgUG9seWdvbi5jaGVja1NhbWVDbG9ja0RpciA9IGZ1bmN0aW9uICh2ZWN0b3IxLCB2ZWN0b3IyLCBub3JtYWwpIHtcbiAgICAgICAgdmFyIG5vcm1hbFYxVjIgPSBWZWN0b3JfMS5WZWN0b3IuY3Jvc3ModmVjdG9yMiwgdmVjdG9yMSk7XG4gICAgICAgIHJldHVybiBWZWN0b3JfMS5WZWN0b3IuZG90KG5vcm1hbFYxVjIsIG5vcm1hbCkgPj0gMDtcbiAgICB9O1xuICAgIHJldHVybiBQb2x5Z29uO1xufSkoQWJzdHJhY3RPYmplY3RfMS5BYnN0cmFjdE9iamVjdCk7XG5leHBvcnRzLlBvbHlnb24gPSBQb2x5Z29uO1xuIiwiaW1wb3J0IHsgUlRNYXRoIH0gZnJvbSBcIi4uL1JUTWF0aFwiO1xuaW1wb3J0IHsgQWJzdHJhY3RPYmplY3QgfSBmcm9tIFwiLi9BYnN0cmFjdE9iamVjdFwiO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tIFwiLi4vQ29sb3IvQ29sb3JcIjtcbmltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSBcIi4uL01hdGVyaWFsXCI7XG5pbXBvcnQgeyBSYXkgfSBmcm9tIFwiLi4vUmF5XCI7XG5pbXBvcnQgeyBSR0JDb2xvciB9IGZyb20gXCIuLi9Db2xvci9SR0JDb2xvclwiO1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSBcIi4uL1ZlY3RvclwiO1xuXG5leHBvcnQgY2xhc3MgUG9seWdvbiBleHRlbmRzIEFic3RyYWN0T2JqZWN0IHtcbiAgICBwcml2YXRlIHZlcnRpY2VzOiBWZWN0b3JbXTtcbiAgICBwcml2YXRlIG1hdGVyaWFsOiBNYXRlcmlhbCA9IG5ldyBNYXRlcmlhbChDb2xvci5ncmF5LCAwKTtcblxuICAgIGNvbnN0cnVjdG9yICguLi52ZXJ0aWNlczogVmVjdG9yW10pIHtcbiAgICAgICAgc3VwZXIgKCk7XG5cbiAgICAgICAgdGhpcy52ZXJ0aWNlcyA9IHZlcnRpY2VzO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRJbnRlcnNlY3REYXRhIChyYXk6IFJheSk6IGFueSB7XG4gICAgICAgIGxldCBkaXN0YW5jZTogbnVtYmVyLFxuICAgICAgICAgICAgZGlzdGFuY2VGcm9tQXhpc0NlbnRlcjogbnVtYmVyLFxuICAgICAgICAgICAgaGl0UG9pbnQ6IFZlY3RvcixcbiAgICAgICAgICAgIG5vcm1hbDogVmVjdG9yID0gdGhpcy5nZXROb3JtYWwoKSxcbiAgICAgICAgICAgIG51bWVyYXRvcjogbnVtYmVyLFxuICAgICAgICAgICAgZGVub21pbmF0b3I6IG51bWJlcjtcblxuICAgICAgICBkaXN0YW5jZUZyb21BeGlzQ2VudGVyID0gVmVjdG9yLmRvdCh0aGlzLnZlcnRpY2VzWzBdLCBub3JtYWwpO1xuXG4gICAgICAgIGRlbm9taW5hdG9yID0gVmVjdG9yLmRvdChub3JtYWwsIHJheS5nZXREaXJlY3Rpb24oKSk7XG4gICAgICAgIG51bWVyYXRvciA9IC1WZWN0b3IuZG90KG5vcm1hbCwgcmF5LmdldE9yaWdpbigpKSArIGRpc3RhbmNlRnJvbUF4aXNDZW50ZXI7XG5cbiAgICAgICAgZGlzdGFuY2UgPSBudW1lcmF0b3IgLyBkZW5vbWluYXRvcjtcblxuICAgICAgICBpZiAoZGlzdGFuY2UgPCBSVE1hdGguRVBTSUxPTikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaGl0UG9pbnQgPSByYXkuZ2V0SGl0UG9pbnQoZGlzdGFuY2UpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCB2ZXJ0aWNlc0xlbmd0aCA9IHRoaXMudmVydGljZXMubGVuZ3RoOyBpIDwgdmVydGljZXNMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHZlcnRleDE6IFZlY3RvciA9IHRoaXMudmVydGljZXNbaV0sXG4gICAgICAgICAgICAgICAgdmVydGV4MjogVmVjdG9yO1xuXG4gICAgICAgICAgICBpZiAoaSA9PT0gdmVydGljZXNMZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgdmVydGV4MiA9IHRoaXMudmVydGljZXNbMF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZlcnRleDIgPSB0aGlzLnZlcnRpY2VzW2kgKyAxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICFQb2x5Z29uLmNoZWNrU2FtZUNsb2NrRGlyKFxuICAgICAgICAgICAgICAgICAgICBWZWN0b3Iuc3Vic3RyYWN0KHZlcnRleDIsIHZlcnRleDEpLFxuICAgICAgICAgICAgICAgICAgICBWZWN0b3Iuc3Vic3RyYWN0KGhpdFBvaW50LCB2ZXJ0ZXgxKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXROb3JtYWwoKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoaXRQb2ludDogaGl0UG9pbnQsXG4gICAgICAgICAgICBub3JtYWw6IG5vcm1hbCxcbiAgICAgICAgICAgIGRpc3RhbmNlOiBkaXN0YW5jZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRNYXRlcmlhbCAoKTogTWF0ZXJpYWwge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXRlcmlhbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Tm9ybWFsICgpOiBWZWN0b3Ige1xuICAgICAgICBsZXQgZWRnZTE6IFZlY3RvciA9IFZlY3Rvci5zdWJzdHJhY3QodGhpcy52ZXJ0aWNlc1syXSwgdGhpcy52ZXJ0aWNlc1swXSksXG4gICAgICAgICAgICBlZGdlMjogVmVjdG9yID0gVmVjdG9yLnN1YnN0cmFjdCh0aGlzLnZlcnRpY2VzWzFdLCB0aGlzLnZlcnRpY2VzWzBdKTtcblxuICAgICAgICByZXR1cm4gVmVjdG9yLm5vcm1hbGl6ZShWZWN0b3IuY3Jvc3MoZWRnZTEsIGVkZ2UyKSk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldE1hdGVyaWFsIChtYXRlcmlhbDogTWF0ZXJpYWwpOiB0aGlzIHtcbiAgICAgICAgdGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGNoZWNrU2FtZUNsb2NrRGlyICh2ZWN0b3IxOiBWZWN0b3IsIHZlY3RvcjI6IFZlY3Rvciwgbm9ybWFsOiBWZWN0b3IpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IG5vcm1hbFYxVjI6IFZlY3RvciA9IFZlY3Rvci5jcm9zcyh2ZWN0b3IyLCB2ZWN0b3IxKTtcblxuICAgICAgICByZXR1cm4gVmVjdG9yLmRvdChub3JtYWxWMVYyLCBub3JtYWwpID49IDA7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
