"use strict";var __extends=this&&this.__extends||function(t,r){function e(){this.constructor=t}for(var o in r)r.hasOwnProperty(o)&&(t[o]=r[o]);t.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)},RTMath_1=require("../RTMath"),AbstractObject_1=require("./AbstractObject"),Color_1=require("../Color/Color"),Material_1=require("../Material"),Vector_1=require("../Vector"),Polygon=function(t){function r(){for(var r=[],e=0;e<arguments.length;e++)r[e-0]=arguments[e];t.call(this),this.material=new Material_1.Material(Color_1.Color.gray),this.vertices=r}return __extends(r,t),r.prototype.getIntersectData=function(t){var e,o,c,i,s,n=this.getNormal();if(o=Vector_1.Vector.dot(this.vertices[0],n),s=Vector_1.Vector.dot(n,t.getDirection()),i=-Vector_1.Vector.dot(n,t.getOrigin())+o,e=i/s,!(e<RTMath_1.RTMath.EPSILON)){c=t.getHitPoint(e);for(var a=0,u=this.vertices.length;u>a;a++){var h=this.vertices[a],l=void 0;if(l=a===u-1?this.vertices[0]:this.vertices[a+1],!r.checkSameClockDir(Vector_1.Vector.substract(l,h),Vector_1.Vector.substract(c,h),this.getNormal()))return}return{hitPoint:c,normal:n,distance:e}}},r.prototype.getMaterial=function(){return this.material},r.prototype.getNormal=function(){var t=Vector_1.Vector.substract(this.vertices[2],this.vertices[0]),r=Vector_1.Vector.substract(this.vertices[1],this.vertices[0]);return Vector_1.Vector.normalize(Vector_1.Vector.cross(t,r))},r.prototype.getPosition=function(){return this.vertices[0]},r.prototype.getRandomPoint=function(){return new Vector_1.Vector(0,0,0)},r.prototype.setMaterial=function(t){return this.material=t,this},r.checkSameClockDir=function(t,r,e){var o=Vector_1.Vector.cross(r,t);return Vector_1.Vector.dot(o,e)>=0},r}(AbstractObject_1.AbstractObject);exports.Polygon=Polygon;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk9iamVjdHMvUG9seWdvbi5qcyIsIk9iamVjdHMvUG9seWdvbi50cyJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJ0aGlzIiwiZCIsImIiLCJfXyIsImNvbnN0cnVjdG9yIiwicCIsImhhc093blByb3BlcnR5IiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiUlRNYXRoXzEiLCJyZXF1aXJlIiwiQWJzdHJhY3RPYmplY3RfMSIsIkNvbG9yXzEiLCJNYXRlcmlhbF8xIiwiVmVjdG9yXzEiLCJQb2x5Z29uIiwiX3N1cGVyIiwiUG9seWdvbi5jb25zdHJ1Y3RvciIsIlBvbHlnb24uZ2V0SW50ZXJzZWN0RGF0YSIsIlBvbHlnb24uZ2V0TWF0ZXJpYWwiLCJQb2x5Z29uLmdldE5vcm1hbCIsIlBvbHlnb24uZ2V0UG9zaXRpb24iLCJQb2x5Z29uLmdldFJhbmRvbVBvaW50IiwiUG9seWdvbi5zZXRNYXRlcmlhbCIsIlBvbHlnb24uY2hlY2tTYW1lQ2xvY2tEaXIiLCJBYnN0cmFjdE9iamVjdCIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFlBQ0EsSUFBSUEsV0FBYUMsTUFBUUEsS0FBS0QsV0FBYyxTQUFVRSxFQUFHQyxHQUVyRCxRQUFTQyxLQUFPSCxLQUFLSSxZQUFjSCxFQURuQyxJQUFLLEdBQUlJLEtBQUtILEdBQU9BLEVBQUVJLGVBQWVELEtBQUlKLEVBQUVJLEdBQUtILEVBQUVHLEdBRW5ESixHQUFFTSxVQUFrQixPQUFOTCxFQUFhTSxPQUFPQyxPQUFPUCxJQUFNQyxFQUFHSSxVQUFZTCxFQUFFSyxVQUFXLEdBQUlKLEtDSm5GTyxTQUFBQyxRQUF1QixhQUN2QkMsaUJBQUFELFFBQStCLG9CQUMvQkUsUUFBQUYsUUFBc0Isa0JBQ3RCRyxXQUFBSCxRQUF5QixlQUd6QkksU0FBQUosUUFBdUIsYUFFdkJLLFFBQUEsU0FBQUMsR0FJSUQsUUFBQUEsS0RHSSxJQ0hTRSxHQUFBQSxNQUFBQSxFQUFBQSxFQUFBQSxFQUFBQSxVQUFBQSxPQUFBQSxJQUFBQSxFQUFBQSxFQUFBQSxHQUFBQSxVQUFBQSxFQUNUQSxHQUFBQSxLQUFBQSxNQUhJQSxLQUFBQSxTQUFxQkEsR0FBSUEsWUFBQUEsU0FBU0EsUUFBQUEsTUFBTUEsTUFLNUNBLEtBQUtBLFNBQVdBLEVBb0Z4QkYsTUEzRjZCQSxXQUFBQSxFQUFBQSxHQVVsQkEsRUFBQUEsVUFBQUEsaUJBQVBBLFNBQXlCQSxHQUNyQkcsR0FBSUEsR0FDQUEsRUFDQUEsRUFFQUEsRUFDQUEsRUFGQUEsRUFBaUJBLEtBQUtBLFdBVzFCQSxJQVBBQSxFQUF5QkEsU0FBQUEsT0FBT0EsSUFBSUEsS0FBS0EsU0FBU0EsR0FBSUEsR0FFdERBLEVBQWNBLFNBQUFBLE9BQU9BLElBQUlBLEVBQVFBLEVBQUlBLGdCQUNyQ0EsR0FBYUEsU0FBQUEsT0FBT0EsSUFBSUEsRUFBUUEsRUFBSUEsYUFBZUEsRUFFbkRBLEVBQVdBLEVBQVlBLElBRW5CQSxFQUFXQSxTQUFBQSxPQUFPQSxTQUF0QkEsQ0FJQUEsRUFBV0EsRUFBSUEsWUFBWUEsRUFFM0JBLEtBQUtBLEdBQUlBLEdBQUlBLEVBQUdBLEVBQWlCQSxLQUFLQSxTQUFTQSxPQUFZQSxFQUFKQSxFQUFvQkEsSUFBS0EsQ0FDNUVBLEdBQUlBLEdBQWtCQSxLQUFLQSxTQUFTQSxHQUNoQ0EsRUFBT0EsTUFRWEEsSUFMSUEsRUFEQUEsSUFBTUEsRUFBaUJBLEVBQ2JBLEtBQUtBLFNBQVNBLEdBRWRBLEtBQUtBLFNBQVNBLEVBQUlBLElBSTNCQSxFQUFRQSxrQkFDTEEsU0FBQUEsT0FBT0EsVUFBVUEsRUFBU0EsR0FDMUJBLFNBQUFBLE9BQU9BLFVBQVVBLEVBQVVBLEdBQzNCQSxLQUFLQSxhQUdUQSxPQUlSQSxPQUNJQSxTQUFVQSxFQUNWQSxPQUFRQSxFQUNSQSxTQUFVQSxLQUlYSCxFQUFBQSxVQUFBQSxZQUFQQSxXQUNJSSxNQUFPQSxNQUFLQSxVQUdUSixFQUFBQSxVQUFBQSxVQUFQQSxXQUNJSyxHQUFJQSxHQUFnQkEsU0FBQUEsT0FBT0EsVUFBVUEsS0FBS0EsU0FBU0EsR0FBSUEsS0FBS0EsU0FBU0EsSUFDakVBLEVBQWdCQSxTQUFBQSxPQUFPQSxVQUFVQSxLQUFLQSxTQUFTQSxHQUFJQSxLQUFLQSxTQUFTQSxHQUVyRUEsT0FBT0EsVUFBQUEsT0FBT0EsVUFBVUEsU0FBQUEsT0FBT0EsTUFBTUEsRUFBT0EsS0FHekNMLEVBQUFBLFVBQUFBLFlBQVBBLFdBQ0lNLE1BQU9BLE1BQUtBLFNBQVNBLElBSWxCTixFQUFBQSxVQUFBQSxlQUFQQSxXQUNJTyxNQUFPQSxJQUFJQSxVQUFBQSxPQUFPQSxFQUFHQSxFQUFHQSxJQUlyQlAsRUFBQUEsVUFBQUEsWUFBUEEsU0FBb0JBLEdBR2hCUSxNQUZBQSxNQUFLQSxTQUFXQSxFQUVUQSxNQUdJUixFQUFBQSxrQkFBZkEsU0FBa0NBLEVBQWlCQSxFQUFpQkEsR0FDaEVTLEdBQUlBLEdBQXFCQSxTQUFBQSxPQUFPQSxNQUFNQSxFQUFTQSxFQUUvQ0EsT0FBT0EsVUFBQUEsT0FBT0EsSUFBSUEsRUFBWUEsSUFBV0EsR0FFakRULEdBM0Y2QkosaUJBQUFjLGVBQWhCQyxTQUFBWCxRQUFPQSIsImZpbGUiOiJPYmplY3RzL1BvbHlnb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFJUTWF0aF8xID0gcmVxdWlyZShcIi4uL1JUTWF0aFwiKTtcbnZhciBBYnN0cmFjdE9iamVjdF8xID0gcmVxdWlyZShcIi4vQWJzdHJhY3RPYmplY3RcIik7XG52YXIgQ29sb3JfMSA9IHJlcXVpcmUoXCIuLi9Db2xvci9Db2xvclwiKTtcbnZhciBNYXRlcmlhbF8xID0gcmVxdWlyZShcIi4uL01hdGVyaWFsXCIpO1xudmFyIFZlY3Rvcl8xID0gcmVxdWlyZShcIi4uL1ZlY3RvclwiKTtcbnZhciBQb2x5Z29uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUG9seWdvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQb2x5Z29uKCkge1xuICAgICAgICB2YXIgdmVydGljZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZlcnRpY2VzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLm1hdGVyaWFsID0gbmV3IE1hdGVyaWFsXzEuTWF0ZXJpYWwoQ29sb3JfMS5Db2xvci5ncmF5KTtcbiAgICAgICAgdGhpcy52ZXJ0aWNlcyA9IHZlcnRpY2VzO1xuICAgIH1cbiAgICBQb2x5Z29uLnByb3RvdHlwZS5nZXRJbnRlcnNlY3REYXRhID0gZnVuY3Rpb24gKHJheSkge1xuICAgICAgICB2YXIgZGlzdGFuY2UsIGRpc3RhbmNlRnJvbUF4aXNDZW50ZXIsIGhpdFBvaW50LCBub3JtYWwgPSB0aGlzLmdldE5vcm1hbCgpLCBudW1lcmF0b3IsIGRlbm9taW5hdG9yO1xuICAgICAgICBkaXN0YW5jZUZyb21BeGlzQ2VudGVyID0gVmVjdG9yXzEuVmVjdG9yLmRvdCh0aGlzLnZlcnRpY2VzWzBdLCBub3JtYWwpO1xuICAgICAgICBkZW5vbWluYXRvciA9IFZlY3Rvcl8xLlZlY3Rvci5kb3Qobm9ybWFsLCByYXkuZ2V0RGlyZWN0aW9uKCkpO1xuICAgICAgICBudW1lcmF0b3IgPSAtVmVjdG9yXzEuVmVjdG9yLmRvdChub3JtYWwsIHJheS5nZXRPcmlnaW4oKSkgKyBkaXN0YW5jZUZyb21BeGlzQ2VudGVyO1xuICAgICAgICBkaXN0YW5jZSA9IG51bWVyYXRvciAvIGRlbm9taW5hdG9yO1xuICAgICAgICBpZiAoZGlzdGFuY2UgPCBSVE1hdGhfMS5SVE1hdGguRVBTSUxPTikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGhpdFBvaW50ID0gcmF5LmdldEhpdFBvaW50KGRpc3RhbmNlKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHZlcnRpY2VzTGVuZ3RoID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IGkgPCB2ZXJ0aWNlc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdmVydGV4MSA9IHRoaXMudmVydGljZXNbaV0sIHZlcnRleDIgPSB2b2lkIDA7XG4gICAgICAgICAgICBpZiAoaSA9PT0gdmVydGljZXNMZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgdmVydGV4MiA9IHRoaXMudmVydGljZXNbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2ZXJ0ZXgyID0gdGhpcy52ZXJ0aWNlc1tpICsgMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIVBvbHlnb24uY2hlY2tTYW1lQ2xvY2tEaXIoVmVjdG9yXzEuVmVjdG9yLnN1YnN0cmFjdCh2ZXJ0ZXgyLCB2ZXJ0ZXgxKSwgVmVjdG9yXzEuVmVjdG9yLnN1YnN0cmFjdChoaXRQb2ludCwgdmVydGV4MSksIHRoaXMuZ2V0Tm9ybWFsKCkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoaXRQb2ludDogaGl0UG9pbnQsXG4gICAgICAgICAgICBub3JtYWw6IG5vcm1hbCxcbiAgICAgICAgICAgIGRpc3RhbmNlOiBkaXN0YW5jZVxuICAgICAgICB9O1xuICAgIH07XG4gICAgUG9seWdvbi5wcm90b3R5cGUuZ2V0TWF0ZXJpYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hdGVyaWFsO1xuICAgIH07XG4gICAgUG9seWdvbi5wcm90b3R5cGUuZ2V0Tm9ybWFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWRnZTEgPSBWZWN0b3JfMS5WZWN0b3Iuc3Vic3RyYWN0KHRoaXMudmVydGljZXNbMl0sIHRoaXMudmVydGljZXNbMF0pLCBlZGdlMiA9IFZlY3Rvcl8xLlZlY3Rvci5zdWJzdHJhY3QodGhpcy52ZXJ0aWNlc1sxXSwgdGhpcy52ZXJ0aWNlc1swXSk7XG4gICAgICAgIHJldHVybiBWZWN0b3JfMS5WZWN0b3Iubm9ybWFsaXplKFZlY3Rvcl8xLlZlY3Rvci5jcm9zcyhlZGdlMSwgZWRnZTIpKTtcbiAgICB9O1xuICAgIFBvbHlnb24ucHJvdG90eXBlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJ0aWNlc1swXTtcbiAgICB9O1xuICAgIFBvbHlnb24ucHJvdG90eXBlLmdldFJhbmRvbVBvaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3Rvcl8xLlZlY3RvcigwLCAwLCAwKTtcbiAgICB9O1xuICAgIFBvbHlnb24ucHJvdG90eXBlLnNldE1hdGVyaWFsID0gZnVuY3Rpb24gKG1hdGVyaWFsKSB7XG4gICAgICAgIHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBQb2x5Z29uLmNoZWNrU2FtZUNsb2NrRGlyID0gZnVuY3Rpb24gKHZlY3RvcjEsIHZlY3RvcjIsIG5vcm1hbCkge1xuICAgICAgICB2YXIgbm9ybWFsVjFWMiA9IFZlY3Rvcl8xLlZlY3Rvci5jcm9zcyh2ZWN0b3IyLCB2ZWN0b3IxKTtcbiAgICAgICAgcmV0dXJuIFZlY3Rvcl8xLlZlY3Rvci5kb3Qobm9ybWFsVjFWMiwgbm9ybWFsKSA+PSAwO1xuICAgIH07XG4gICAgcmV0dXJuIFBvbHlnb247XG59KShBYnN0cmFjdE9iamVjdF8xLkFic3RyYWN0T2JqZWN0KTtcbmV4cG9ydHMuUG9seWdvbiA9IFBvbHlnb247XG4iLCJpbXBvcnQgeyBSVE1hdGggfSBmcm9tIFwiLi4vUlRNYXRoXCI7XG5pbXBvcnQgeyBBYnN0cmFjdE9iamVjdCB9IGZyb20gXCIuL0Fic3RyYWN0T2JqZWN0XCI7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gXCIuLi9Db2xvci9Db2xvclwiO1xuaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tIFwiLi4vTWF0ZXJpYWxcIjtcbmltcG9ydCB7IFJheSB9IGZyb20gXCIuLi9SYXlcIjtcbmltcG9ydCB7IFJHQkNvbG9yIH0gZnJvbSBcIi4uL0NvbG9yL1JHQkNvbG9yXCI7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tIFwiLi4vVmVjdG9yXCI7XG5cbmV4cG9ydCBjbGFzcyBQb2x5Z29uIGV4dGVuZHMgQWJzdHJhY3RPYmplY3Qge1xuICAgIHByaXZhdGUgdmVydGljZXM6IFZlY3RvcltdO1xuICAgIHByaXZhdGUgbWF0ZXJpYWw6IE1hdGVyaWFsID0gbmV3IE1hdGVyaWFsKENvbG9yLmdyYXkpO1xuXG4gICAgY29uc3RydWN0b3IgKC4uLnZlcnRpY2VzOiBWZWN0b3JbXSkge1xuICAgICAgICBzdXBlciAoKTtcblxuICAgICAgICB0aGlzLnZlcnRpY2VzID0gdmVydGljZXM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEludGVyc2VjdERhdGEgKHJheTogUmF5KTogYW55IHtcbiAgICAgICAgbGV0IGRpc3RhbmNlOiBudW1iZXIsXG4gICAgICAgICAgICBkaXN0YW5jZUZyb21BeGlzQ2VudGVyOiBudW1iZXIsXG4gICAgICAgICAgICBoaXRQb2ludDogVmVjdG9yLFxuICAgICAgICAgICAgbm9ybWFsOiBWZWN0b3IgPSB0aGlzLmdldE5vcm1hbCgpLFxuICAgICAgICAgICAgbnVtZXJhdG9yOiBudW1iZXIsXG4gICAgICAgICAgICBkZW5vbWluYXRvcjogbnVtYmVyO1xuXG4gICAgICAgIGRpc3RhbmNlRnJvbUF4aXNDZW50ZXIgPSBWZWN0b3IuZG90KHRoaXMudmVydGljZXNbMF0sIG5vcm1hbCk7XG5cbiAgICAgICAgZGVub21pbmF0b3IgPSBWZWN0b3IuZG90KG5vcm1hbCwgcmF5LmdldERpcmVjdGlvbigpKTtcbiAgICAgICAgbnVtZXJhdG9yID0gLVZlY3Rvci5kb3Qobm9ybWFsLCByYXkuZ2V0T3JpZ2luKCkpICsgZGlzdGFuY2VGcm9tQXhpc0NlbnRlcjtcblxuICAgICAgICBkaXN0YW5jZSA9IG51bWVyYXRvciAvIGRlbm9taW5hdG9yO1xuXG4gICAgICAgIGlmIChkaXN0YW5jZSA8IFJUTWF0aC5FUFNJTE9OKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBoaXRQb2ludCA9IHJheS5nZXRIaXRQb2ludChkaXN0YW5jZSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIHZlcnRpY2VzTGVuZ3RoID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IGkgPCB2ZXJ0aWNlc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdmVydGV4MTogVmVjdG9yID0gdGhpcy52ZXJ0aWNlc1tpXSxcbiAgICAgICAgICAgICAgICB2ZXJ0ZXgyOiBWZWN0b3I7XG5cbiAgICAgICAgICAgIGlmIChpID09PSB2ZXJ0aWNlc0xlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICB2ZXJ0ZXgyID0gdGhpcy52ZXJ0aWNlc1swXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmVydGV4MiA9IHRoaXMudmVydGljZXNbaSArIDFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgIVBvbHlnb24uY2hlY2tTYW1lQ2xvY2tEaXIoXG4gICAgICAgICAgICAgICAgICAgIFZlY3Rvci5zdWJzdHJhY3QodmVydGV4MiwgdmVydGV4MSksXG4gICAgICAgICAgICAgICAgICAgIFZlY3Rvci5zdWJzdHJhY3QoaGl0UG9pbnQsIHZlcnRleDEpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldE5vcm1hbCgpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhpdFBvaW50OiBoaXRQb2ludCxcbiAgICAgICAgICAgIG5vcm1hbDogbm9ybWFsLFxuICAgICAgICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIGdldE1hdGVyaWFsICgpOiBNYXRlcmlhbCB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hdGVyaWFsO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXROb3JtYWwgKCk6IFZlY3RvciB7XG4gICAgICAgIGxldCBlZGdlMTogVmVjdG9yID0gVmVjdG9yLnN1YnN0cmFjdCh0aGlzLnZlcnRpY2VzWzJdLCB0aGlzLnZlcnRpY2VzWzBdKSxcbiAgICAgICAgICAgIGVkZ2UyOiBWZWN0b3IgPSBWZWN0b3Iuc3Vic3RyYWN0KHRoaXMudmVydGljZXNbMV0sIHRoaXMudmVydGljZXNbMF0pO1xuXG4gICAgICAgIHJldHVybiBWZWN0b3Iubm9ybWFsaXplKFZlY3Rvci5jcm9zcyhlZGdlMSwgZWRnZTIpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UG9zaXRpb24gKCk6IFZlY3RvciB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlcnRpY2VzWzBdO1xuICAgIH1cblxuXG4gICAgcHVibGljIGdldFJhbmRvbVBvaW50ICgpOiBWZWN0b3Ige1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcigwLCAwLCAwKTtcbiAgICB9XG5cblxuICAgIHB1YmxpYyBzZXRNYXRlcmlhbCAobWF0ZXJpYWw6IE1hdGVyaWFsKTogdGhpcyB7XG4gICAgICAgIHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbDtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBjaGVja1NhbWVDbG9ja0RpciAodmVjdG9yMTogVmVjdG9yLCB2ZWN0b3IyOiBWZWN0b3IsIG5vcm1hbDogVmVjdG9yKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBub3JtYWxWMVYyOiBWZWN0b3IgPSBWZWN0b3IuY3Jvc3ModmVjdG9yMiwgdmVjdG9yMSk7XG5cbiAgICAgICAgcmV0dXJuIFZlY3Rvci5kb3Qobm9ybWFsVjFWMiwgbm9ybWFsKSA+PSAwO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
