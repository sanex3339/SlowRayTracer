var __extends=this&&this.__extends||function(t,e){function r(){this.constructor=t}for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},RTMath_1=require("../RTMath"),AbstractObject_1=require("./AbstractObject"),Color_1=require("../Color/Color"),Material_1=require("../Material"),RGBColor_1=require("../Color/RGBColor"),Vector_1=require("../Vector"),Polygon=function(t){function e(){for(var e=[],r=0;r<arguments.length;r++)e[r-0]=arguments[r];t.call(this),this.material=new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(115,115,115)),0),this.type="surface",this.vertices=e}return __extends(e,t),e.prototype.getIntersectData=function(t){var r,o,c,i,s,n=this.getNormal();if(o=Vector_1.Vector.dot(this.vertices[0],n),s=Vector_1.Vector.dot(n,t.getDirection()),i=-Vector_1.Vector.dot(n,t.getOrigin())+o,r=i/s,!(r<RTMath_1.RTMath.EPSILON)){t.setDistance(r),c=t.getHitPoint();for(var a=0,l=this.vertices.length;l>a;a++){var u=this.vertices[a],h=void 0;if(h=a===l-1?this.vertices[0]:this.vertices[a+1],!e.checkSameClockDir(Vector_1.Vector.substract(h,u),Vector_1.Vector.substract(c,u),this.getNormal()))return}return r=Vector_1.Vector.substract(c,t.getOrigin()).getLength(),{point:c,distance:r}}},e.prototype.getMaterial=function(){return this.material},e.prototype.getNormal=function(){var t=Vector_1.Vector.substract(this.vertices[2],this.vertices[0]),e=Vector_1.Vector.substract(this.vertices[1],this.vertices[0]);return Vector_1.Vector.normalized(Vector_1.Vector.cross(t,e))},e.prototype.getType=function(){return this.type},e.prototype.setMaterial=function(t){return this.material=t,this},e.checkSameClockDir=function(t,e,r){var o=Vector_1.Vector.cross(e,t);return Vector_1.Vector.dot(o,r)>=0},e}(AbstractObject_1.AbstractObject);exports.Polygon=Polygon;
//# sourceMappingURL=data:application/json;base64,
