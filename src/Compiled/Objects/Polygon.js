var __extends=this&&this.__extends||function(t,r){function e(){this.constructor=t}for(var o in r)r.hasOwnProperty(o)&&(t[o]=r[o]);t.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)},RTMath_1=require("../RTMath"),AbstractObject_1=require("./AbstractObject"),Color_1=require("../Color/Color"),Material_1=require("../Material"),Vector_1=require("../Vector"),Polygon=function(t){function r(){for(var r=[],e=0;e<arguments.length;e++)r[e-0]=arguments[e];t.call(this),this.material=new Material_1.Material(Color_1.Color.gray),this.vertices=r}return __extends(r,t),r.prototype.getIntersectData=function(t){var e,o,c,i,s,n=this.getNormal();if(o=Vector_1.Vector.dot(this.vertices[0],n),s=Vector_1.Vector.dot(n,t.getDirection()),i=-Vector_1.Vector.dot(n,t.getOrigin())+o,e=i/s,!(e<RTMath_1.RTMath.EPSILON)){c=t.getHitPoint(e);for(var a=0,u=this.vertices.length;u>a;a++){var h=this.vertices[a],l=void 0;if(l=a===u-1?this.vertices[0]:this.vertices[a+1],!r.checkSameClockDir(Vector_1.Vector.substract(l,h),Vector_1.Vector.substract(c,h),this.getNormal()))return}return{hitPoint:c,normal:n,distance:e}}},r.prototype.getMaterial=function(){return this.material},r.prototype.getNormal=function(){var t=Vector_1.Vector.substract(this.vertices[2],this.vertices[0]),r=Vector_1.Vector.substract(this.vertices[1],this.vertices[0]);return Vector_1.Vector.normalize(Vector_1.Vector.cross(t,r))},r.prototype.getPosition=function(){return this.vertices[0]},r.prototype.getRandomPoint=function(){return new Vector_1.Vector(0,0,0)},r.prototype.setMaterial=function(t){return this.material=t,this},r.checkSameClockDir=function(t,r,e){var o=Vector_1.Vector.cross(r,t);return Vector_1.Vector.dot(o,e)>=0},r}(AbstractObject_1.AbstractObject);exports.Polygon=Polygon;
//# sourceMappingURL=data:application/json;base64,
