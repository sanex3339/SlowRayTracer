var __extends=this&&this.__extends||function(t,e){function r(){this.constructor=t}for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},AbstractObject_1=require("./AbstractObject"),Color_1=require("../Color/Color"),Material_1=require("../Material"),RGBColor_1=require("../Color/RGBColor"),Vector_1=require("../Vector"),Plane=function(t){function e(e,r){void 0===r&&(r=0),t.call(this),this.material=new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(115,115,115)),0),this.type="surface",this.offset=r,this.normal=e}return __extends(e,t),e.prototype.getIntersectData=function(t){var e,r,o,i,n=this.getNormal();return r=-Vector_1.Vector.dot(n,t.getOrigin())+this.offset,o=Vector_1.Vector.dot(n,t.getDirection()),o>0?void 0:(i=r/o,t.setDistance(i),e=t.getHitPoint(),{point:e,distance:i})},e.prototype.getMaterial=function(){return this.material},e.prototype.getNormal=function(){return this.normal},e.prototype.getType=function(){return this.type},e.prototype.setMaterial=function(t){return this.material=t,this},e}(AbstractObject_1.AbstractObject);exports.Plane=Plane;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk9iamVjdHMvUGxhbmUuanMiLCJPYmplY3RzL1BsYW5lLnRzIl0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsInRoaXMiLCJkIiwiYiIsIl9fIiwiY29uc3RydWN0b3IiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJBYnN0cmFjdE9iamVjdF8xIiwicmVxdWlyZSIsIkNvbG9yXzEiLCJNYXRlcmlhbF8xIiwiUkdCQ29sb3JfMSIsIlZlY3Rvcl8xIiwiUGxhbmUiLCJfc3VwZXIiLCJQbGFuZS5jb25zdHJ1Y3RvciIsIlBsYW5lLmdldEludGVyc2VjdERhdGEiLCJQbGFuZS5nZXRNYXRlcmlhbCIsIlBsYW5lLmdldE5vcm1hbCIsIlBsYW5lLmdldFR5cGUiLCJQbGFuZS5zZXRNYXRlcmlhbCIsIkFic3RyYWN0T2JqZWN0IiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsR0FBSUEsV0FBYUMsTUFBUUEsS0FBS0QsV0FBYyxTQUFVRSxFQUFHQyxHQUVyRCxRQUFTQyxLQUFPSCxLQUFLSSxZQUFjSCxFQURuQyxJQUFLLEdBQUlJLEtBQUtILEdBQU9BLEVBQUVJLGVBQWVELEtBQUlKLEVBQUVJLEdBQUtILEVBQUVHLEdBRW5ESixHQUFFTSxVQUFrQixPQUFOTCxFQUFhTSxPQUFPQyxPQUFPUCxJQUFNQyxFQUFHSSxVQUFZTCxFQUFFSyxVQUFXLEdBQUlKLEtDSG5GTyxpQkFBQUMsUUFBK0Isb0JBQy9CQyxRQUFBRCxRQUFzQixrQkFDdEJFLFdBQUFGLFFBQXlCLGVBRXpCRyxXQUFBSCxRQUF5QixxQkFDekJJLFNBQUFKLFFBQXVCLGFBRXZCSyxNQUFBLFNBQUFDLEdBTUlELFFBQUFBLEdBQWFBLEVBQWdCQSxHQUFBRSxTQUFBQSxJQUFBQSxFQUFBQSxHQUN6QkEsRUFBQUEsS0FBQUEsTUFKSUEsS0FBQUEsU0FBcUJBLEdBQUlBLFlBQUFBLFNBQVNBLEdBQUlBLFNBQUFBLE1BQU1BLEdBQUlBLFlBQUFBLFNBQVNBLElBQUtBLElBQUtBLE1BQU9BLEdBQzFFQSxLQUFBQSxLQUFlQSxVQUtuQkEsS0FBS0EsT0FBU0EsRUFDZEEsS0FBS0EsT0FBU0EsRUE2Q3RCRixNQXZEMkJBLFdBQUFBLEVBQUFBLEdBYWhCQSxFQUFBQSxVQUFBQSxpQkFBUEEsU0FBeUJBLEdBQ3JCRyxHQUFJQSxHQUVBQSxFQUNBQSxFQUNBQSxFQUhBQSxFQUFpQkEsS0FBS0EsV0FRMUJBLE9BSEFBLElBQWNBLFNBQUFBLE9BQU9BLElBQUlBLEVBQVFBLEVBQUlBLGFBQWVBLEtBQUtBLE9BQ3pEQSxFQUFjQSxTQUFBQSxPQUFPQSxJQUFJQSxFQUFRQSxFQUFJQSxnQkFFakNBLEVBQWNBLEVBQWxCQSxRQUlBQSxFQUFXQSxFQUFZQSxFQUV2QkEsRUFBSUEsWUFBWUEsR0FDaEJBLEVBQVdBLEVBQUlBLGVBR1hBLE1BQU9BLEVBQ1BBLFNBQUFBLEtBSURILEVBQUFBLFVBQUFBLFlBQVBBLFdBQ0lJLE1BQU9BLE1BQUtBLFVBR1RKLEVBQUFBLFVBQUFBLFVBQVBBLFdBQ0lLLE1BQU9BLE1BQUtBLFFBR1RMLEVBQUFBLFVBQUFBLFFBQVBBLFdBQ0lNLE1BQU9BLE1BQUtBLE1BR1ROLEVBQUFBLFVBQUFBLFlBQVBBLFNBQW9CQSxHQUdoQk8sTUFGQUEsTUFBS0EsU0FBV0EsRUFFVEEsTUFFZlAsR0F2RDJCTixpQkFBQWMsZUFBZEMsU0FBQVQsTUFBS0EiLCJmaWxlIjoiT2JqZWN0cy9QbGFuZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIEFic3RyYWN0T2JqZWN0XzEgPSByZXF1aXJlKFwiLi9BYnN0cmFjdE9iamVjdFwiKTtcbnZhciBDb2xvcl8xID0gcmVxdWlyZShcIi4uL0NvbG9yL0NvbG9yXCIpO1xudmFyIE1hdGVyaWFsXzEgPSByZXF1aXJlKFwiLi4vTWF0ZXJpYWxcIik7XG52YXIgUkdCQ29sb3JfMSA9IHJlcXVpcmUoXCIuLi9Db2xvci9SR0JDb2xvclwiKTtcbnZhciBWZWN0b3JfMSA9IHJlcXVpcmUoXCIuLi9WZWN0b3JcIik7XG52YXIgUGxhbmUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQbGFuZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQbGFuZShub3JtYWwsIG9mZnNldCkge1xuICAgICAgICBpZiAob2Zmc2V0ID09PSB2b2lkIDApIHsgb2Zmc2V0ID0gMDsgfVxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5tYXRlcmlhbCA9IG5ldyBNYXRlcmlhbF8xLk1hdGVyaWFsKG5ldyBDb2xvcl8xLkNvbG9yKG5ldyBSR0JDb2xvcl8xLlJHQkNvbG9yKDExNSwgMTE1LCAxMTUpKSwgMCk7XG4gICAgICAgIHRoaXMudHlwZSA9ICdzdXJmYWNlJztcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIHRoaXMubm9ybWFsID0gbm9ybWFsO1xuICAgIH1cbiAgICBQbGFuZS5wcm90b3R5cGUuZ2V0SW50ZXJzZWN0RGF0YSA9IGZ1bmN0aW9uIChyYXkpIHtcbiAgICAgICAgdmFyIGhpdFBvaW50LCBub3JtYWwgPSB0aGlzLmdldE5vcm1hbCgpLCBudW1lcmF0b3IsIGRlbm9taW5hdG9yLCBkaXN0YW5jZTtcbiAgICAgICAgbnVtZXJhdG9yID0gLVZlY3Rvcl8xLlZlY3Rvci5kb3Qobm9ybWFsLCByYXkuZ2V0T3JpZ2luKCkpICsgdGhpcy5vZmZzZXQ7XG4gICAgICAgIGRlbm9taW5hdG9yID0gVmVjdG9yXzEuVmVjdG9yLmRvdChub3JtYWwsIHJheS5nZXREaXJlY3Rpb24oKSk7XG4gICAgICAgIGlmIChkZW5vbWluYXRvciA+IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkaXN0YW5jZSA9IG51bWVyYXRvciAvIGRlbm9taW5hdG9yO1xuICAgICAgICByYXkuc2V0RGlzdGFuY2UoZGlzdGFuY2UpO1xuICAgICAgICBoaXRQb2ludCA9IHJheS5nZXRIaXRQb2ludCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcG9pbnQ6IGhpdFBvaW50LFxuICAgICAgICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBQbGFuZS5wcm90b3R5cGUuZ2V0TWF0ZXJpYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hdGVyaWFsO1xuICAgIH07XG4gICAgUGxhbmUucHJvdG90eXBlLmdldE5vcm1hbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9ybWFsO1xuICAgIH07XG4gICAgUGxhbmUucHJvdG90eXBlLmdldFR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGU7XG4gICAgfTtcbiAgICBQbGFuZS5wcm90b3R5cGUuc2V0TWF0ZXJpYWwgPSBmdW5jdGlvbiAobWF0ZXJpYWwpIHtcbiAgICAgICAgdGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBQbGFuZTtcbn0pKEFic3RyYWN0T2JqZWN0XzEuQWJzdHJhY3RPYmplY3QpO1xuZXhwb3J0cy5QbGFuZSA9IFBsYW5lO1xuIiwiaW1wb3J0IHsgQWJzdHJhY3RPYmplY3QgfSBmcm9tIFwiLi9BYnN0cmFjdE9iamVjdFwiO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tIFwiLi4vQ29sb3IvQ29sb3JcIjtcbmltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSBcIi4uL01hdGVyaWFsXCI7XG5pbXBvcnQgeyBSYXkgfSBmcm9tIFwiLi4vUmF5XCI7XG5pbXBvcnQgeyBSR0JDb2xvciB9IGZyb20gXCIuLi9Db2xvci9SR0JDb2xvclwiO1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSBcIi4uL1ZlY3RvclwiO1xuXG5leHBvcnQgY2xhc3MgUGxhbmUgZXh0ZW5kcyBBYnN0cmFjdE9iamVjdCB7XG4gICAgcHJpdmF0ZSBub3JtYWw6IFZlY3RvcjtcbiAgICBwcml2YXRlIG9mZnNldDogbnVtYmVyO1xuICAgIHByaXZhdGUgbWF0ZXJpYWw6IE1hdGVyaWFsID0gbmV3IE1hdGVyaWFsKG5ldyBDb2xvcihuZXcgUkdCQ29sb3IoMTE1LCAxMTUsIDExNSkpLCAwKTtcbiAgICBwcml2YXRlIHR5cGU6IHN0cmluZyA9ICdzdXJmYWNlJztcblxuICAgIGNvbnN0cnVjdG9yIChub3JtYWw6IFZlY3Rvciwgb2Zmc2V0OiBudW1iZXIgPSAwKSB7XG4gICAgICAgIHN1cGVyICgpO1xuXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICB0aGlzLm5vcm1hbCA9IG5vcm1hbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0SW50ZXJzZWN0RGF0YSAocmF5OiBSYXkpOiBhbnkge1xuICAgICAgICBsZXQgaGl0UG9pbnQ6IFZlY3RvcixcbiAgICAgICAgICAgIG5vcm1hbDogVmVjdG9yID0gdGhpcy5nZXROb3JtYWwoKSxcbiAgICAgICAgICAgIG51bWVyYXRvcjogbnVtYmVyLFxuICAgICAgICAgICAgZGVub21pbmF0b3I6IG51bWJlcixcbiAgICAgICAgICAgIGRpc3RhbmNlOiBudW1iZXI7XG5cbiAgICAgICAgbnVtZXJhdG9yID0gLSBWZWN0b3IuZG90KG5vcm1hbCwgcmF5LmdldE9yaWdpbigpKSArIHRoaXMub2Zmc2V0O1xuICAgICAgICBkZW5vbWluYXRvciA9IFZlY3Rvci5kb3Qobm9ybWFsLCByYXkuZ2V0RGlyZWN0aW9uKCkpO1xuXG4gICAgICAgIGlmIChkZW5vbWluYXRvciA+IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGRpc3RhbmNlID0gbnVtZXJhdG9yIC8gZGVub21pbmF0b3I7XG5cbiAgICAgICAgcmF5LnNldERpc3RhbmNlKGRpc3RhbmNlKTtcbiAgICAgICAgaGl0UG9pbnQgPSByYXkuZ2V0SGl0UG9pbnQoKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcG9pbnQ6IGhpdFBvaW50LFxuICAgICAgICAgICAgZGlzdGFuY2VcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TWF0ZXJpYWwgKCk6IE1hdGVyaWFsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0ZXJpYWw7XG4gICAgfVxuXG4gICAgcHVibGljIGdldE5vcm1hbCAoKTogVmVjdG9yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9ybWFsO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRUeXBlICgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRNYXRlcmlhbCAobWF0ZXJpYWw6IE1hdGVyaWFsKTogdGhpcyB7XG4gICAgICAgIHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbDtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
