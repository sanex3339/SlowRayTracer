"use strict";var __extends=this&&this.__extends||function(t,e){function r(){this.constructor=t}for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},AbstractObject_1=require("./AbstractObject"),Color_1=require("../Color/Color"),Material_1=require("../Material"),RTMath_1=require("../RTMath"),Vector_1=require("../Vector"),Plane=function(t){function e(e,r){t.call(this),this.point=new Vector_1.Vector(0,0,0),this.material=new Material_1.Material(Color_1.Color.gray),this.normal=e,r&&(this.point=r)}return __extends(e,t),e.prototype.getIntersectData=function(t){var e,r,o=Vector_1.Vector.dot(Vector_1.Vector.substract(this.point,t.getOrigin()),this.normal)/Vector_1.Vector.dot(t.getDirection(),this.getNormal());if(!(o<=RTMath_1.RTMath.EPSILON))return r=Vector_1.Vector.add(t.getOrigin(),Vector_1.Vector.scale(t.getDirection(),o)),e=Vector_1.Vector.substract(r,t.getOrigin()).getLength(),{hitPoint:r,normal:this.getNormal(),distance:e}},e.prototype.getMaterial=function(){return this.material},e.prototype.getPosition=function(){return this.point},e.prototype.getRandomPoint=function(){return new Vector_1.Vector(0,0,0)},e.prototype.getNormal=function(){return this.normal},e.prototype.setMaterial=function(t){return this.material=t,this},e}(AbstractObject_1.AbstractObject);exports.Plane=Plane;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk9iamVjdHMvUGxhbmUuanMiLCJPYmplY3RzL1BsYW5lLnRzIl0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsInRoaXMiLCJkIiwiYiIsIl9fIiwiY29uc3RydWN0b3IiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJBYnN0cmFjdE9iamVjdF8xIiwicmVxdWlyZSIsIkNvbG9yXzEiLCJNYXRlcmlhbF8xIiwiUlRNYXRoXzEiLCJWZWN0b3JfMSIsIlBsYW5lIiwiX3N1cGVyIiwiUGxhbmUuY29uc3RydWN0b3IiLCJQbGFuZS5nZXRJbnRlcnNlY3REYXRhIiwiUGxhbmUuZ2V0TWF0ZXJpYWwiLCJQbGFuZS5nZXRQb3NpdGlvbiIsIlBsYW5lLmdldFJhbmRvbVBvaW50IiwiUGxhbmUuZ2V0Tm9ybWFsIiwiUGxhbmUuc2V0TWF0ZXJpYWwiLCJBYnN0cmFjdE9iamVjdCIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFlBQ0EsSUFBSUEsV0FBYUMsTUFBUUEsS0FBS0QsV0FBYyxTQUFVRSxFQUFHQyxHQUVyRCxRQUFTQyxLQUFPSCxLQUFLSSxZQUFjSCxFQURuQyxJQUFLLEdBQUlJLEtBQUtILEdBQU9BLEVBQUVJLGVBQWVELEtBQUlKLEVBQUVJLEdBQUtILEVBQUVHLEdBRW5ESixHQUFFTSxVQUFrQixPQUFOTCxFQUFhTSxPQUFPQyxPQUFPUCxJQUFNQyxFQUFHSSxVQUFZTCxFQUFFSyxVQUFXLEdBQUlKLEtDSm5GTyxpQkFBQUMsUUFBK0Isb0JBQy9CQyxRQUFBRCxRQUFzQixrQkFDdEJFLFdBQUFGLFFBQXlCLGVBRXpCRyxTQUFBSCxRQUF1QixhQUV2QkksU0FBQUosUUFBdUIsYUFFdkJLLE1BQUEsU0FBQUMsR0FLSUQsUUFBQUEsR0FBYUEsRUFBZ0JBLEdBQ3pCRSxFQUFBQSxLQUFBQSxNQUpJQSxLQUFBQSxNQUFnQkEsR0FBSUEsVUFBQUEsT0FBT0EsRUFBR0EsRUFBR0EsR0FDakNBLEtBQUFBLFNBQXFCQSxHQUFJQSxZQUFBQSxTQUFTQSxRQUFBQSxNQUFNQSxNQUs1Q0EsS0FBS0EsT0FBU0EsRUFFVkEsSUFDQUEsS0FBS0EsTUFBUUEsR0FpRXpCRixNQTVFMkJBLFdBQUFBLEVBQUFBLEdBZWhCQSxFQUFBQSxVQUFBQSxpQkFBUEEsU0FBeUJBLEdBQ3JCRyxHQUFJQSxHQUNBQSxFQUNBQSxFQUNBQSxTQUFBQSxPQUFPQSxJQUNIQSxTQUFBQSxPQUFPQSxVQUNIQSxLQUFLQSxNQUNMQSxFQUFJQSxhQUVSQSxLQUFLQSxRQUVUQSxTQUFBQSxPQUFPQSxJQUNIQSxFQUFJQSxlQUNKQSxLQUFLQSxZQUdiQSxNQUFJQSxHQUFLQSxTQUFBQSxPQUFPQSxTQWlCaEJBLE1BYkFBLEdBQVdBLFNBQUFBLE9BQU9BLElBQ2RBLEVBQUlBLFlBQ0pBLFNBQUFBLE9BQU9BLE1BQ0hBLEVBQUlBLGVBQ0pBLElBSVJBLEVBQVdBLFNBQUFBLE9BQU9BLFVBQ2RBLEVBQ0FBLEVBQUlBLGFBQ05BLGFBR0VBLFNBQVVBLEVBQ1ZBLE9BQVFBLEtBQUtBLFlBQ2JBLFNBQVVBLElBSVhILEVBQUFBLFVBQUFBLFlBQVBBLFdBQ0lJLE1BQU9BLE1BQUtBLFVBR1RKLEVBQUFBLFVBQUFBLFlBQVBBLFdBQ0lLLE1BQU9BLE1BQUtBLE9BR1RMLEVBQUFBLFVBQUFBLGVBQVBBLFdBQ0lNLE1BQU9BLElBQUlBLFVBQUFBLE9BQU9BLEVBQUdBLEVBQUdBLElBR3JCTixFQUFBQSxVQUFBQSxVQUFQQSxXQUNJTyxNQUFPQSxNQUFLQSxRQUdUUCxFQUFBQSxVQUFBQSxZQUFQQSxTQUFvQkEsR0FHaEJRLE1BRkFBLE1BQUtBLFNBQVdBLEVBRVRBLE1BRWZSLEdBNUUyQk4saUJBQUFlLGVBQWRDLFNBQUFWLE1BQUtBIiwiZmlsZSI6Ik9iamVjdHMvUGxhbmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIEFic3RyYWN0T2JqZWN0XzEgPSByZXF1aXJlKFwiLi9BYnN0cmFjdE9iamVjdFwiKTtcbnZhciBDb2xvcl8xID0gcmVxdWlyZShcIi4uL0NvbG9yL0NvbG9yXCIpO1xudmFyIE1hdGVyaWFsXzEgPSByZXF1aXJlKFwiLi4vTWF0ZXJpYWxcIik7XG52YXIgUlRNYXRoXzEgPSByZXF1aXJlKFwiLi4vUlRNYXRoXCIpO1xudmFyIFZlY3Rvcl8xID0gcmVxdWlyZShcIi4uL1ZlY3RvclwiKTtcbnZhciBQbGFuZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFBsYW5lLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFBsYW5lKG5vcm1hbCwgcG9pbnQpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMucG9pbnQgPSBuZXcgVmVjdG9yXzEuVmVjdG9yKDAsIDAsIDApO1xuICAgICAgICB0aGlzLm1hdGVyaWFsID0gbmV3IE1hdGVyaWFsXzEuTWF0ZXJpYWwoQ29sb3JfMS5Db2xvci5ncmF5KTtcbiAgICAgICAgdGhpcy5ub3JtYWwgPSBub3JtYWw7XG4gICAgICAgIGlmIChwb2ludCkge1xuICAgICAgICAgICAgdGhpcy5wb2ludCA9IHBvaW50O1xuICAgICAgICB9XG4gICAgfVxuICAgIFBsYW5lLnByb3RvdHlwZS5nZXRJbnRlcnNlY3REYXRhID0gZnVuY3Rpb24gKHJheSkge1xuICAgICAgICB2YXIgZGlzdGFuY2UsIGhpdFBvaW50LCB0ID0gVmVjdG9yXzEuVmVjdG9yLmRvdChWZWN0b3JfMS5WZWN0b3Iuc3Vic3RyYWN0KHRoaXMucG9pbnQsIHJheS5nZXRPcmlnaW4oKSksIHRoaXMubm9ybWFsKSAvXG4gICAgICAgICAgICBWZWN0b3JfMS5WZWN0b3IuZG90KHJheS5nZXREaXJlY3Rpb24oKSwgdGhpcy5nZXROb3JtYWwoKSk7XG4gICAgICAgIGlmICh0IDw9IFJUTWF0aF8xLlJUTWF0aC5FUFNJTE9OKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaGl0UG9pbnQgPSBWZWN0b3JfMS5WZWN0b3IuYWRkKHJheS5nZXRPcmlnaW4oKSwgVmVjdG9yXzEuVmVjdG9yLnNjYWxlKHJheS5nZXREaXJlY3Rpb24oKSwgdCkpO1xuICAgICAgICBkaXN0YW5jZSA9IFZlY3Rvcl8xLlZlY3Rvci5zdWJzdHJhY3QoaGl0UG9pbnQsIHJheS5nZXRPcmlnaW4oKSkuZ2V0TGVuZ3RoKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoaXRQb2ludDogaGl0UG9pbnQsXG4gICAgICAgICAgICBub3JtYWw6IHRoaXMuZ2V0Tm9ybWFsKCksXG4gICAgICAgICAgICBkaXN0YW5jZTogZGlzdGFuY2VcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIFBsYW5lLnByb3RvdHlwZS5nZXRNYXRlcmlhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0ZXJpYWw7XG4gICAgfTtcbiAgICBQbGFuZS5wcm90b3R5cGUuZ2V0UG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvaW50O1xuICAgIH07XG4gICAgUGxhbmUucHJvdG90eXBlLmdldFJhbmRvbVBvaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3Rvcl8xLlZlY3RvcigwLCAwLCAwKTtcbiAgICB9O1xuICAgIFBsYW5lLnByb3RvdHlwZS5nZXROb3JtYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vcm1hbDtcbiAgICB9O1xuICAgIFBsYW5lLnByb3RvdHlwZS5zZXRNYXRlcmlhbCA9IGZ1bmN0aW9uIChtYXRlcmlhbCkge1xuICAgICAgICB0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIFBsYW5lO1xufSkoQWJzdHJhY3RPYmplY3RfMS5BYnN0cmFjdE9iamVjdCk7XG5leHBvcnRzLlBsYW5lID0gUGxhbmU7XG4iLCJpbXBvcnQgeyBBYnN0cmFjdE9iamVjdCB9IGZyb20gXCIuL0Fic3RyYWN0T2JqZWN0XCI7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gXCIuLi9Db2xvci9Db2xvclwiO1xuaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tIFwiLi4vTWF0ZXJpYWxcIjtcbmltcG9ydCB7IFJheSB9IGZyb20gXCIuLi9SYXlcIjtcbmltcG9ydCB7IFJUTWF0aCB9IGZyb20gXCIuLi9SVE1hdGhcIjtcbmltcG9ydCB7IFJHQkNvbG9yIH0gZnJvbSBcIi4uL0NvbG9yL1JHQkNvbG9yXCI7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tIFwiLi4vVmVjdG9yXCI7XG5cbmV4cG9ydCBjbGFzcyBQbGFuZSBleHRlbmRzIEFic3RyYWN0T2JqZWN0IHtcbiAgICBwcml2YXRlIG5vcm1hbDogVmVjdG9yO1xuICAgIHByaXZhdGUgcG9pbnQ6IFZlY3RvciA9IG5ldyBWZWN0b3IoMCwgMCwgMCk7XG4gICAgcHJpdmF0ZSBtYXRlcmlhbDogTWF0ZXJpYWwgPSBuZXcgTWF0ZXJpYWwoQ29sb3IuZ3JheSk7XG5cbiAgICBjb25zdHJ1Y3RvciAobm9ybWFsOiBWZWN0b3IsIHBvaW50PzogVmVjdG9yKSB7XG4gICAgICAgIHN1cGVyICgpO1xuXG4gICAgICAgIHRoaXMubm9ybWFsID0gbm9ybWFsO1xuXG4gICAgICAgIGlmIChwb2ludCkge1xuICAgICAgICAgICAgdGhpcy5wb2ludCA9IHBvaW50O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldEludGVyc2VjdERhdGEgKHJheTogUmF5KTogYW55IHtcbiAgICAgICAgbGV0IGRpc3RhbmNlOiBudW1iZXIsXG4gICAgICAgICAgICBoaXRQb2ludDogVmVjdG9yLFxuICAgICAgICAgICAgdDogbnVtYmVyID1cbiAgICAgICAgICAgIFZlY3Rvci5kb3QoXG4gICAgICAgICAgICAgICAgVmVjdG9yLnN1YnN0cmFjdChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2ludCxcbiAgICAgICAgICAgICAgICAgICAgcmF5LmdldE9yaWdpbigpXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICB0aGlzLm5vcm1hbFxuICAgICAgICAgICAgKSAvXG4gICAgICAgICAgICBWZWN0b3IuZG90KFxuICAgICAgICAgICAgICAgIHJheS5nZXREaXJlY3Rpb24oKSxcbiAgICAgICAgICAgICAgICB0aGlzLmdldE5vcm1hbCgpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIGlmICh0IDw9IFJUTWF0aC5FUFNJTE9OKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBoaXRQb2ludCA9IFZlY3Rvci5hZGQoXG4gICAgICAgICAgICByYXkuZ2V0T3JpZ2luKCksXG4gICAgICAgICAgICBWZWN0b3Iuc2NhbGUoXG4gICAgICAgICAgICAgICAgcmF5LmdldERpcmVjdGlvbigpLFxuICAgICAgICAgICAgICAgIHRcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICBkaXN0YW5jZSA9IFZlY3Rvci5zdWJzdHJhY3QoXG4gICAgICAgICAgICBoaXRQb2ludCxcbiAgICAgICAgICAgIHJheS5nZXRPcmlnaW4oKVxuICAgICAgICApLmdldExlbmd0aCgpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoaXRQb2ludDogaGl0UG9pbnQsXG4gICAgICAgICAgICBub3JtYWw6IHRoaXMuZ2V0Tm9ybWFsKCksXG4gICAgICAgICAgICBkaXN0YW5jZTogZGlzdGFuY2VcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TWF0ZXJpYWwgKCk6IE1hdGVyaWFsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0ZXJpYWw7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFBvc2l0aW9uICgpOiBWZWN0b3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5wb2ludDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UmFuZG9tUG9pbnQgKCk6IFZlY3RvciB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yKDAsIDAsIDApO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXROb3JtYWwgKCk6IFZlY3RvciB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vcm1hbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0TWF0ZXJpYWwgKG1hdGVyaWFsOiBNYXRlcmlhbCk6IHRoaXMge1xuICAgICAgICB0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
