"use strict";var Tracer=function(){function e(e,t,i){this.buffer=[],this.iteration=0,this.numberOfWorkers=6,this.screenWidth=250,this.screenHeight=250,this.ctx=e,this.screenWidth=t,this.screenHeight=i,this.image=e.getImageData(0,0,this.screenWidth,this.screenHeight),this.imageData=this.image.data;for(var r=0;r<this.screenWidth*this.screenHeight*3;r++)this.buffer.push(0)}return e.prototype.run=function(){for(var e=this,t=0;t<this.numberOfWorkers;t++){var i=new Worker("TracerWorker.js");i.onmessage=function(t){e.iteration++,console.log(e.iteration);for(var i=t.data,r=0;r<i.length;r++)e.buffer[r]+=i[r];for(var a=0,s=0;a<e.screenWidth*e.screenHeight*4;)e.imageData[a++]=255*e.buffer[s++]/e.iteration,e.imageData[a++]=255*e.buffer[s++]/e.iteration,e.imageData[a++]=255*e.buffer[s++]/e.iteration,e.imageData[a++]=255;e.image.data.set(e.imageData),e.ctx.putImageData(e.image,0,0)},i.postMessage([this.screenWidth,this.screenHeight])}},e}();exports.Tracer=Tracer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRyYWNlci5qcyIsIlRyYWNlci50cyJdLCJuYW1lcyI6WyJUcmFjZXIiLCJUcmFjZXIuY29uc3RydWN0b3IiLCJUcmFjZXIucnVuIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsWUNBQSxJQUFBQSxRQUFBLFdBVUlBLFFBQUFBLEdBQWFBLEVBQStCQSxFQUFzQkEsR0FUbEVDLEtBQUFBLFVBSUFBLEtBQUFBLFVBQW9CQSxFQUNwQkEsS0FBQUEsZ0JBQWtCQSxFQUNsQkEsS0FBQUEsWUFBc0JBLElBQ3RCQSxLQUFBQSxhQUF1QkEsSUFHbkJBLEtBQUtBLElBQU1BLEVBQ1hBLEtBQUtBLFlBQWNBLEVBQ25CQSxLQUFLQSxhQUFlQSxFQUVwQkEsS0FBS0EsTUFBUUEsRUFBSUEsYUFBYUEsRUFBR0EsRUFBR0EsS0FBS0EsWUFBYUEsS0FBS0EsY0FDM0RBLEtBQUtBLFVBQVlBLEtBQUtBLE1BQVlBLElBRWxDQSxLQUFLQSxHQUFJQSxHQUFJQSxFQUFHQSxFQUFJQSxLQUFLQSxZQUFjQSxLQUFLQSxhQUFlQSxFQUFHQSxJQUMxREEsS0FBS0EsT0FBT0EsS0FBS0EsR0FrQzdCRCxNQTlCV0EsR0FBQUEsVUFBQUEsSUFBUEEsV0FDSUUsSUFBS0EsR0FEVEEsR0FBQUEsS0FDYUEsRUFBSUEsRUFBR0EsRUFBSUEsS0FBS0EsZ0JBQWlCQSxJQUFLQSxDQUMzQ0EsR0FBSUEsR0FBU0EsR0FBSUEsUUFBT0Esa0JBRXhCQSxHQUFPQSxVQUFZQSxTQUFDQSxHQUNoQkEsRUFBS0EsWUFFTEEsUUFBUUEsSUFBSUEsRUFBS0EsVUFJakJBLEtBQUtBLEdBRkRBLEdBQU9BLEVBQVFBLEtBRVZBLEVBQUlBLEVBQUdBLEVBQUlBLEVBQUtBLE9BQVFBLElBQzdCQSxFQUFLQSxPQUFPQSxJQUFNQSxFQUFLQSxFQUczQkEsS0FBSUEsR0FBSUEsR0FBSUEsRUFBR0EsRUFBSUEsRUFBR0EsRUFBSUEsRUFBS0EsWUFBY0EsRUFBS0EsYUFBZUEsR0FDN0RBLEVBQUtBLFVBQVVBLEtBQTBCQSxJQUFuQkEsRUFBS0EsT0FBT0EsS0FBYUEsRUFBS0EsVUFDcERBLEVBQUtBLFVBQVVBLEtBQTBCQSxJQUFuQkEsRUFBS0EsT0FBT0EsS0FBYUEsRUFBS0EsVUFDcERBLEVBQUtBLFVBQVVBLEtBQTBCQSxJQUFuQkEsRUFBS0EsT0FBT0EsS0FBYUEsRUFBS0EsVUFDcERBLEVBQUtBLFVBQVVBLEtBQU9BLEdBRzFCQSxHQUFLQSxNQUFZQSxLQUFFQSxJQUFJQSxFQUFLQSxXQUU1QkEsRUFBS0EsSUFBSUEsYUFBYUEsRUFBS0EsTUFBT0EsRUFBR0EsSUFHekNBLEVBQU9BLGFBQWFBLEtBQUtBLFlBQWFBLEtBQUtBLGlCQUd2REYsSUFyRGFHLFNBQUFILE9BQU1BIiwiZmlsZSI6IlRyYWNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIFRyYWNlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVHJhY2VyKGN0eCwgc2NyZWVuV2lkdGgsIHNjcmVlbkhlaWdodCkge1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLml0ZXJhdGlvbiA9IDA7XG4gICAgICAgIHRoaXMubnVtYmVyT2ZXb3JrZXJzID0gNjtcbiAgICAgICAgdGhpcy5zY3JlZW5XaWR0aCA9IDI1MDtcbiAgICAgICAgdGhpcy5zY3JlZW5IZWlnaHQgPSAyNTA7XG4gICAgICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgICAgICB0aGlzLnNjcmVlbldpZHRoID0gc2NyZWVuV2lkdGg7XG4gICAgICAgIHRoaXMuc2NyZWVuSGVpZ2h0ID0gc2NyZWVuSGVpZ2h0O1xuICAgICAgICB0aGlzLmltYWdlID0gY3R4LmdldEltYWdlRGF0YSgwLCAwLCB0aGlzLnNjcmVlbldpZHRoLCB0aGlzLnNjcmVlbkhlaWdodCk7XG4gICAgICAgIHRoaXMuaW1hZ2VEYXRhID0gdGhpcy5pbWFnZVsnZGF0YSddO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc2NyZWVuV2lkdGggKiB0aGlzLnNjcmVlbkhlaWdodCAqIDM7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIucHVzaCgwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBUcmFjZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm51bWJlck9mV29ya2VyczsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgd29ya2VyID0gbmV3IFdvcmtlcignVHJhY2VyV29ya2VyLmpzJyk7XG4gICAgICAgICAgICB3b3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5pdGVyYXRpb24rKztcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfdGhpcy5pdGVyYXRpb24pO1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gbWVzc2FnZS5kYXRhO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGpfMSA9IDA7IGpfMSA8IGRhdGEubGVuZ3RoOyBqXzErKykge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5idWZmZXJbal8xXSArPSBkYXRhW2pfMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwLCBqID0gMDsgayA8IF90aGlzLnNjcmVlbldpZHRoICogX3RoaXMuc2NyZWVuSGVpZ2h0ICogNDspIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaW1hZ2VEYXRhW2srK10gPSBfdGhpcy5idWZmZXJbaisrXSAqIDI1NSAvIF90aGlzLml0ZXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaW1hZ2VEYXRhW2srK10gPSBfdGhpcy5idWZmZXJbaisrXSAqIDI1NSAvIF90aGlzLml0ZXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaW1hZ2VEYXRhW2srK10gPSBfdGhpcy5idWZmZXJbaisrXSAqIDI1NSAvIF90aGlzLml0ZXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaW1hZ2VEYXRhW2srK10gPSAyNTU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLmltYWdlWydkYXRhJ10uc2V0KF90aGlzLmltYWdlRGF0YSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuY3R4LnB1dEltYWdlRGF0YShfdGhpcy5pbWFnZSwgMCwgMCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKFt0aGlzLnNjcmVlbldpZHRoLCB0aGlzLnNjcmVlbkhlaWdodF0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gVHJhY2VyO1xufSkoKTtcbmV4cG9ydHMuVHJhY2VyID0gVHJhY2VyO1xuIiwiZXhwb3J0IGNsYXNzIFRyYWNlciB7XG4gICAgYnVmZmVyOiBudW1iZXJbXSA9IFtdO1xuICAgIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xuICAgIGltYWdlOiBhbnk7XG4gICAgaW1hZ2VEYXRhOiBudW1iZXJbXTtcbiAgICBpdGVyYXRpb246IG51bWJlciA9IDA7XG4gICAgbnVtYmVyT2ZXb3JrZXJzID0gNjtcbiAgICBzY3JlZW5XaWR0aDogbnVtYmVyID0gMjUwO1xuICAgIHNjcmVlbkhlaWdodDogbnVtYmVyID0gMjUwO1xuXG4gICAgY29uc3RydWN0b3IgKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBzY3JlZW5XaWR0aD86IG51bWJlciwgc2NyZWVuSGVpZ2h0PzogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgICAgICB0aGlzLnNjcmVlbldpZHRoID0gc2NyZWVuV2lkdGg7XG4gICAgICAgIHRoaXMuc2NyZWVuSGVpZ2h0ID0gc2NyZWVuSGVpZ2h0O1xuXG4gICAgICAgIHRoaXMuaW1hZ2UgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIHRoaXMuc2NyZWVuV2lkdGgsIHRoaXMuc2NyZWVuSGVpZ2h0KTtcbiAgICAgICAgdGhpcy5pbWFnZURhdGEgPSB0aGlzLmltYWdlWydkYXRhJ107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNjcmVlbldpZHRoICogdGhpcy5zY3JlZW5IZWlnaHQgKiAzOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyLnB1c2goMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgcnVuICgpOiB2b2lkIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm51bWJlck9mV29ya2VyczsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgd29ya2VyID0gbmV3IFdvcmtlcignVHJhY2VyV29ya2VyLmpzJyk7XG5cbiAgICAgICAgICAgIHdvcmtlci5vbm1lc3NhZ2UgPSAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlcmF0aW9uKys7XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLml0ZXJhdGlvbik7XG5cbiAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IG1lc3NhZ2UuZGF0YTtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZGF0YS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcltqXSArPSBkYXRhW2pdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvcih2YXIgayA9IDAsIGogPSAwOyBrIDwgdGhpcy5zY3JlZW5XaWR0aCAqIHRoaXMuc2NyZWVuSGVpZ2h0ICogNDspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbWFnZURhdGFbaysrXSA9IHRoaXMuYnVmZmVyW2orK10gKiAyNTUgLyB0aGlzLml0ZXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbWFnZURhdGFbaysrXSA9IHRoaXMuYnVmZmVyW2orK10gKiAyNTUgLyB0aGlzLml0ZXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbWFnZURhdGFbaysrXSA9IHRoaXMuYnVmZmVyW2orK10gKiAyNTUgLyB0aGlzLml0ZXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbWFnZURhdGFbaysrXSA9IDI1NTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlWydkYXRhJ10uc2V0KHRoaXMuaW1hZ2VEYXRhKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuY3R4LnB1dEltYWdlRGF0YSh0aGlzLmltYWdlLCAwLCAwKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZShbdGhpcy5zY3JlZW5XaWR0aCwgdGhpcy5zY3JlZW5IZWlnaHRdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
