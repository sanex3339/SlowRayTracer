var Color_1=require("./Color/Color"),Ray_1=require("./Ray"),RGBColor_1=require("./Color/RGBColor"),Vector_1=require("./Vector"),Tracer=function(){function e(){this.raysPerPixel=1,this.screenWidth=250,this.screenHeight=250}return e.prototype.getColor=function(e,o){void 0===o&&(o=!0);var t=this.trace(e),r=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),n=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0));return null===t.owner?new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)):(r=this.getDiffuseColor(e,t,o),o&&(n=this.getReflectionColor(e,t)),r.add(n))},e.prototype.getDiffuseColor=function(e,o,t){void 0===t&&(t=!0);for(var r,n,i,a,l,c,s,g,C=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),d=0,V=this.scene.getLights();d<V.length;d++){var w=V[d];if("light"===o.ownerType)return o.owner.getMaterial().getColor();var _=this.getLightPower(o,w);if(r=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),n=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),i=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),a=Vector_1.Vector.normalized(Vector_1.Vector.substract(o.point,w.getPosition())),c=Math.max(0,-Vector_1.Vector.dot(a,o.owner.getNormal(o.point))),r=r.add(o.owner.getMaterial().getColor().multiple(w.getMaterial().getColor().scaled(_*c*o.owner.getMaterial().getLambertCoeff()))),t)for(var h=35,p=function(e){for(;;){var o=new Vector_1.Vector(Math.random()-.5,Math.random()-.5,Math.random()-.5);if(!(Vector_1.Vector.dot(o,o)>Math.pow(.5,2)))return o=Vector_1.Vector.normalized(o),Vector_1.Vector.dot(o,e)<0&&(o=Vector_1.Vector.inverse(o)),o}},u=0;h>u;++u){var R=p(o.owner.getNormal(o.point)),f=this.getColor(new Ray_1.Ray(o.point,R),!1),v=Vector_1.Vector.dot(R,o.owner.getNormal(o.point));n=n.add(o.owner.getMaterial().getColor().divide(Math.PI).multiple(f.scaled(v)))}l=Vector_1.Vector.reflect(a,o.owner.getNormal(o.point)),s=-Vector_1.Vector.dot(l,e.getDirection()),s>0&&(g=Math.pow(s,35),i=i.add(o.owner.getMaterial().getColor().multiple(w.getMaterial().getColor().scaled(_*g*o.owner.getMaterial().getPhongCoeff())))),C=C.add(r.add(n.divide(15))).add(i)}return C},e.prototype.getReflectionColor=function(e,o){var t,r;return e.setIteration(e.getIteration()-1),0===e.getIteration()||0===o.owner.getMaterial().getReflectionValue()?new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)):(r=Vector_1.Vector.reflect(e.getDirection(),o.owner.getNormal(o.point)),t=this.getColor(new Ray_1.Ray(o.point,r,e.getIteration())).scaled(o.owner.getMaterial().getReflectionValue()))},e.prototype.getPerspectiveVector=function(e,o,t,r){var n=this.scene.getCamera();return Vector_1.Vector.normalized(Vector_1.Vector.add(n.getForwardVector(),Vector_1.Vector.add(Vector_1.Vector.scaled(n.getRightVector(),n.recenterX(e)),Vector_1.Vector.scaled(n.getUpVector(),n.recenterY(o)))))},e.prototype.getLightPower=function(e,o){for(var t,r=10,n=o.getPower(),i=0,a=0;r>a;a++){t=o.getRandomPoint();var l=this.trace(new Ray_1.Ray(e.point,Vector_1.Vector.substract(Vector_1.Vector.substract(o.getPosition(),t),e.point)));null!==l.point&&l.owner===o&&(i+=(n-Vector_1.Vector.substract(Vector_1.Vector.substract(o.getPosition(),t),e.point).getLength()*(n/o.getFadeRadius()))/r)}return i},e.prototype.trace=function(e){for(var o,t={distance:0,point:null,owner:null,ownerType:null},r=this.scene.getObjects().concat(this.scene.getLights()),n=0,i=r;n<i.length;n++){var a=i[n];o=a.getIntersectData(e),o&&o.distance>0&&(null===t.owner||o.distance<t.distance)&&(t.distance=o.distance,t.point=o.point,t.owner=a,t.ownerType=a.getType())}return t},e.prototype.render=function(e,o,t){var r,n,i,a,l=.5;this.screenWidth=o,this.screenHeight=t;for(var c=0;t>c;c++)for(var s=0;o>s;s++){r=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),console.log(c,s);for(var g=0;g<this.raysPerPixel;g++)n=0,console.log(g),this.raysPerPixel>1&&(g%2?n+=Math.random()*l:n-=Math.random()*l),i=new Ray_1.Ray(this.scene.getCamera().getPosition(),this.getPerspectiveVector(s+n,c+n,o,t)),r=r.add(this.getColor(i));r=r.divide(this.raysPerPixel);for(var C in r)r[C]=Color_1.Color.sRGBEncode(r[C]);a=Color_1.Color.toRGB(r),e.fillStyle="rgb("+a.red+", "+a.green+", "+a.blue+")",e.fillRect(s,c,s+1,c+1)}},e.prototype.setScene=function(e){this.scene=e},e}();exports.Tracer=Tracer;
//# sourceMappingURL=data:application/json;base64,
