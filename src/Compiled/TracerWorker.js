var Camera_1=require("./Camera"),Color_1=require("./Color/Color"),Ray_1=require("./Ray"),RGBColor_1=require("./Color/RGBColor"),Scene_1=require("./Scene"),Sphere_1=require("./Objects/Sphere"),Vector_1=require("./Vector"),SphericalLight_1=require("./Lights/SphericalLight"),Material_1=require("./Material"),Polygon_1=require("./Objects/Polygon"),Tracer=function(){function e(){this.pixelSamples=4,this.shadowSamples=200,this.giSamples=200,this.screenWidth=250,this.screenHeight=250}return e.prototype.getColor=function(e,o){void 0===o&&(o=!0);var r=this.trace(e),t=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),n=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0));return null===r.owner?new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)):(t=this.getDiffuseColor(e,r,o),o&&(n=this.getReflectionColor(e,r)),t.add(n))},e.prototype.getDiffuseColor=function(e,o,r){void 0===r&&(r=!0);for(var t,n,l,a,i,c,_,s,w,C,V=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),g=0,d=this.scene.getLights();g<d.length;g++){var h=d[g];if("light"===o.ownerType)return o.owner.getMaterial().getColor();if(c=this.getLightPower(o,h),t=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),n=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),a=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),i=Vector_1.Vector.normalized(Vector_1.Vector.substract(o.point,h.getPosition())),s=-Vector_1.Vector.dot(i,o.normal),t=t.add(o.owner.getMaterial().getColor().multiple(h.getMaterial().getColor().scaled(c*s*o.owner.getMaterial().getLambertCoeff()))),r)for(var p=function(e){for(var o;;)if(o=new Vector_1.Vector(Math.random()-.5,Math.random()-.5,Math.random()-.5),!(Vector_1.Vector.dot(o,o)>1))return o=Vector_1.Vector.normalized(o),Vector_1.Vector.dot(o,e)<0&&(o=Vector_1.Vector.inverse(o)),o},R=0;R<this.giSamples;++R){var u=void 0,f=void 0;l=p(o.owner.getNormal(o.point)),u=this.getColor(new Ray_1.Ray(o.point,l),!1),f=Vector_1.Vector.dot(l,o.owner.getNormal(o.point)),n=n.add(o.owner.getMaterial().getColor().divide(Math.PI).multiple(u.scaled(f)))}_=Vector_1.Vector.reflect(i,o.normal),w=-Vector_1.Vector.dot(_,e.getDirection()),w>0&&(C=Math.pow(w,35),a=a.add(o.owner.getMaterial().getColor().multiple(h.getMaterial().getColor().scaled(c*C*o.owner.getMaterial().getPhongCoeff())))),V=V.add(t.add(n.divide(this.giSamples))).add(a)}return V},e.prototype.getReflectionColor=function(e,o){var r,t,n=o.owner.getMaterial().getReflectionValue();return e.setIteration(e.getIteration()-1),0===e.getIteration()||0===n?new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)):(t=Vector_1.Vector.reflect(e.getDirection(),o.normal),r=this.getColor(new Ray_1.Ray(o.point,t,e.getIteration())).scaled(n))},e.prototype.getPerspectiveVector=function(e,o,r,t){var n=this.scene.getCamera();return Vector_1.Vector.normalized(Vector_1.Vector.add(n.getForwardVector(),Vector_1.Vector.add(Vector_1.Vector.scaled(n.getRightVector(),n.recenterX(e)),Vector_1.Vector.scaled(n.getUpVector(),n.recenterY(o)))))},e.prototype.getLightPower=function(e,o){for(var r,t=o.getPower(),n=0,l=0;l<this.shadowSamples;l++){r=o.getRandomPoint();var a=this.trace(new Ray_1.Ray(e.point,Vector_1.Vector.substract(Vector_1.Vector.substract(o.getPosition(),r),e.point)));null!==a.point&&a.owner===o&&(n+=(t-Vector_1.Vector.substract(Vector_1.Vector.substract(o.getPosition(),r),e.point).getLength()*(t/o.getFadeRadius()))/this.shadowSamples)}return n},e.prototype.trace=function(e){for(var o,r={distance:0,point:null,normal:null,owner:null,ownerType:null},t=this.scene.getObjects().concat(this.scene.getLights()),n=0,l=t;n<l.length;n++){var a=l[n];o=a.getIntersectData(e),o&&o.distance>0&&(null===r.owner||o.distance<r.distance)&&(r.distance=o.distance,r.point=o.point,r.owner=a,r.ownerType=a.getType(),r.normal=r.owner.getNormal(r.point))}return r},e.prototype.render=function(e,o,r,t){var n,l,a,i,c=.5;this.screenWidth=e,this.screenHeight=o,n=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0));for(var _=0;_<this.pixelSamples;_++)l=0,this.pixelSamples>1&&(_%2?l+=Math.random()*c:l-=Math.random()*c),a=new Ray_1.Ray(this.scene.getCamera().getPosition(),this.getPerspectiveVector(r+l,t+l,e,o)),n=n.add(this.getColor(a));n=n.divide(this.pixelSamples);for(var s in n)n[s]=Color_1.Color.sRGBEncode(n[s]);i=Color_1.Color.toRGB(n),self.postMessage([r,t,i.red,i.green,i.blue])},e.prototype.setScene=function(e){this.scene=e},e}();onmessage=function(e){var o=e.data;"string"==typeof o&&(o=JSON.parse("["+o+"]"));var r=new Tracer;r.setScene(new Scene_1.Scene({camera:new Camera_1.Camera(new Vector_1.Vector(0,0,-699),new Vector_1.Vector(0,0,1),o[0],o[1]),lights:[new SphericalLight_1.SphericalLight(new Vector_1.Vector(0,640,0),1.2,50).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255))))],objects:[new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(700,-700,700),new Vector_1.Vector(-700,-700,700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,700),new Vector_1.Vector(700,-700,700),new Vector_1.Vector(700,700,700),new Vector_1.Vector(-700,700,700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,700,-700),new Vector_1.Vector(-700,700,700),new Vector_1.Vector(700,700,700),new Vector_1.Vector(700,700,-700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(700,-700,700),new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(700,700,-700),new Vector_1.Vector(700,700,700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(0,0,255)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(-700,-700,700),new Vector_1.Vector(-700,700,700),new Vector_1.Vector(-700,700,-700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,0,0)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(-700,700,-700),new Vector_1.Vector(700,700,-700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),0).setLambertCoeff(1)),new Sphere_1.Sphere(new Vector_1.Vector(-250,-500,450),200).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),1)),new Sphere_1.Sphere(new Vector_1.Vector(250,-500,400),200).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(0,255,0)),0))]})),r.render(o[0],o[1],o[2],o[3])};
//# sourceMappingURL=data:application/json;base64,
