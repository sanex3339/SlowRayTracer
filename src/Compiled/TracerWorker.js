var Camera_1=require("./Camera"),Color_1=require("./Color/Color"),Ray_1=require("./Ray"),RGBColor_1=require("./Color/RGBColor"),Scene_1=require("./Scene"),Sphere_1=require("./Objects/Sphere"),Vector_1=require("./Vector"),SphericalLight_1=require("./Lights/SphericalLight"),Material_1=require("./Material"),Polygon_1=require("./Objects/Polygon"),Tracer=function(){function e(){this.pixelSamples=4,this.shadowSamples=35,this.aoSamples=100,this.giSamples=35,this.screenWidth=250,this.screenHeight=250}return e.prototype.getColor=function(e,o){void 0===o&&(o=!0);var t=this.trace(e),r=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),a=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0));return null===t.owner?new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)):(r=this.getDiffuseColor(e,t,o),o&&(a=this.getReflectionColor(e,t)),r.add(a))},e.prototype.getDiffuseColor=function(e,o,t){void 0===t&&(t=!0);for(var r,a,n,l,i,c,s,C,_,w,V,g=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),d=0,h=this.scene.getLights();d<h.length;d++){var p=h[d];if("light"===o.ownerType)return o.owner.getMaterial().getColor();s=this.getLightPower(o,p),r=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),a=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),n=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),i=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),c=Vector_1.Vector.normalized(Vector_1.Vector.substract(o.point,p.getPosition())),_=-Vector_1.Vector.dot(c,o.normal),r=r.add(o.owner.getMaterial().getColor().multiple(p.getMaterial().getColor().scaled(s*_*o.owner.getMaterial().getLambertCoeff())));var M=function(e){var o=Math.random(),t=Math.random(),r=Math.acos(Math.sqrt(1-o)),a=2*Math.PI*t,n=Math.sin(r)*Math.cos(a),l=Math.cos(r),i=Math.sin(r)*Math.sin(a),c=e,s=e;s=Math.abs(s.getCoordinates().x)<=Math.abs(s.getCoordinates().y)&&Math.abs(s.getCoordinates().x)<=Math.abs(s.getCoordinates().z)?new Vector_1.Vector(1,s.getCoordinates().y,s.getCoordinates().z):Math.abs(s.getCoordinates().y)<=Math.abs(s.getCoordinates().x)&&Math.abs(s.getCoordinates().x)<=Math.abs(s.getCoordinates().z)?new Vector_1.Vector(s.getCoordinates().x,1,s.getCoordinates().z):new Vector_1.Vector(s.getCoordinates().x,s.getCoordinates().y,1);var C=Vector_1.Vector.normalized(new Vector_1.Vector(Math.pow(s.getCoordinates().x,c.getCoordinates().x),Math.pow(s.getCoordinates().y,c.getCoordinates().y),Math.pow(s.getCoordinates().z,c.getCoordinates().z))),_=Vector_1.Vector.normalized(new Vector_1.Vector(Math.pow(C.getCoordinates().x,c.getCoordinates().x),Math.pow(C.getCoordinates().y,c.getCoordinates().y),Math.pow(C.getCoordinates().z,c.getCoordinates().z))),w=Vector_1.Vector.add(Vector_1.Vector.add(Vector_1.Vector.scaled(C,n),Vector_1.Vector.scaled(c,l)),Vector_1.Vector.scaled(_,i));return Vector_1.Vector.normalized(w)};if(t)for(var R=0;R<this.giSamples;++R){var u=void 0,m=void 0;l=M(o.owner.getNormal(o.point)),u=this.getColor(new Ray_1.Ray(o.point,l),!1),m=Vector_1.Vector.dot(l,o.owner.getNormal(o.point)),a=a.add(o.owner.getMaterial().getColor().divide(Math.PI).multiple(u.scaled(m)))}for(var f=0,R=0;R<this.aoSamples;R++){var y=M(o.owner.getNormal(o.point)),B=this.trace(new Ray_1.Ray(o.point,y));null!==B.point&&(B.distance>250||f++)}C=Vector_1.Vector.reflect(c,o.normal),w=-Vector_1.Vector.dot(C,e.getDirection()),w>0&&(V=Math.pow(w,35),i=i.add(o.owner.getMaterial().getColor().multiple(p.getMaterial().getColor().scaled(s*V*o.owner.getMaterial().getPhongCoeff())))),g=g.add(r.add(a.divide(this.giSamples))).add(i),g=g.substract(g.scaled(.3*f/this.aoSamples))}return g},e.prototype.getReflectionColor=function(e,o){var t,r,a=e.getIteration(),n=o.owner.getMaterial().getReflectionValue();return e.setIteration(--a),0===a||0===n?new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)):(r=Vector_1.Vector.reflect(e.getDirection(),o.normal),t=this.getColor(new Ray_1.Ray(o.point,r,a)).scaled(n))},e.prototype.getPerspectiveVector=function(e,o){var t=this.scene.getCamera();return Vector_1.Vector.normalized(Vector_1.Vector.add(t.getForwardVector(),Vector_1.Vector.add(Vector_1.Vector.scaled(t.getRightVector(),t.recenterX(e)),Vector_1.Vector.scaled(t.getUpVector(),t.recenterY(o)))))},e.prototype.getLightPower=function(e,o){for(var t,r,a=o.getPower(),n=0,l=0;l<this.shadowSamples;l++)t=o.getRandomPoint(),r=this.trace(new Ray_1.Ray(e.point,Vector_1.Vector.substract(Vector_1.Vector.substract(o.getPosition(),t),e.point))),null!==r.point&&r.owner===o&&(n+=(a-Vector_1.Vector.substract(Vector_1.Vector.substract(o.getPosition(),t),e.point).getLength()*(a/o.getFadeRadius()))/this.shadowSamples);return n},e.prototype.trace=function(e){for(var o,t={distance:0,point:null,normal:null,owner:null,ownerType:null},r=this.scene.getObjects().concat(this.scene.getLights()),a=0,n=r;a<n.length;a++){var l=n[a];o=l.getIntersectData(e),o&&o.distance>0&&(null===t.owner||o.distance<t.distance)&&(t.distance=o.distance,t.point=o.point,t.owner=l,t.ownerType=l.getType(),t.normal=t.owner.getNormal(t.point))}return t},e.prototype.render=function(e,o,t,r){var a,n,l,i,c=.5;this.screenWidth=e,this.screenHeight=o,a=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0));for(var s=0;s<this.pixelSamples;s++)n=0,this.pixelSamples>1&&(s%2?n+=Math.random()*c:n-=Math.random()*c),l=new Ray_1.Ray(this.scene.getCamera().getPosition(),this.getPerspectiveVector(t+n,r+n)),a=a.add(this.getColor(l));a=a.divide(this.pixelSamples);for(var C in a)a[C]=Color_1.Color.sRGBEncode(a[C]);i=Color_1.Color.toRGB(a),self.postMessage([t,r,i.red,i.green,i.blue])},e.prototype.setScene=function(e){this.scene=e},e}();onmessage=function(e){var o=e.data;"string"==typeof o&&(o=JSON.parse("["+o+"]"));var t=new Tracer;t.setScene(new Scene_1.Scene({camera:new Camera_1.Camera(new Vector_1.Vector(0,0,-699),new Vector_1.Vector(0,0,1),o[0],o[1]),lights:[new SphericalLight_1.SphericalLight(new Vector_1.Vector(0,640,0),.7,50).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255)))),new SphericalLight_1.SphericalLight(new Vector_1.Vector(0,0,0),.7,150).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,235,200))))],objects:[new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(700,-700,700),new Vector_1.Vector(-700,-700,700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,700),new Vector_1.Vector(700,-700,700),new Vector_1.Vector(700,700,700),new Vector_1.Vector(-700,700,700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,700,-700),new Vector_1.Vector(-700,700,700),new Vector_1.Vector(700,700,700),new Vector_1.Vector(700,700,-700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(700,-700,700),new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(700,700,-700),new Vector_1.Vector(700,700,700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(79,166,242)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(-700,-700,700),new Vector_1.Vector(-700,700,700),new Vector_1.Vector(-700,700,-700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(245,130,130)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(-700,700,-700),new Vector_1.Vector(700,700,-700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),0).setLambertCoeff(1)),new Sphere_1.Sphere(new Vector_1.Vector(-250,-500,450),200).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),1)),new Sphere_1.Sphere(new Vector_1.Vector(250,-500,400),200).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(0,255,0)),0))]})),t.render(o[0],o[1],o[2],o[3])};
//# sourceMappingURL=data:application/json;base64,
