var Camera_1=require("./Camera"),Color_1=require("./Color/Color"),Ray_1=require("./Ray"),RGBColor_1=require("./Color/RGBColor"),Scene_1=require("./Scene"),Sphere_1=require("./Objects/Sphere"),Vector_1=require("./Vector"),SphericalLight_1=require("./Lights/SphericalLight"),Material_1=require("./Material"),Polygon_1=require("./Objects/Polygon"),Tracer=function(){function e(){this.pixelSamples=4,this.shadowSamples=65,this.giSamples=35,this.screenWidth=250,this.screenHeight=250}return e.prototype.getColor=function(e,o){void 0===o&&(o=!0);var r=this.trace(e),t=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),n=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0));return null===r.owner?new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)):(t=this.getDiffuseColor(e,r,o),o&&(n=this.getReflectionColor(e,r)),t.add(n))},e.prototype.getDiffuseColor=function(e,o,r){void 0===r&&(r=!0);for(var t,n,a,l,c,i,_,s,w,V,C=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),g=0,h=this.scene.getLights();g<h.length;g++){var d=h[g];if("light"===o.ownerType)return o.owner.getMaterial().getColor();if(i=this.getLightPower(o,d),t=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),n=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),l=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),c=Vector_1.Vector.normalized(Vector_1.Vector.substract(o.point,d.getPosition())),s=-Vector_1.Vector.dot(c,o.normal),t=t.add(o.owner.getMaterial().getColor().multiple(d.getMaterial().getColor().scaled(i*s*o.owner.getMaterial().getLambertCoeff()))),r)for(var p=function(e){var o,r,t,n=Math.random(),a=Math.random(),l=Math.sqrt(n),c=Math.sqrt(1-n),i=2*Math.PI*a,_=new Vector_1.Vector(l*Math.cos(i),c,l*Math.sin(i));return t=0==e.getCoordinates().x?new Vector_1.Vector(1,0,0):Vector_1.Vector.normalized(new Vector_1.Vector(e.getCoordinates().z,0,-e.getCoordinates().x)),r=Vector_1.Vector.inverse(Vector_1.Vector.cross(t,e)),o=new Vector_1.Vector(Vector_1.Vector.dot(t,_),Vector_1.Vector.dot(e,_),Vector_1.Vector.dot(r,_)),Vector_1.Vector.normalized(o)},R=0;R<this.giSamples;++R){var M=void 0,u=void 0;a=p(o.owner.getNormal(o.point)),M=this.getColor(new Ray_1.Ray(o.point,a),!1),u=Vector_1.Vector.dot(a,o.owner.getNormal(o.point)),n=n.add(o.owner.getMaterial().getColor().divide(Math.PI).multiple(M.scaled(u)))}_=Vector_1.Vector.reflect(c,o.normal),w=-Vector_1.Vector.dot(_,e.getDirection()),w>0&&(V=Math.pow(w,35),l=l.add(o.owner.getMaterial().getColor().multiple(d.getMaterial().getColor().scaled(i*V*o.owner.getMaterial().getPhongCoeff())))),C=C.add(t.add(n.divide(this.giSamples))).add(l)}return C},e.prototype.getReflectionColor=function(e,o){var r,t,n=e.getIteration(),a=o.owner.getMaterial().getReflectionValue();return e.setIteration(--n),0===n||0===a?new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)):(t=Vector_1.Vector.reflect(e.getDirection(),o.normal),r=this.getColor(new Ray_1.Ray(o.point,t,n)).scaled(a))},e.prototype.getPerspectiveVector=function(e,o){var r=this.scene.getCamera();return Vector_1.Vector.normalized(Vector_1.Vector.add(r.getForwardVector(),Vector_1.Vector.add(Vector_1.Vector.scaled(r.getRightVector(),r.recenterX(e)),Vector_1.Vector.scaled(r.getUpVector(),r.recenterY(o)))))},e.prototype.getLightPower=function(e,o){for(var r,t,n=o.getPower(),a=0,l=0;l<this.shadowSamples;l++)r=o.getRandomPoint(),t=this.trace(new Ray_1.Ray(e.point,Vector_1.Vector.substract(Vector_1.Vector.substract(o.getPosition(),r),e.point))),null!==t.point&&t.owner===o&&(a+=(n-Vector_1.Vector.substract(Vector_1.Vector.substract(o.getPosition(),r),e.point).getLength()*(n/o.getFadeRadius()))/this.shadowSamples);return a},e.prototype.trace=function(e){for(var o,r={distance:0,point:null,normal:null,owner:null,ownerType:null},t=this.scene.getObjects().concat(this.scene.getLights()),n=0,a=t;n<a.length;n++){var l=a[n];o=l.getIntersectData(e),o&&o.distance>0&&(null===r.owner||o.distance<r.distance)&&(r.distance=o.distance,r.point=o.point,r.owner=l,r.ownerType=l.getType(),r.normal=r.owner.getNormal(r.point))}return r},e.prototype.render=function(e,o,r,t){var n,a,l,c,i=.5;this.screenWidth=e,this.screenHeight=o,n=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0));for(var _=0;_<this.pixelSamples;_++)a=0,this.pixelSamples>1&&(_%2?a+=Math.random()*i:a-=Math.random()*i),l=new Ray_1.Ray(this.scene.getCamera().getPosition(),this.getPerspectiveVector(r+a,t+a)),n=n.add(this.getColor(l));n=n.divide(this.pixelSamples);for(var s in n)n[s]=Color_1.Color.sRGBEncode(n[s]);c=Color_1.Color.toRGB(n),self.postMessage([r,t,c.red,c.green,c.blue])},e.prototype.setScene=function(e){this.scene=e},e}();onmessage=function(e){var o=e.data;"string"==typeof o&&(o=JSON.parse("["+o+"]"));var r=new Tracer;r.setScene(new Scene_1.Scene({camera:new Camera_1.Camera(new Vector_1.Vector(0,0,-699),new Vector_1.Vector(0,0,1),o[0],o[1]),lights:[new SphericalLight_1.SphericalLight(new Vector_1.Vector(0,640,0),.7,50).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255)))),new SphericalLight_1.SphericalLight(new Vector_1.Vector(0,0,0),.7,150).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,235,200))))],objects:[new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(700,-700,700),new Vector_1.Vector(-700,-700,700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,700),new Vector_1.Vector(700,-700,700),new Vector_1.Vector(700,700,700),new Vector_1.Vector(-700,700,700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,700,-700),new Vector_1.Vector(-700,700,700),new Vector_1.Vector(700,700,700),new Vector_1.Vector(700,700,-700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(700,-700,700),new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(700,700,-700),new Vector_1.Vector(700,700,700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(79,166,242)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(-700,-700,700),new Vector_1.Vector(-700,700,700),new Vector_1.Vector(-700,700,-700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(245,130,130)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(-700,700,-700),new Vector_1.Vector(700,700,-700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),0).setLambertCoeff(1)),new Sphere_1.Sphere(new Vector_1.Vector(-250,-500,450),200).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),1)),new Sphere_1.Sphere(new Vector_1.Vector(250,-500,400),200).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(0,255,0)),0))]})),r.render(o[0],o[1],o[2],o[3])};
//# sourceMappingURL=data:application/json;base64,
