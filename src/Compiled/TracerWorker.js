var Camera_1=require("./Camera"),Color_1=require("./Color/Color"),Ray_1=require("./Ray"),RGBColor_1=require("./Color/RGBColor"),Scene_1=require("./Scene"),Sphere_1=require("./Objects/Sphere"),Vector_1=require("./Vector"),SphericalLight_1=require("./Lights/SphericalLight"),Material_1=require("./Material"),Polygon_1=require("./Objects/Polygon"),Tracer=function(){function e(){this.raysPerPixel=8,this.screenWidth=250,this.screenHeight=250}return e.prototype.getColor=function(e,o){void 0===o&&(o=!0);var r=this.trace(e),t=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),n=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0));return null===r.owner?new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)):(t=this.getDiffuseColor(e,r,o),o&&(n=this.getReflectionColor(e,r)),t.add(n))},e.prototype.getDiffuseColor=function(e,o,r){void 0===r&&(r=!0);for(var t,n,a,l,c,i,_,w,C=50,V=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),s=0,g=this.scene.getLights();s<g.length;s++){var d=g[s];if("light"===o.ownerType)return o.owner.getMaterial().getColor();var h=this.getLightPower(o,d);if(t=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),n=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),a=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),l=Vector_1.Vector.normalized(Vector_1.Vector.substract(o.point,d.getPosition())),i=-Vector_1.Vector.dot(l,o.normal),t=t.add(o.owner.getMaterial().getColor().multiple(d.getMaterial().getColor().scaled(h*i*o.owner.getMaterial().getLambertCoeff()))),r)for(var R=function(e){for(;;){var o=new Vector_1.Vector(Math.random()-.5,Math.random()-.5,Math.random()-.5);if(!(Vector_1.Vector.dot(o,o)>1))return o=Vector_1.Vector.normalized(o),Vector_1.Vector.dot(o,e)<0&&(o=Vector_1.Vector.inverse(o)),o}},p=0;C>p;++p){var u=R(o.owner.getNormal(o.point)),f=this.getColor(new Ray_1.Ray(o.point,u),!1),M=Vector_1.Vector.dot(u,o.owner.getNormal(o.point));n=n.add(o.owner.getMaterial().getColor().divide(Math.PI).multiple(f.scaled(M)))}c=Vector_1.Vector.reflect(l,o.normal),_=-Vector_1.Vector.dot(c,e.getDirection()),_>0&&(w=Math.pow(_,35),a=a.add(o.owner.getMaterial().getColor().multiple(d.getMaterial().getColor().scaled(h*w*o.owner.getMaterial().getPhongCoeff())))),V=V.add(t.add(n.divide(C))).add(a)}return V},e.prototype.getReflectionColor=function(e,o){var r,t,n=o.owner.getMaterial().getReflectionValue();return e.setIteration(e.getIteration()-1),0===e.getIteration()||0===n?new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)):(t=Vector_1.Vector.reflect(e.getDirection(),o.normal),r=this.getColor(new Ray_1.Ray(o.point,t,e.getIteration())).scaled(n))},e.prototype.getPerspectiveVector=function(e,o,r,t){var n=this.scene.getCamera();return Vector_1.Vector.normalized(Vector_1.Vector.add(n.getForwardVector(),Vector_1.Vector.add(Vector_1.Vector.scaled(n.getRightVector(),n.recenterX(e)),Vector_1.Vector.scaled(n.getUpVector(),n.recenterY(o)))))},e.prototype.getLightPower=function(e,o){for(var r,t=200,n=o.getPower(),a=0,l=0;t>l;l++){r=o.getRandomPoint();var c=this.trace(new Ray_1.Ray(e.point,Vector_1.Vector.substract(Vector_1.Vector.substract(o.getPosition(),r),e.point)));null!==c.point&&c.owner===o&&(a+=(n-Vector_1.Vector.substract(Vector_1.Vector.substract(o.getPosition(),r),e.point).getLength()*(n/o.getFadeRadius()))/t)}return a},e.prototype.trace=function(e){for(var o,r={distance:0,point:null,normal:null,owner:null,ownerType:null},t=this.scene.getObjects().concat(this.scene.getLights()),n=0,a=t;n<a.length;n++){var l=a[n];o=l.getIntersectData(e),o&&o.distance>0&&(null===r.owner||o.distance<r.distance)&&(r.distance=o.distance,r.point=o.point,r.owner=l,r.ownerType=l.getType(),r.normal=r.owner.getNormal(r.point))}return r},e.prototype.render=function(e,o,r,t){var n,a,l,c,i=.5;this.screenWidth=e,this.screenHeight=o,n=new Color_1.Color(new RGBColor_1.RGBColor(0,0,0));for(var _=0;_<this.raysPerPixel;_++)a=0,this.raysPerPixel>1&&(_%2?a+=Math.random()*i:a-=Math.random()*i),l=new Ray_1.Ray(this.scene.getCamera().getPosition(),this.getPerspectiveVector(r+a,t+a,e,o)),n=n.add(this.getColor(l));n=n.divide(this.raysPerPixel);for(var w in n)n[w]=Color_1.Color.sRGBEncode(n[w]);c=Color_1.Color.toRGB(n),self.postMessage([r,t,c.red,c.green,c.blue])},e.prototype.setScene=function(e){this.scene=e},e}();onmessage=function(e){var o=e.data;"string"==typeof o&&(o=JSON.parse("["+o+"]"));var r=new Tracer;r.setScene(new Scene_1.Scene({camera:new Camera_1.Camera(new Vector_1.Vector(0,0,-699),new Vector_1.Vector(0,0,1),o[0],o[1]),lights:[new SphericalLight_1.SphericalLight(new Vector_1.Vector(0,640,0),1.2,50).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255))))],objects:[new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(700,-700,700),new Vector_1.Vector(-700,-700,700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,700),new Vector_1.Vector(700,-700,700),new Vector_1.Vector(700,700,700),new Vector_1.Vector(-700,700,700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,700,-700),new Vector_1.Vector(-700,700,700),new Vector_1.Vector(700,700,700),new Vector_1.Vector(700,700,-700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,255,255)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(700,-700,700),new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(700,700,-700),new Vector_1.Vector(700,700,700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(0,0,255)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(-700,-700,700),new Vector_1.Vector(-700,700,700),new Vector_1.Vector(-700,700,-700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,0,0)),0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(-700,700,-700),new Vector_1.Vector(700,700,-700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),0).setLambertCoeff(1)),new Sphere_1.Sphere(new Vector_1.Vector(-250,-500,450),200).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(0,0,0)),1)),new Sphere_1.Sphere(new Vector_1.Vector(250,-500,400),200).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(0,255,0)),0))]})),r.render(o[0],o[1],o[2],o[3])};
//# sourceMappingURL=data:application/json;base64,
