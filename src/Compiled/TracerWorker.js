var Camera_1=require("./Camera"),Color_1=require("./Color/Color"),IntersectPoint_1=require("./IntersectPoint"),Material_1=require("./Material"),Plane_1=require("./Objects/Plane"),Ray_1=require("./Ray"),RGBColor_1=require("./Color/RGBColor"),Scene_1=require("./Scene"),Sphere_1=require("./Objects/Sphere"),Vector_1=require("./Vector"),FloatColor_1=require("./Color/FloatColor"),Tracer=function(){function e(){this.buffer=[],this.screenWidth=250,this.screenHeight=250;for(var e=0;e<this.screenWidth*this.screenHeight*3;e++)this.buffer.push(Color_1.Color.black)}return e.prototype.cosineSampleHemisphere=function(e){var t,r,o=Math.random(),a=Math.random(),n=Math.sqrt(o),c=2*Math.PI*a;return t=Math.abs(e.getCoordinates().x)<.5?Vector_1.Vector.cross(e,new Vector_1.Vector(1,0,0)):Vector_1.Vector.cross(e,new Vector_1.Vector(0,1,0)),r=Vector_1.Vector.cross(e,t),Vector_1.Vector.add(Vector_1.Vector.scale(e,Math.sqrt(1-o)),Vector_1.Vector.add(Vector_1.Vector.scale(t,n*Math.cos(c)),Vector_1.Vector.scale(r,n*Math.sin(c))))},e.prototype.getColor=function(e){var t=this.trace(e),r=Color_1.Color.black,o=Color_1.Color.black,a=e.getIteration();return e.setIteration(--a),0===a?Color_1.Color.black:t.getIntersect()?(r=this.getDiffuseColor(e,t),o=this.getReflectionColor(e,t),r.add(o)):Color_1.Color.black},e.prototype.getDiffuseColor=function(e,t,r){void 0===r&&(r=!0);for(var o,a=Color_1.Color.black,n=(Color_1.Color.black,0),c=this.scene.getObjects();n<c.length;n++){var i=c[n];0!==i.getMaterial().getEmissionValue()}o=0===t.getOwner().getMaterial().getEmissionValue()?0:.9;var l=a.add(t.getOwner().getMaterial().getColor().add(t.getOwner().getMaterial().getEmission()));return Math.random()<o?l:this.getColor(new Ray_1.Ray(t.getHitPoint(),this.cosineSampleHemisphere(t.getOwner().getNormal(t.getHitPoint())),e.getIteration())).multiple(l)},e.prototype.getReflectionColor=function(e,t){var r,o,a=t.getOwner().getMaterial().getReflectionValue();return 0===a?Color_1.Color.black:(o=Vector_1.Vector.reflect(e.getDirection(),t.getNormal()),r=this.getColor(new Ray_1.Ray(t.getHitPoint(),o,e.getIteration())).scaled(a))},e.prototype.getPerspectiveVector=function(e,t){var r=this.scene.getCamera();return Vector_1.Vector.normalize(Vector_1.Vector.add(r.getForwardVector(),Vector_1.Vector.add(Vector_1.Vector.scale(r.getRightVector(),r.recenterX(e)),Vector_1.Vector.scale(r.getUpVector(),r.recenterY(t)))))},e.prototype.getLightPower=function(e,t,r){var o=r.getRandomPoint(),a=Math.sqrt(1-Math.pow(r.getRadius(),2)/Vector_1.Vector.dot(Vector_1.Vector.substract(t.getHitPoint(),r.getPosition()),Vector_1.Vector.substract(t.getHitPoint(),r.getPosition()))),n=this.trace(new Ray_1.Ray(t.getHitPoint(),Vector_1.Vector.substract(Vector_1.Vector.substract(r.getPosition(),o),t.getHitPoint())));if(n.getIntersect()&&n.getOwner().getMaterial().getEmissionValue()>0){var c=2*Math.PI*(1-a),i=Vector_1.Vector.dot(t.getNormal(),e.getDirection())<0?t.getNormal():Vector_1.Vector.scale(t.getNormal(),-1);return t.getOwner().getMaterial().getColor().add(r.getMaterial().getEmission().scaled(Vector_1.Vector.dot(o,i)).scaled(c)).scaled(1/Math.PI)}return Color_1.Color.black},e.prototype.trace=function(e){for(var t,r=new IntersectPoint_1.IntersectPoint,o=1/0,a=this.scene.getObjects(),n=0,c=a;n<c.length;n++){var i=c[n];t=i.getIntersectData(e),t&&t.distance<o&&(o=t.distance,r.setIntersect(),r.setHitPoint(t.hitPoint),r.setNormal(t.normal),r.setDistanceFromOrigin(t.distance),r.setOwner(i))}return r},e.prototype.render=function(e,t){var r,o,a,n=.5;for(this.screenWidth=e,this.screenHeight=t;;){r=[];for(var c=0;1>c;c++)for(var i=0,l=0;l<this.screenHeight;l++)for(var s=0;s<this.screenWidth;s++){o=0,Math.random()>.5?o+=Math.random()*n:o-=Math.random()*n,a=new Ray_1.Ray(this.scene.getCamera().getPosition(),this.getPerspectiveVector(s+o,l+o)),this.buffer[i]=Color_1.Color.black.add(this.getColor(a));for(var _ in this.buffer[i].getColor())this.buffer[i][_]=Color_1.Color.sRGBEncode(this.buffer[i][_]);r.push(this.buffer[i].getColor().red),r.push(this.buffer[i].getColor().green),r.push(this.buffer[i].getColor().blue),i++}for(var i=0;i<this.buffer.length;i++)this.buffer[i].getColor().red=0,this.buffer[i].getColor().green=0,this.buffer[i].getColor().blue=0;self.postMessage(r)}},e.prototype.setScene=function(e){this.scene=e},e}();onmessage=function(e){var t=e.data;"string"==typeof t&&(t=JSON.parse("["+t+"]"));var r=new Tracer;r.setScene(new Scene_1.Scene({camera:new Camera_1.Camera(new Vector_1.Vector(0,0,-699),new Vector_1.Vector(0,0,1),t[0],t[1]),objects:[new Sphere_1.Sphere(new Vector_1.Vector(0,630,0),60).setMaterial(new Material_1.Material(Color_1.Color.gray,new Color_1.Color(new FloatColor_1.FloatColor(400,400,400)))),new Plane_1.Plane(new Vector_1.Vector(0,1,0),new Vector_1.Vector(0,-700,0)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(191.25,191.25,191.25))).setLambertCoeff(1)),new Plane_1.Plane(new Vector_1.Vector(0,-1,0),new Vector_1.Vector(0,700,0)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(191.25,191.25,191.25))).setLambertCoeff(1)),new Plane_1.Plane(new Vector_1.Vector(-1,0,0),new Vector_1.Vector(700,0,0)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(76.5,255,25.5))).setLambertCoeff(1)),new Plane_1.Plane(new Vector_1.Vector(1,0,0),new Vector_1.Vector(-700,0,0)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,76.5,25.5))).setLambertCoeff(1)),new Plane_1.Plane(new Vector_1.Vector(0,0,-1),new Vector_1.Vector(0,0,700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(191.25,191.25,191.25))).setLambertCoeff(1)),new Plane_1.Plane(new Vector_1.Vector(0,0,1),new Vector_1.Vector(0,0,-700)).setMaterial(new Material_1.Material(Color_1.Color.black).setLambertCoeff(1)),new Sphere_1.Sphere(new Vector_1.Vector(0,-300,400),400).setMaterial(new Material_1.Material(Color_1.Color.gray))]})),r.render(t[0],t[1])};
//# sourceMappingURL=data:application/json;base64,
