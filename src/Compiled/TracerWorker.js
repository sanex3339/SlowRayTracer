var AbstractLight_1=require("./Lights/AbstractLight"),Camera_1=require("./Camera"),Color_1=require("./Color/Color"),IntersectPoint_1=require("./IntersectPoint"),Material_1=require("./Material"),Plane_1=require("./Objects/Plane"),Ray_1=require("./Ray"),RGBColor_1=require("./Color/RGBColor"),Scene_1=require("./Scene"),Sphere_1=require("./Objects/Sphere"),SphericalLight_1=require("./Lights/SphericalLight"),Vector_1=require("./Vector"),Tracer=function(){function e(){this.buffer=[],this.screenWidth=250,this.screenHeight=250;for(var e=0;e<this.screenWidth*this.screenHeight*3;e++)this.buffer.push(Color_1.Color.black)}return e.prototype.cosineSampleHemisphere=function(e){var t,r,o=Math.random(),a=Math.random(),i=Math.sqrt(o),c=2*Math.PI*a;return t=Math.abs(e.getCoordinates().x)<.5?Vector_1.Vector.cross(e,new Vector_1.Vector(1,0,0)):Vector_1.Vector.cross(e,new Vector_1.Vector(0,1,0)),r=Vector_1.Vector.cross(e,t),Vector_1.Vector.add(Vector_1.Vector.scale(e,Math.sqrt(1-o)),Vector_1.Vector.add(Vector_1.Vector.scale(t,i*Math.cos(c)),Vector_1.Vector.scale(r,i*Math.sin(c))))},e.prototype.getColor=function(e){var t=this.trace(e),r=Color_1.Color.black,o=Color_1.Color.black,a=e.getIteration();return e.setIteration(--a),0===a?Color_1.Color.black:t.getIntersect()?(r=this.getDiffuseColor(e,t),o=this.getReflectionColor(e,t),r.add(o)):Color_1.Color.black},e.prototype.getDiffuseColor=function(e,t,r){void 0===r&&(r=!0);for(var o,a,i,c,n,l,s,g,_,h,V=Color_1.Color.black,C=0,w=this.scene.getLights();C<w.length;C++){var f=w[C];if(t.getOwner()instanceof AbstractLight_1.AbstractLight)return t.getOwner().getMaterial().getColor();l=this.getLightPower(t,f),o=Color_1.Color.black,a=Color_1.Color.black,i=Color_1.Color.black,n=Vector_1.Vector.normalize(Vector_1.Vector.substract(t.getHitPoint(),f.getPosition()));var u=void 0;c=this.cosineSampleHemisphere(t.getOwner().getNormal(t.getHitPoint())),u=this.getColor(new Ray_1.Ray(t.getHitPoint(),c,e.getIteration())),i=i.add(u),g=-Vector_1.Vector.dot(n,t.getNormal()),o=o.add(t.getOwner().getMaterial().getColor().add(i).multiple(f.getMaterial().getColor().scaled(l*g*t.getOwner().getMaterial().getLambertCoeff()))),s=Vector_1.Vector.reflect(n,t.getNormal()),_=-Vector_1.Vector.dot(s,e.getDirection()),_>0&&(h=Math.pow(_,35),a=a.add(t.getOwner().getMaterial().getColor().multiple(f.getMaterial().getColor().scaled(l*h*t.getOwner().getMaterial().getPhongCoeff())))),V=V.add(o.add(a))}return V},e.prototype.getReflectionColor=function(e,t){var r,o,a=t.getOwner().getMaterial().getReflectionValue();return 0===a?Color_1.Color.black:(o=Vector_1.Vector.reflect(e.getDirection(),t.getNormal()),r=this.getColor(new Ray_1.Ray(t.getHitPoint(),o,e.getIteration())).scaled(a))},e.prototype.getPerspectiveVector=function(e,t){var r=this.scene.getCamera();return Vector_1.Vector.normalize(Vector_1.Vector.add(r.getForwardVector(),Vector_1.Vector.add(Vector_1.Vector.scale(r.getRightVector(),r.recenterX(e)),Vector_1.Vector.scale(r.getUpVector(),r.recenterY(t)))))},e.prototype.getLightPower=function(e,t){var r,o,a=t.getPower(),i=0;return r=t.getRandomPoint(),o=this.trace(new Ray_1.Ray(e.getHitPoint(),Vector_1.Vector.substract(Vector_1.Vector.substract(t.getPosition(),r),e.getHitPoint()))),o.getIntersect()&&o.getOwner()instanceof AbstractLight_1.AbstractLight&&(i+=a-Vector_1.Vector.substract(Vector_1.Vector.substract(t.getPosition(),r),e.getHitPoint()).getLength()*(a/t.getFadeRadius())),i},e.prototype.trace=function(e){for(var t,r=new IntersectPoint_1.IntersectPoint,o=1/0,a=this.scene.getObjects().concat(this.scene.getLights()),i=0,c=a;i<c.length;i++){var n=c[i];t=n.getIntersectData(e),t&&t.distance<o&&(o=t.distance,r.setIntersect(),r.setHitPoint(t.hitPoint),r.setNormal(t.normal),r.setDistanceFromOrigin(t.distance),r.setOwner(n))}return r},e.prototype.render=function(e,t){var r,o,a,i=.5;for(this.screenWidth=e,this.screenHeight=t;;){r=[];for(var c=0;1>c;c++)for(var n=0,l=0;l<this.screenHeight;l++)for(var s=0;s<this.screenWidth;s++){o=0,Math.random()>.5?o+=Math.random()*i:o-=Math.random()*i,a=new Ray_1.Ray(this.scene.getCamera().getPosition(),this.getPerspectiveVector(s+o,l+o)),this.buffer[n]=Color_1.Color.black.add(this.getColor(a));for(var g in this.buffer[n].getColor())this.buffer[n][g]=Color_1.Color.sRGBEncode(this.buffer[n][g]);r.push(this.buffer[n].getColor().red),r.push(this.buffer[n].getColor().green),r.push(this.buffer[n].getColor().blue),n++}for(var n=0;n<this.buffer.length;n++)this.buffer[n].getColor().red=0,this.buffer[n].getColor().green=0,this.buffer[n].getColor().blue=0;self.postMessage(r)}},e.prototype.setScene=function(e){this.scene=e},e}();onmessage=function(e){var t=e.data;"string"==typeof t&&(t=JSON.parse("["+t+"]"));var r=new Tracer;r.setScene(new Scene_1.Scene({camera:new Camera_1.Camera(new Vector_1.Vector(0,0,-699),new Vector_1.Vector(0,0,1),t[0],t[1]),lights:[new SphericalLight_1.SphericalLight(new Vector_1.Vector(0,600,0),1,100).setMaterial(new Material_1.Material(Color_1.Color.white)),new SphericalLight_1.SphericalLight(new Vector_1.Vector(0,0,0),.6,150).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,235,200))))],objects:[new Plane_1.Plane(new Vector_1.Vector(0,1,0),new Vector_1.Vector(0,-700,0)).setMaterial(new Material_1.Material(Color_1.Color.white,0)),new Plane_1.Plane(new Vector_1.Vector(0,-1,0),new Vector_1.Vector(0,700,0)).setMaterial(new Material_1.Material(Color_1.Color.white,0)),new Plane_1.Plane(new Vector_1.Vector(-1,0,0),new Vector_1.Vector(700,0,0)).setMaterial(new Material_1.Material(Color_1.Color.blue,0)),new Plane_1.Plane(new Vector_1.Vector(1,0,0),new Vector_1.Vector(-700,0,0)).setMaterial(new Material_1.Material(Color_1.Color.red,0)),new Plane_1.Plane(new Vector_1.Vector(0,0,-1),new Vector_1.Vector(0,0,700)).setMaterial(new Material_1.Material(Color_1.Color.white,0)),new Plane_1.Plane(new Vector_1.Vector(0,0,1),new Vector_1.Vector(0,0,-700)).setMaterial(new Material_1.Material(Color_1.Color.black,0)),new Sphere_1.Sphere(new Vector_1.Vector(-250,-500,450),200).setMaterial(new Material_1.Material(Color_1.Color.black,1)),new Sphere_1.Sphere(new Vector_1.Vector(250,-500,400),200).setMaterial(new Material_1.Material(Color_1.Color.green,0))]})),r.render(t[0],t[1])};
//# sourceMappingURL=data:application/json;base64,
