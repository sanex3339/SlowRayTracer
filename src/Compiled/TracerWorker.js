"use strict";var Camera_1=require("./Camera"),Color_1=require("./Color/Color"),IntersectPoint_1=require("./IntersectPoint"),Material_1=require("./Material"),Plane_1=require("./Objects/Plane"),Polygon_1=require("./Objects/Polygon"),Ray_1=require("./Ray"),RGBColor_1=require("./Color/RGBColor"),RTMath_1=require("./RTMath"),Scene_1=require("./Scene"),Sphere_1=require("./Objects/Sphere"),Vector_1=require("./Vector"),FloatColor_1=require("./Color/FloatColor"),Tracer=function(){function e(){this.buffer=[],this.screenWidth=250,this.screenHeight=250;for(var e=0;e<this.screenWidth*this.screenHeight*3;e++)this.buffer.push(Color_1.Color.black)}return e.prototype.cosineSampleHemisphere=function(e){var t,r,o=Math.random(),a=Math.random(),n=Math.sqrt(o),c=2*Math.PI*a;return t=Math.abs(e.getCoordinates().x)<.5?Vector_1.Vector.cross(e,new Vector_1.Vector(1,0,0)):Vector_1.Vector.cross(e,new Vector_1.Vector(0,1,0)),r=Vector_1.Vector.cross(e,t),Vector_1.Vector.add(Vector_1.Vector.scale(e,Math.sqrt(1-o)),Vector_1.Vector.add(Vector_1.Vector.scale(t,n*Math.cos(c)),Vector_1.Vector.scale(r,n*Math.sin(c))))},e.prototype.getColor=function(e){var t,r,o,a,n,c=Color_1.Color.black,i=this.trace(e),l=1,s=e.getIteration();if(s>=5){if(Math.random()<=.1)return Color_1.Color.black;l=1/.9}if(!i.getIntersect())return Color_1.Color.black;r=Color_1.Color.black;for(var _=0,g=this.scene.getObjects();_<g.length;_++){var V=g[_];V.getMaterial().getEmission()!=Color_1.Color.black&&(r=r.add(this.getLightPower(e,i,V)))}return c=r.scaled(e.getIteration()).add(i.getOwner().getMaterial().getColor().multiple(i.getOwner().getMaterial().getEmission().scaled(l))),o=this.cosineSampleHemisphere(i.getNormal()),a=Vector_1.Vector.dot(o,e.getDirection())>0?Vector_1.Vector.add(e.getOrigin(),Vector_1.Vector.scale(e.getDirection(),i.getDistanceFromOrigin()*(1+RTMath_1.RTMath.EPSILON))):Vector_1.Vector.add(e.getOrigin(),Vector_1.Vector.scale(e.getDirection(),i.getDistanceFromOrigin()*(1-RTMath_1.RTMath.EPSILON))),t=Vector_1.Vector.dot(o,i.getNormal()),n=this.getColor(new Ray_1.Ray(a,o,++s)),c.add(n.multiple(i.getOwner().getMaterial().getColor()).scaled(t).scaled(.1).scaled(l))},e.prototype.getReflectionColor=function(e,t){var r,o,a=t.getOwner().getMaterial().getReflectionValue();return 0===a?Color_1.Color.black:(o=Vector_1.Vector.reflect(e.getDirection(),t.getNormal()),r=this.getColor(new Ray_1.Ray(t.getHitPoint(),o,e.getIteration())).scaled(a))},e.prototype.getPerspectiveVector=function(e,t){var r=this.scene.getCamera();return Vector_1.Vector.normalize(Vector_1.Vector.add(r.getForwardVector(),Vector_1.Vector.add(Vector_1.Vector.scale(r.getRightVector(),r.recenterX(e)),Vector_1.Vector.scale(r.getUpVector(),r.recenterY(t)))))},e.prototype.getLightPower=function(e,t,r){var o=r.getRandomPoint(),a=this.trace(new Ray_1.Ray(t.getHitPoint(),Vector_1.Vector.substract(Vector_1.Vector.substract(r.getPosition(),o),t.getHitPoint())));return a.getIntersect()&&a.getOwner().getMaterial().getEmissionValue()>0?t.getOwner().getMaterial().getColor():Color_1.Color.black},e.prototype.trace=function(e){for(var t,r=new IntersectPoint_1.IntersectPoint,o=1/0,a=this.scene.getObjects(),n=0,c=a;n<c.length;n++){var i=c[n];t=i.getIntersectData(e),t&&t.distance<o&&(o=t.distance,r.setIntersect(),r.setHitPoint(t.hitPoint),r.setNormal(t.normal),r.setDistanceFromOrigin(t.distance),r.setOwner(i))}return r},e.prototype.render=function(e,t){var r,o,a,n,c=.5,i=1;for(this.screenWidth=e,this.screenHeight=t;;){r=[];for(var l=0,s=0;s<this.screenHeight;s++)for(var _=0;_<this.screenWidth;_++){o=Color_1.Color.black;for(var g=0;i>g;g++)a=0,Math.random()>.5?a+=Math.random()*c:a-=Math.random()*c,n=new Ray_1.Ray(this.scene.getCamera().getPosition(),this.getPerspectiveVector(_+a,s+a)),o=o.add(this.getColor(n));this.buffer[l]=o.divide(i);for(var V in this.buffer[l].getColor())this.buffer[l][V]=Color_1.Color.sRGBEncode(this.buffer[l][V]);r.push(this.buffer[l].getColor().red),r.push(this.buffer[l].getColor().green),r.push(this.buffer[l].getColor().blue),l++}for(var C=0;C<this.buffer.length;C++)this.buffer[C].getColor().red=0,this.buffer[C].getColor().green=0,this.buffer[C].getColor().blue=0;self.postMessage(r)}},e.prototype.setScene=function(e){this.scene=e},e}();onmessage=function(e){var t=e.data;"string"==typeof t&&(t=JSON.parse("["+t+"]"));var r=new Tracer;r.setScene(new Scene_1.Scene({camera:new Camera_1.Camera(new Vector_1.Vector(0,0,-699),new Vector_1.Vector(0,0,1),t[0],t[1]),objects:[new Polygon_1.Polygon(new Vector_1.Vector(-700,700,-700),new Vector_1.Vector(700,700,-700),new Vector_1.Vector(-700,700,700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(191.25,191.25,191.25))).setLambertCoeff(1)),new Plane_1.Plane(new Vector_1.Vector(0,-1,0),new Vector_1.Vector(0,700,0)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(215,215,215)),new Color_1.Color(new FloatColor_1.FloatColor(30,30,30)))),new Plane_1.Plane(new Vector_1.Vector(-1,0,0),new Vector_1.Vector(700,0,0)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(76.5,255,25.5))).setLambertCoeff(1)),new Plane_1.Plane(new Vector_1.Vector(1,0,0),new Vector_1.Vector(-700,0,0)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,76.5,25.5))).setLambertCoeff(1)),new Plane_1.Plane(new Vector_1.Vector(0,0,-1),new Vector_1.Vector(0,0,700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(191.25,191.25,191.25))).setLambertCoeff(1)),new Plane_1.Plane(new Vector_1.Vector(0,0,1),new Vector_1.Vector(0,0,-700)).setMaterial(new Material_1.Material(Color_1.Color.black).setLambertCoeff(1)),new Sphere_1.Sphere(new Vector_1.Vector(0,-300,400),400).setMaterial(new Material_1.Material(Color_1.Color.gray))]})),r.render(t[0],t[1])};
//# sourceMappingURL=data:application/json;base64,
