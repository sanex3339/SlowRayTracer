var AbstractLight_1=require("./Lights/AbstractLight"),Camera_1=require("./Camera"),Color_1=require("./Color/Color"),IntersectPoint_1=require("./IntersectPoint"),Material_1=require("./Material"),Plane_1=require("./Objects/Plane"),Ray_1=require("./Ray"),RGBColor_1=require("./Color/RGBColor"),Scene_1=require("./Scene"),Sphere_1=require("./Objects/Sphere"),SphericalLight_1=require("./Lights/SphericalLight"),Vector_1=require("./Vector"),Tracer=function(){function e(){this.buffer=[],this.screenWidth=250,this.screenHeight=250;for(var e=0;e<this.screenWidth*this.screenHeight*3;e++)this.buffer.push(Color_1.Color.black)}return e.prototype.cosineSampleHemisphere=function(e){var t,r,o=Math.random(),a=Math.random(),n=Math.sqrt(o),i=2*Math.PI*a;return t=Math.abs(e.getCoordinates().x)<.5?Vector_1.Vector.cross(e,new Vector_1.Vector(1,0,0)):Vector_1.Vector.cross(e,new Vector_1.Vector(0,1,0)),r=Vector_1.Vector.cross(e,t),Vector_1.Vector.add(Vector_1.Vector.scale(e,Math.sqrt(1-o)),Vector_1.Vector.add(Vector_1.Vector.scale(t,n*Math.cos(i)),Vector_1.Vector.scale(r,n*Math.sin(i))))},e.prototype.getColor=function(e){var t=this.trace(e),r=Color_1.Color.black,o=Color_1.Color.black,a=e.getIteration();return e.setIteration(--a),0===a?Color_1.Color.black:t.getIntersect()?(r=this.getDiffuseColor(e,t),o=this.getReflectionColor(e,t),r.add(o)):Color_1.Color.black},e.prototype.getDiffuseColor=function(e,t,r){void 0===r&&(r=!0);for(var o,a,n,i,c,l,s,g,_,h,V=Color_1.Color.black,C=0,w=this.scene.getLights();C<w.length;C++){var f=w[C];if(t.getOwner()instanceof AbstractLight_1.AbstractLight)return t.getOwner().getMaterial().getColor();l=this.getLightPower(t,f),o=Color_1.Color.black,a=Color_1.Color.black,n=Color_1.Color.black,c=Vector_1.Vector.normalize(Vector_1.Vector.substract(t.getHitPoint(),f.getPosition()));var u=void 0;i=this.cosineSampleHemisphere(t.getOwner().getNormal(t.getHitPoint())),u=this.getColor(new Ray_1.Ray(t.getHitPoint(),i,e.getIteration())),n=n.add(u),g=-Vector_1.Vector.dot(c,t.getNormal()),o=o.add(t.getOwner().getMaterial().getColor().multiple(f.getMaterial().getColor().scaled(l*g*t.getOwner().getMaterial().getLambertCoeff()).add(n.divide(Math.PI)))),s=Vector_1.Vector.reflect(c,t.getNormal()),_=-Vector_1.Vector.dot(s,e.getDirection()),_>0&&(h=Math.pow(_,35),a=a.add(t.getOwner().getMaterial().getColor().multiple(f.getMaterial().getColor().scaled(l*h*t.getOwner().getMaterial().getPhongCoeff())))),V=V.add(o.add(a))}return V},e.prototype.getReflectionColor=function(e,t){var r,o,a=t.getOwner().getMaterial().getReflectionValue();return 0===a?Color_1.Color.black:(o=Vector_1.Vector.reflect(e.getDirection(),t.getNormal()),r=this.getColor(new Ray_1.Ray(t.getHitPoint(),o,e.getIteration())).scaled(a))},e.prototype.getPerspectiveVector=function(e,t){var r=this.scene.getCamera();return Vector_1.Vector.normalize(Vector_1.Vector.add(r.getForwardVector(),Vector_1.Vector.add(Vector_1.Vector.scale(r.getRightVector(),r.recenterX(e)),Vector_1.Vector.scale(r.getUpVector(),r.recenterY(t)))))},e.prototype.getLightPower=function(e,t){var r,o,a=t.getPower(),n=0;return r=t.getRandomPoint(),o=this.trace(new Ray_1.Ray(e.getHitPoint(),Vector_1.Vector.substract(Vector_1.Vector.substract(t.getPosition(),r),e.getHitPoint()))),o.getIntersect()&&o.getOwner()instanceof AbstractLight_1.AbstractLight&&(n+=a-Vector_1.Vector.substract(Vector_1.Vector.substract(t.getPosition(),r),e.getHitPoint()).getLength()*(a/t.getFadeRadius())),n},e.prototype.trace=function(e){for(var t,r=new IntersectPoint_1.IntersectPoint,o=1/0,a=this.scene.getObjects().concat(this.scene.getLights()),n=0,i=a;n<i.length;n++){var c=i[n];t=c.getIntersectData(e),t&&t.distance<o&&(o=t.distance,r.setIntersect(),r.setHitPoint(t.hitPoint),r.setNormal(t.normal),r.setDistanceFromOrigin(t.distance),r.setOwner(c))}return r},e.prototype.render=function(e,t){var r,o,a,n=.5;for(this.screenWidth=e,this.screenHeight=t;;){r=[];for(var i=0;1>i;i++)for(var c=0,l=0;l<this.screenHeight;l++)for(var s=0;s<this.screenWidth;s++){o=0,Math.random()>.5?o+=Math.random()*n:o-=Math.random()*n,a=new Ray_1.Ray(this.scene.getCamera().getPosition(),this.getPerspectiveVector(s+o,l+o)),this.buffer[c]=Color_1.Color.black.add(this.getColor(a));for(var g in this.buffer[c].getColor())this.buffer[c][g]=Color_1.Color.sRGBEncode(this.buffer[c][g]);r.push(this.buffer[c].getColor().red),r.push(this.buffer[c].getColor().green),r.push(this.buffer[c].getColor().blue),c++}for(var c=0;c<this.buffer.length;c++)this.buffer[c].getColor().red=0,this.buffer[c].getColor().green=0,this.buffer[c].getColor().blue=0;self.postMessage(r)}},e.prototype.setScene=function(e){this.scene=e},e}();onmessage=function(e){var t=e.data;"string"==typeof t&&(t=JSON.parse("["+t+"]"));var r=new Tracer;r.setScene(new Scene_1.Scene({camera:new Camera_1.Camera(new Vector_1.Vector(0,0,-699),new Vector_1.Vector(0,0,1),t[0],t[1]),lights:[new SphericalLight_1.SphericalLight(new Vector_1.Vector(0,600,0),1,100).setMaterial(new Material_1.Material(Color_1.Color.white)),new SphericalLight_1.SphericalLight(new Vector_1.Vector(0,0,0),.6,150).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,235,200))))],objects:[new Plane_1.Plane(new Vector_1.Vector(0,1,0),new Vector_1.Vector(0,-700,0)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(191.25,191.25,191.25)),0)),new Plane_1.Plane(new Vector_1.Vector(0,-1,0),new Vector_1.Vector(0,700,0)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(191.25,191.25,191.25)),0)),new Plane_1.Plane(new Vector_1.Vector(-1,0,0),new Vector_1.Vector(700,0,0)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(63.75,63.75,191.25)),0)),new Plane_1.Plane(new Vector_1.Vector(1,0,0),new Vector_1.Vector(-700,0,0)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(191.25,63.75,63.75)),0)),new Plane_1.Plane(new Vector_1.Vector(0,0,-1),new Vector_1.Vector(0,0,700)).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(191.25,191.25,191.25)),0)),new Plane_1.Plane(new Vector_1.Vector(0,0,1),new Vector_1.Vector(0,0,-700)).setMaterial(new Material_1.Material(Color_1.Color.black,0)),new Sphere_1.Sphere(new Vector_1.Vector(-250,-500,450),200).setMaterial(new Material_1.Material(Color_1.Color.black,1)),new Sphere_1.Sphere(new Vector_1.Vector(250,-500,400),200).setMaterial(new Material_1.Material(Color_1.Color.green,0))]})),r.render(t[0],t[1])};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRyYWNlcldvcmtlci50cyJdLCJuYW1lcyI6WyJBYnN0cmFjdExpZ2h0XzEiLCJyZXF1aXJlIiwiQ2FtZXJhXzEiLCJDb2xvcl8xIiwiSW50ZXJzZWN0UG9pbnRfMSIsIk1hdGVyaWFsXzEiLCJQbGFuZV8xIiwiUmF5XzEiLCJSR0JDb2xvcl8xIiwiU2NlbmVfMSIsIlNwaGVyZV8xIiwiU3BoZXJpY2FsTGlnaHRfMSIsIlZlY3Rvcl8xIiwiVHJhY2VyIiwiVHJhY2VyLmNvbnN0cnVjdG9yIiwiVHJhY2VyLmNvc2luZVNhbXBsZUhlbWlzcGhlcmUiLCJUcmFjZXIuZ2V0Q29sb3IiLCJUcmFjZXIuZ2V0RGlmZnVzZUNvbG9yIiwiVHJhY2VyLmdldFJlZmxlY3Rpb25Db2xvciIsIlRyYWNlci5nZXRQZXJzcGVjdGl2ZVZlY3RvciIsIlRyYWNlci5nZXRMaWdodFBvd2VyIiwiVHJhY2VyLnRyYWNlIiwiVHJhY2VyLnJlbmRlciIsIlRyYWNlci5zZXRTY2VuZSIsIm9ubWVzc2FnZSIsIm1lc3NhZ2UiLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwidHJhY2VyIiwic2V0U2NlbmUiLCJTY2VuZSIsImNhbWVyYSIsIkNhbWVyYSIsIlZlY3RvciIsImxpZ2h0cyIsIlNwaGVyaWNhbExpZ2h0Iiwic2V0TWF0ZXJpYWwiLCJNYXRlcmlhbCIsIkNvbG9yIiwid2hpdGUiLCJSR0JDb2xvciIsIm9iamVjdHMiLCJQbGFuZSIsImJsYWNrIiwiU3BoZXJlIiwiZ3JlZW4iLCJyZW5kZXIiXSwibWFwcGluZ3MiOiJBQUdBLEdBQUFBLGlCQUFBQyxRQUE4QiwwQkFFOUJDLFNBQUFELFFBQXVCLFlBQ3ZCRSxRQUFBRixRQUFzQixpQkFDdEJHLGlCQUFBSCxRQUErQixvQkFDL0JJLFdBQUFKLFFBQXlCLGNBQ3pCSyxRQUFBTCxRQUFzQixtQkFFdEJNLE1BQUFOLFFBQW9CLFNBQ3BCTyxXQUFBUCxRQUF5QixvQkFFekJRLFFBQUFSLFFBQXNCLFdBQ3RCUyxTQUFBVCxRQUF1QixvQkFDdkJV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QUlBLEVBQUsiLCJmaWxlIjoiVHJhY2VyV29ya2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2Ugbm8tZGVmYXVsdC1saWI9XCJ0cnVlXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImxpYi9saWIud2Vid29ya2VyLmQudHNcIiAvPlxuXG5pbXBvcnQgeyBBYnN0cmFjdExpZ2h0IH0gZnJvbSBcIi4vTGlnaHRzL0Fic3RyYWN0TGlnaHRcIjtcbmltcG9ydCB7IEFic3RyYWN0T2JqZWN0IH0gZnJvbSBcIi4vT2JqZWN0cy9BYnN0cmFjdE9iamVjdFwiO1xuaW1wb3J0IHsgQ2FtZXJhIH0gZnJvbSBcIi4vQ2FtZXJhXCI7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gXCIuL0NvbG9yL0NvbG9yXCI7XG5pbXBvcnQgeyBJbnRlcnNlY3RQb2ludCB9IGZyb20gXCIuL0ludGVyc2VjdFBvaW50XCI7XG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gXCIuL01hdGVyaWFsXCI7XG5pbXBvcnQgeyBQbGFuZSB9IGZyb20gXCIuL09iamVjdHMvUGxhbmVcIjtcbmltcG9ydCB7IFBvbHlnb24gfSBmcm9tIFwiLi9PYmplY3RzL1BvbHlnb25cIjtcbmltcG9ydCB7IFJheSB9IGZyb20gXCIuL1JheVwiO1xuaW1wb3J0IHsgUkdCQ29sb3IgfSBmcm9tIFwiLi9Db2xvci9SR0JDb2xvclwiO1xuaW1wb3J0IHsgUlRNYXRoIH0gZnJvbSBcIi4vUlRNYXRoXCI7XG5pbXBvcnQgeyBTY2VuZSB9IGZyb20gXCIuL1NjZW5lXCI7XG5pbXBvcnQgeyBTcGhlcmUgfSBmcm9tIFwiLi9PYmplY3RzL1NwaGVyZVwiO1xuaW1wb3J0IHsgU3BoZXJpY2FsTGlnaHQgfSBmcm9tIFwiLi9MaWdodHMvU3BoZXJpY2FsTGlnaHRcIjtcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gXCIuL1ZlY3RvclwiO1xuXG5jbGFzcyBUcmFjZXIge1xuICAgIHByaXZhdGUgYnVmZmVyOiBDb2xvcltdID0gW107XG4gICAgcHJpdmF0ZSBzY2VuZTogU2NlbmU7XG4gICAgcHJpdmF0ZSBzY3JlZW5XaWR0aDogbnVtYmVyID0gMjUwO1xuICAgIHByaXZhdGUgc2NyZWVuSGVpZ2h0OiBudW1iZXIgPSAyNTA7XG5cbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zY3JlZW5XaWR0aCAqIHRoaXMuc2NyZWVuSGVpZ2h0ICogMzsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKENvbG9yLmJsYWNrKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgY29zaW5lU2FtcGxlSGVtaXNwaGVyZSAobm9ybWFsOiBWZWN0b3IpOiBWZWN0b3Ige1xuICAgICAgICBsZXQgdSA9IE1hdGgucmFuZG9tKCk7XG4gICAgICAgIGxldCB2ID0gTWF0aC5yYW5kb20oKTtcbiAgICAgICAgbGV0IHIgPSBNYXRoLnNxcnQodSk7XG4gICAgICAgIGxldCBhbmdsZSA9IDIgKiBNYXRoLlBJICogdjtcblxuICAgICAgICBsZXQgc2RpcixcbiAgICAgICAgICAgIHRkaXI7XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKG5vcm1hbC5nZXRDb29yZGluYXRlcygpWyd4J10pIDwgMC41KSB7XG4gICAgICAgICAgICBzZGlyID0gVmVjdG9yLmNyb3NzKG5vcm1hbCwgbmV3IFZlY3RvcigxLDAsMCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2RpciA9IFZlY3Rvci5jcm9zcyhub3JtYWwsIG5ldyBWZWN0b3IoMCwxLDApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRkaXIgPSBWZWN0b3IuY3Jvc3Mobm9ybWFsLCBzZGlyKTtcblxuICAgICAgICByZXR1cm4gVmVjdG9yLmFkZChcbiAgICAgICAgICAgIFZlY3Rvci5zY2FsZShub3JtYWwsICBNYXRoLnNxcnQoMSAtIHUpKSxcbiAgICAgICAgICAgIFZlY3Rvci5hZGQoXG4gICAgICAgICAgICAgICAgVmVjdG9yLnNjYWxlKHNkaXIsIHIgKiBNYXRoLmNvcyhhbmdsZSkpLFxuICAgICAgICAgICAgICAgIFZlY3Rvci5zY2FsZSh0ZGlyLCByICogTWF0aC5zaW4oYW5nbGUpKVxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Q29sb3IgKHJheTogUmF5KTogQ29sb3Ige1xuICAgICAgICBsZXQgaW50ZXJzZWN0aW9uID0gdGhpcy50cmFjZShyYXkpLFxuICAgICAgICAgICAgZGlmZnVzZUNvbG9yOiBDb2xvciA9IENvbG9yLmJsYWNrLFxuICAgICAgICAgICAgcmVmbGVjdENvbG9yOiBDb2xvciA9IENvbG9yLmJsYWNrLFxuICAgICAgICAgICAgcmF5SXRlcmF0aW9uOiBudW1iZXIgPSByYXkuZ2V0SXRlcmF0aW9uKCk7XG5cbiAgICAgICAgcmF5LnNldEl0ZXJhdGlvbigtLXJheUl0ZXJhdGlvbik7XG5cbiAgICAgICAgaWYgKHJheUl0ZXJhdGlvbiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIENvbG9yLmJsYWNrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpbnRlcnNlY3Rpb24uZ2V0SW50ZXJzZWN0KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBDb2xvci5ibGFjaztcbiAgICAgICAgfVxuXG4gICAgICAgIGRpZmZ1c2VDb2xvciA9IHRoaXMuZ2V0RGlmZnVzZUNvbG9yKHJheSwgaW50ZXJzZWN0aW9uKTtcbiAgICAgICAgcmVmbGVjdENvbG9yID0gdGhpcy5nZXRSZWZsZWN0aW9uQ29sb3IocmF5LCBpbnRlcnNlY3Rpb24pO1xuXG4gICAgICAgIHJldHVybiBkaWZmdXNlQ29sb3IuYWRkKHJlZmxlY3RDb2xvcik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXREaWZmdXNlQ29sb3IgKHJheTogUmF5LCBpbnRlcnNlY3Q6IGFueSwgcmVjdXJzaXZlOiBib29sZWFuID0gdHJ1ZSk6IENvbG9yIHtcbiAgICAgICAgbGV0IGxhbWJDb2xvcjogQ29sb3IsXG4gICAgICAgICAgICBwaG9uZ0NvbG9yOiBDb2xvcixcbiAgICAgICAgICAgIHJhZGlhbmNlQ29sb3I6IENvbG9yLFxuICAgICAgICAgICAgcGl4ZWxDb2xvcjogQ29sb3IgPSBDb2xvci5ibGFjayxcbiAgICAgICAgICAgIHJhZGlhbmNlUmFuZG9tRGlyZWN0aW9uOiBWZWN0b3IsXG4gICAgICAgICAgICBsaWdodERpcmVjdGlvbjogVmVjdG9yLFxuICAgICAgICAgICAgbGlnaHRQb3dlcjogbnVtYmVyLFxuICAgICAgICAgICAgcmVmbGVjdFBob25nVmVjdG9yRGlyOiBWZWN0b3IsXG4gICAgICAgICAgICBsYW1iQ29zOiBudW1iZXIsXG4gICAgICAgICAgICBwaG9uZ0NvczogbnVtYmVyLFxuICAgICAgICAgICAgcGhvbmc6IG51bWJlcjtcblxuICAgICAgICBmb3IgKGxldCBsaWdodCBvZiB0aGlzLnNjZW5lLmdldExpZ2h0cygpKSB7XG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0LmdldE93bmVyKCkgaW5zdGFuY2VvZiBBYnN0cmFjdExpZ2h0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGludGVyc2VjdC5nZXRPd25lcigpXG4gICAgICAgICAgICAgICAgICAgIC5nZXRNYXRlcmlhbCgpXG4gICAgICAgICAgICAgICAgICAgIC5nZXRDb2xvcigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsaWdodFBvd2VyID0gdGhpcy5nZXRMaWdodFBvd2VyKGludGVyc2VjdCwgbGlnaHQpO1xuXG4gICAgICAgICAgICBsYW1iQ29sb3IgPSBDb2xvci5ibGFjaztcbiAgICAgICAgICAgIHBob25nQ29sb3IgPSBDb2xvci5ibGFjaztcbiAgICAgICAgICAgIHJhZGlhbmNlQ29sb3IgPSBDb2xvci5ibGFjaztcblxuICAgICAgICAgICAgbGlnaHREaXJlY3Rpb24gPSBWZWN0b3Iubm9ybWFsaXplKFxuICAgICAgICAgICAgICAgIFZlY3Rvci5zdWJzdHJhY3QoXG4gICAgICAgICAgICAgICAgICAgIGludGVyc2VjdC5nZXRIaXRQb2ludCgpLFxuICAgICAgICAgICAgICAgICAgICBsaWdodC5nZXRQb3NpdGlvbigpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcblxuXG5cbiAgICAgICAgICAgIC8vZ2lcbiAgICAgICAgICAgIGxldCByYWRpYW5jZUluUmFuZG9tRGlyZWN0aW9uOiBDb2xvcjtcblxuICAgICAgICAgICAgcmFkaWFuY2VSYW5kb21EaXJlY3Rpb24gPSB0aGlzLmNvc2luZVNhbXBsZUhlbWlzcGhlcmUoXG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0LmdldE93bmVyKCkuZ2V0Tm9ybWFsKGludGVyc2VjdC5nZXRIaXRQb2ludCgpKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgcmFkaWFuY2VJblJhbmRvbURpcmVjdGlvbiA9IHRoaXMuZ2V0Q29sb3IoXG4gICAgICAgICAgICAgICAgbmV3IFJheShcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0LmdldEhpdFBvaW50KCksXG4gICAgICAgICAgICAgICAgICAgIHJhZGlhbmNlUmFuZG9tRGlyZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICByYXkuZ2V0SXRlcmF0aW9uKClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICByYWRpYW5jZUNvbG9yID0gcmFkaWFuY2VDb2xvclxuICAgICAgICAgICAgICAgIC5hZGQocmFkaWFuY2VJblJhbmRvbURpcmVjdGlvbik7XG5cblxuXG4gICAgICAgICAgICAvLyBsYW1iZXJ0XG5cbiAgICAgICAgICAgIGxhbWJDb3MgPSAtVmVjdG9yLmRvdChcbiAgICAgICAgICAgICAgICBsaWdodERpcmVjdGlvbixcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3QuZ2V0Tm9ybWFsKClcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGxhbWJDb2xvciA9IGxhbWJDb2xvci5hZGQoXG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0XG4gICAgICAgICAgICAgICAgICAgIC5nZXRPd25lcigpXG4gICAgICAgICAgICAgICAgICAgIC5nZXRNYXRlcmlhbCgpXG4gICAgICAgICAgICAgICAgICAgIC5nZXRDb2xvcigpXG4gICAgICAgICAgICAgICAgICAgIC5tdWx0aXBsZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0LmdldE1hdGVyaWFsKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0Q29sb3IoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zY2FsZWQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0UG93ZXIgKiBsYW1iQ29zICogaW50ZXJzZWN0LmdldE93bmVyKCkuZ2V0TWF0ZXJpYWwoKS5nZXRMYW1iZXJ0Q29lZmYoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkKHJhZGlhbmNlQ29sb3IuZGl2aWRlKE1hdGguUEkpKVxuXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG5cblxuXG4gICAgICAgICAgICAvLyBwaG9uZ1xuXG4gICAgICAgICAgICByZWZsZWN0UGhvbmdWZWN0b3JEaXIgPSBWZWN0b3IucmVmbGVjdChcbiAgICAgICAgICAgICAgICBsaWdodERpcmVjdGlvbixcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3QuZ2V0Tm9ybWFsKClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBwaG9uZ0NvcyA9IC1WZWN0b3IuZG90KHJlZmxlY3RQaG9uZ1ZlY3RvckRpciwgcmF5LmdldERpcmVjdGlvbigpKTtcblxuICAgICAgICAgICAgaWYgKHBob25nQ29zID4gMCkge1xuICAgICAgICAgICAgICAgIHBob25nID0gTWF0aC5wb3cocGhvbmdDb3MsIDM1KTtcbiAgICAgICAgICAgICAgICBwaG9uZ0NvbG9yID0gcGhvbmdDb2xvci5hZGQoXG4gICAgICAgICAgICAgICAgICAgIGludGVyc2VjdC5nZXRPd25lcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0TWF0ZXJpYWwoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldENvbG9yKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tdWx0aXBsZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWdodC5nZXRNYXRlcmlhbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRDb2xvcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zY2FsZWQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWdodFBvd2VyICogcGhvbmcgKiBpbnRlcnNlY3QuZ2V0T3duZXIoKS5nZXRNYXRlcmlhbCgpLmdldFBob25nQ29lZmYoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9hbWJpZW50IG9jY2x1c2lvblxuICAgICAgICAgICAgLypsZXQgYyA9IDA7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hb1NhbXBsZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBkaXIgPSB0aGlzLmNvc2luZVNhbXBsZUhlbWlzcGhlcmUoaW50ZXJzZWN0LmdldE93bmVyKCkuZ2V0Tm9ybWFsKGludGVyc2VjdC5nZXRIaXRQb2ludCgpKSk7XG5cbiAgICAgICAgICAgICAgICBsZXQgYW9JbnRlcnNlY3QgPSB0aGlzLnRyYWNlKFxuICAgICAgICAgICAgICAgICAgICBuZXcgUmF5KFxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0LmdldEhpdFBvaW50KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXJcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWFvSW50ZXJzZWN0LmdldEludGVyc2VjdCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChhb0ludGVyc2VjdC5nZXREaXN0YW5jZUZyb21PcmlnaW4oKSA+IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjKys7XG4gICAgICAgICAgICB9Ki9cblxuICAgICAgICAgICAgLypwaXhlbENvbG9yID0gcGl4ZWxDb2xvci5hZGQoXG4gICAgICAgICAgICAgICAgbGFtYkNvbG9yLm11bHRpcGxlKENvbG9yLndoaXRlLnNjYWxlZCgxIC0gKGMgKiAwLjY3IC8gdGhpcy5hb1NhbXBsZXMpKSkuYWRkKHBob25nQ29sb3IpXG4gICAgICAgICAgICApOyovXG5cbiAgICAgICAgICAgIHBpeGVsQ29sb3IgPSBwaXhlbENvbG9yLmFkZChcbiAgICAgICAgICAgICAgICBsYW1iQ29sb3IuYWRkKHBob25nQ29sb3IpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBpeGVsQ29sb3I7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRSZWZsZWN0aW9uQ29sb3IgKHJheTogUmF5LCBpbnRlcnNlY3Q6IGFueSk6IGFueSB7XG4gICAgICAgIGxldCByZWZsZWN0aW9uQ29sb3I6IENvbG9yLFxuICAgICAgICAgICAgcmVmbGVjdGlvblZhbHVlOiBudW1iZXIgPSBpbnRlcnNlY3QuZ2V0T3duZXIoKS5nZXRNYXRlcmlhbCgpLmdldFJlZmxlY3Rpb25WYWx1ZSgpLFxuICAgICAgICAgICAgcmVmbGVjdGVkUmF5OiBWZWN0b3I7XG5cbiAgICAgICAgaWYgKHJlZmxlY3Rpb25WYWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIENvbG9yLmJsYWNrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVmbGVjdGVkUmF5ID0gVmVjdG9yLnJlZmxlY3QoXG4gICAgICAgICAgICByYXkuZ2V0RGlyZWN0aW9uKCksXG4gICAgICAgICAgICBpbnRlcnNlY3QuZ2V0Tm9ybWFsKClcbiAgICAgICAgKTtcblxuICAgICAgICByZWZsZWN0aW9uQ29sb3IgPSB0aGlzLmdldENvbG9yKFxuICAgICAgICAgICAgbmV3IFJheShpbnRlcnNlY3QuZ2V0SGl0UG9pbnQoKSwgcmVmbGVjdGVkUmF5LCByYXkuZ2V0SXRlcmF0aW9uKCkpXG4gICAgICAgICkuc2NhbGVkKHJlZmxlY3Rpb25WYWx1ZSk7XG5cbiAgICAgICAgcmV0dXJuIHJlZmxlY3Rpb25Db2xvcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFBlcnNwZWN0aXZlVmVjdG9yICh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICBsZXQgY2FtZXJhOiBDYW1lcmEgPSB0aGlzLnNjZW5lLmdldENhbWVyYSgpO1xuXG4gICAgICAgIHJldHVybiBWZWN0b3Iubm9ybWFsaXplKFxuICAgICAgICAgICAgVmVjdG9yLmFkZChcbiAgICAgICAgICAgICAgICBjYW1lcmEuZ2V0Rm9yd2FyZFZlY3RvcigpLFxuICAgICAgICAgICAgICAgIFZlY3Rvci5hZGQoXG4gICAgICAgICAgICAgICAgICAgIFZlY3Rvci5zY2FsZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbWVyYS5nZXRSaWdodFZlY3RvcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FtZXJhLnJlY2VudGVyWCh4KVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBWZWN0b3Iuc2NhbGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW1lcmEuZ2V0VXBWZWN0b3IoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbWVyYS5yZWNlbnRlclkoeSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldExpZ2h0UG93ZXIgKGludGVyc2VjdDogYW55LCBsaWdodDogQWJzdHJhY3RMaWdodCk6IG51bWJlciB7XG4gICAgICAgIGxldCBsaWdodFBvd2VyID0gbGlnaHQuZ2V0UG93ZXIoKSxcbiAgICAgICAgICAgIGxpZ2h0UmFuZG9tUG9pbnQ6IFZlY3RvcixcbiAgICAgICAgICAgIHNoYWRvd1JheTogSW50ZXJzZWN0UG9pbnQsXG4gICAgICAgICAgICByZXN1bHRQb3dlcjogbnVtYmVyID0gMDtcblxuICAgICAgICBsaWdodFJhbmRvbVBvaW50ID0gbGlnaHQuZ2V0UmFuZG9tUG9pbnQoKTtcblxuICAgICAgICBzaGFkb3dSYXkgPSB0aGlzLnRyYWNlKFxuICAgICAgICAgICAgbmV3IFJheShcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3QuZ2V0SGl0UG9pbnQoKSxcbiAgICAgICAgICAgICAgICBWZWN0b3Iuc3Vic3RyYWN0KFxuICAgICAgICAgICAgICAgICAgICBWZWN0b3Iuc3Vic3RyYWN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHQuZ2V0UG9zaXRpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0UmFuZG9tUG9pbnRcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0LmdldEhpdFBvaW50KClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgc2hhZG93UmF5LmdldEludGVyc2VjdCgpICYmXG4gICAgICAgICAgICBzaGFkb3dSYXkuZ2V0T3duZXIoKSBpbnN0YW5jZW9mIEFic3RyYWN0TGlnaHRcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXN1bHRQb3dlciArPSAoXG4gICAgICAgICAgICAgICAgbGlnaHRQb3dlciAtXG4gICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICBWZWN0b3Iuc3Vic3RyYWN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgVmVjdG9yLnN1YnN0cmFjdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWdodC5nZXRQb3NpdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0UmFuZG9tUG9pbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3QuZ2V0SGl0UG9pbnQoKVxuICAgICAgICAgICAgICAgICAgICApLmdldExlbmd0aCgpICogKGxpZ2h0UG93ZXIgLyBsaWdodC5nZXRGYWRlUmFkaXVzKCkpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHRQb3dlcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIHRyYWNlIChyYXk6IFJheSk6IEludGVyc2VjdFBvaW50IHtcbiAgICAgICAgbGV0IGludGVyc2VjdGlvbiA9IG5ldyBJbnRlcnNlY3RQb2ludCgpLFxuICAgICAgICAgICAgaW50ZXJzZWN0RGF0YTogYW55LFxuICAgICAgICAgICAgbWluRGlzdGFuY2U6IG51bWJlciA9IEluZmluaXR5LFxuICAgICAgICAgICAgc2NlbmVPYmplY3RzOiBBYnN0cmFjdE9iamVjdFtdJkFic3RyYWN0TGlnaHRbXSA9IHRoaXMuc2NlbmUuZ2V0T2JqZWN0cygpLmNvbmNhdCh0aGlzLnNjZW5lLmdldExpZ2h0cygpKTtcblxuICAgICAgICBmb3IgKGxldCBvYmplY3Qgb2Ygc2NlbmVPYmplY3RzKSB7XG4gICAgICAgICAgICBpbnRlcnNlY3REYXRhID0gb2JqZWN0LmdldEludGVyc2VjdERhdGEocmF5KTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGludGVyc2VjdERhdGEgJiZcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3REYXRhWydkaXN0YW5jZSddIDwgbWluRGlzdGFuY2VcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIG1pbkRpc3RhbmNlID0gaW50ZXJzZWN0RGF0YVsnZGlzdGFuY2UnXTtcblxuICAgICAgICAgICAgICAgIGludGVyc2VjdGlvbi5zZXRJbnRlcnNlY3QoKTtcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb24uc2V0SGl0UG9pbnQoaW50ZXJzZWN0RGF0YVsnaGl0UG9pbnQnXSk7XG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uLnNldE5vcm1hbChpbnRlcnNlY3REYXRhWydub3JtYWwnXSk7XG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uLnNldERpc3RhbmNlRnJvbU9yaWdpbihpbnRlcnNlY3REYXRhWydkaXN0YW5jZSddKTtcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb24uc2V0T3duZXIob2JqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb247XG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlciAoc2NyZWVuV2lkdGg6IG51bWJlciwgc2NyZWVuSGVpZ2h0OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgcmFuZG9NdWx0aXBsaWVyID0gMC41O1xuXG4gICAgICAgIGxldCBidWZmZXI6IG51bWJlcltdLFxuICAgICAgICAgICAgY29sb3I6IENvbG9yLFxuICAgICAgICAgICAgcmFuZDogbnVtYmVyLFxuICAgICAgICAgICAgcmF5OiBSYXk7XG5cbiAgICAgICAgdGhpcy5zY3JlZW5XaWR0aCA9IHNjcmVlbldpZHRoO1xuICAgICAgICB0aGlzLnNjcmVlbkhlaWdodCA9IHNjcmVlbkhlaWdodDtcblxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgYnVmZmVyID0gW107XG5cbiAgICAgICAgICAgIGZvciAobGV0IGl0ZXJhdGlvbiA9IDA7IGl0ZXJhdGlvbiA8IDE7IGl0ZXJhdGlvbisrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGkgPSAwO1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLnNjcmVlbkhlaWdodDsgeSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy5zY3JlZW5XaWR0aDsgeCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYW5kID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPiAwLjUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5kICs9IE1hdGgucmFuZG9tKCkgKiByYW5kb011bHRpcGxpZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9ICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5kIC09IE1hdGgucmFuZG9tKCkgKiByYW5kb011bHRpcGxpZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJheSA9IG5ldyBSYXkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2VuZS5nZXRDYW1lcmEoKS5nZXRQb3NpdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0UGVyc3BlY3RpdmVWZWN0b3IoeCArIHJhbmQsIHkgKyByYW5kKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXJbaV0gPSBDb2xvci5ibGFjay5hZGQodGhpcy5nZXRDb2xvcihyYXkpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgY29tcG9uZW50IGluIHRoaXMuYnVmZmVyW2ldLmdldENvbG9yKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcltpXVtjb21wb25lbnRdID0gQ29sb3Iuc1JHQkVuY29kZSh0aGlzLmJ1ZmZlcltpXVtjb21wb25lbnRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyLnB1c2godGhpcy5idWZmZXJbaV0uZ2V0Q29sb3IoKVsncmVkJ10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyLnB1c2godGhpcy5idWZmZXJbaV0uZ2V0Q29sb3IoKVsnZ3JlZW4nXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIucHVzaCh0aGlzLmJ1ZmZlcltpXS5nZXRDb2xvcigpWydibHVlJ10pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcihsZXQgIGkgPSAwOyBpIDwgdGhpcy5idWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcltpXS5nZXRDb2xvcigpWydyZWQnXSA9IDAuMDtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcltpXS5nZXRDb2xvcigpWydncmVlbiddID0gMC4wO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyW2ldLmdldENvbG9yKClbJ2JsdWUnXSA9IDAuMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZi5wb3N0TWVzc2FnZShidWZmZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHNldFNjZW5lIChzY2VuZTogU2NlbmUpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xuICAgIH1cbn1cblxub25tZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICB2YXIgZGF0YSA9IG1lc3NhZ2UuZGF0YTtcblxuICAgIGlmICh0eXBlb2YoZGF0YSkgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoJ1snK2RhdGErJ10nKTtcbiAgICB9XG5cbiAgICBsZXQgdHJhY2VyID0gbmV3IFRyYWNlcigpO1xuXG4gICAgdHJhY2VyLnNldFNjZW5lKFxuICAgICAgICBuZXcgU2NlbmUoe1xuICAgICAgICAgICAgY2FtZXJhOiBuZXcgQ2FtZXJhKFxuICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoMCwgMCwgLTY5OSksXG4gICAgICAgICAgICAgICAgbmV3IFZlY3RvcigwLCAwLCAxKSxcbiAgICAgICAgICAgICAgICBkYXRhWzBdLFxuICAgICAgICAgICAgICAgIGRhdGFbMV1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBsaWdodHM6IFtcbiAgICAgICAgICAgICAgICBuZXcgU3BoZXJpY2FsTGlnaHQobmV3IFZlY3RvciAoMCwgNjAwLCAwKSwgMSwgMTAwKVxuICAgICAgICAgICAgICAgICAgICAuc2V0TWF0ZXJpYWwobmV3IE1hdGVyaWFsKENvbG9yLndoaXRlKSksXG4gICAgICAgICAgICAgICAgbmV3IFNwaGVyaWNhbExpZ2h0KG5ldyBWZWN0b3IgKDAsIDAsIDApLCAwLjYsIDE1MClcbiAgICAgICAgICAgICAgICAgICAgLnNldE1hdGVyaWFsKG5ldyBNYXRlcmlhbChuZXcgQ29sb3IobmV3IFJHQkNvbG9yKDI1NSwgMjM1LCAyMDApKSkpXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgb2JqZWN0czogW1xuICAgICAgICAgICAgICAgIG5ldyBQbGFuZShuZXcgVmVjdG9yKDAsIDEsIDApLCBuZXcgVmVjdG9yICgwLCAtNzAwLCAwKSkuc2V0TWF0ZXJpYWwobmV3IE1hdGVyaWFsKG5ldyBDb2xvcihuZXcgUkdCQ29sb3IoMC43NSAqIDI1NSwgMC43NSAqIDI1NSwgMC43NSAqIDI1NSkpLCAwKSksXG4gICAgICAgICAgICAgICAgbmV3IFBsYW5lKG5ldyBWZWN0b3IoMCwgLTEsIDApLCBuZXcgVmVjdG9yICgwLCA3MDAsIDApKS5zZXRNYXRlcmlhbChuZXcgTWF0ZXJpYWwobmV3IENvbG9yKG5ldyBSR0JDb2xvcigwLjc1ICogMjU1LCAwLjc1ICogMjU1LCAwLjc1ICogMjU1KSksIDApKSxcbiAgICAgICAgICAgICAgICBuZXcgUGxhbmUobmV3IFZlY3RvcigtMSwgMCwgMCksIG5ldyBWZWN0b3IgKDcwMCwgMCwgMCkpLnNldE1hdGVyaWFsKG5ldyBNYXRlcmlhbChuZXcgQ29sb3IobmV3IFJHQkNvbG9yKDAuMjUgKiAyNTUsIDAuMjUgKiAyNTUsIDAuNzUgKiAyNTUpKSwgMCkpLFxuICAgICAgICAgICAgICAgIG5ldyBQbGFuZShuZXcgVmVjdG9yKDEsIDAsIDApLCBuZXcgVmVjdG9yICgtNzAwLCAwLCAwKSkuc2V0TWF0ZXJpYWwobmV3IE1hdGVyaWFsKG5ldyBDb2xvcihuZXcgUkdCQ29sb3IoMC43NSAqIDI1NSwgMC4yNSAqIDI1NSwgMC4yNSAqIDI1NSkpLCAwKSksXG4gICAgICAgICAgICAgICAgbmV3IFBsYW5lKG5ldyBWZWN0b3IoMCwgMCwgLTEpLCBuZXcgVmVjdG9yICgwLCAwLCA3MDApKS5zZXRNYXRlcmlhbChuZXcgTWF0ZXJpYWwobmV3IENvbG9yKG5ldyBSR0JDb2xvcigwLjc1ICogMjU1LCAwLjc1ICogMjU1LCAwLjc1ICogMjU1KSksIDApKSxcbiAgICAgICAgICAgICAgICBuZXcgUGxhbmUobmV3IFZlY3RvcigwLCAwLCAxKSwgbmV3IFZlY3RvciAoMCwgMCwgLTcwMCkpLnNldE1hdGVyaWFsKG5ldyBNYXRlcmlhbChDb2xvci5ibGFjaywgMCkpLFxuICAgICAgICAgICAgICAgIC8vIGJvdHRvbSBwbGFuZVxuICAgICAgICAgICAgICAgIC8qbmV3IFBvbHlnb24oXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoLTcwMCwgLTcwMCwgLTcwMCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoNzAwLCAtNzAwLCAtNzAwKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3Rvcig3MDAsIC03MDAsIDcwMCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoLTcwMCwgLTcwMCwgNzAwKVxuICAgICAgICAgICAgICAgICkuc2V0TWF0ZXJpYWwobmV3IE1hdGVyaWFsKENvbG9yLndoaXRlLCAwKS5zZXRMYW1iZXJ0Q29lZmYoMSkpLFxuICAgICAgICAgICAgICAgIC8vIGZyb250IHBsYW5lXG4gICAgICAgICAgICAgICAgbmV3IFBvbHlnb24oXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoLTcwMCwgLTcwMCwgNzAwKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3Rvcig3MDAsIC03MDAsIDcwMCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoNzAwLCA3MDAsIDcwMCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoLTcwMCwgNzAwLCA3MDApXG4gICAgICAgICAgICAgICAgKS5zZXRNYXRlcmlhbChuZXcgTWF0ZXJpYWwoQ29sb3Iud2hpdGUsIDApLnNldExhbWJlcnRDb2VmZigxKSksXG4gICAgICAgICAgICAgICAgLy8gdG9wIHBsYW5lXG4gICAgICAgICAgICAgICAgbmV3IFBvbHlnb24oXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoLTcwMCwgNzAwLCA3MDApLFxuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yKDcwMCwgNzAwLCA3MDApLFxuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yKDcwMCwgNzAwLCAtNzAwKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcigtNzAwLCA3MDAsIC03MDApXG4gICAgICAgICAgICAgICAgKS5zZXRNYXRlcmlhbChuZXcgTWF0ZXJpYWwoQ29sb3Iud2hpdGUsIDApLnNldExhbWJlcnRDb2VmZigxKSksXG4gICAgICAgICAgICAgICAgLy9yaWdodCBwbGFuZVxuICAgICAgICAgICAgICAgIG5ldyBQb2x5Z29uKFxuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yKDcwMCwgLTcwMCwgNzAwKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3Rvcig3MDAsIC03MDAsIC03MDApLFxuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yKDcwMCwgNzAwLCAtNzAwKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3Rvcig3MDAsIDcwMCwgNzAwKVxuICAgICAgICAgICAgICAgICkuc2V0TWF0ZXJpYWwobmV3IE1hdGVyaWFsKENvbG9yLmJsdWUpLnNldExhbWJlcnRDb2VmZigxKSksXG4gICAgICAgICAgICAgICAgLy9sZWZ0IHBsYW5lXG4gICAgICAgICAgICAgICAgbmV3IFBvbHlnb24oXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoLTcwMCwgLTcwMCwgLTcwMCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoLTcwMCwgLTcwMCwgNzAwKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcigtNzAwLCA3MDAsIDcwMCksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoLTcwMCwgNzAwLCAtNzAwKVxuICAgICAgICAgICAgICAgICkuc2V0TWF0ZXJpYWwobmV3IE1hdGVyaWFsKENvbG9yLnJlZCwgMCkuc2V0TGFtYmVydENvZWZmKDEpKSxcbiAgICAgICAgICAgICAgICAvLyBiYWNrIHBsYW5lXG4gICAgICAgICAgICAgICAgbmV3IFBvbHlnb24oXG4gICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IoNzAwLCAtNzAwLCAtNzAwKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcigtNzAwLCAtNzAwLCAtNzAwKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvcigtNzAwLCA3MDAsIC03MDApLFxuICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yKDcwMCwgNzAwLCAtNzAwKVxuICAgICAgICAgICAgICAgICkuc2V0TWF0ZXJpYWwobmV3IE1hdGVyaWFsKENvbG9yLmJsYWNrLCAwKS5zZXRMYW1iZXJ0Q29lZmYoMSkpLCovXG4gICAgICAgICAgICAgICAgbmV3IFNwaGVyZShuZXcgVmVjdG9yKC0yNTAsIC01MDAsIDQ1MCksIDIwMClcbiAgICAgICAgICAgICAgICAgICAgLnNldE1hdGVyaWFsKG5ldyBNYXRlcmlhbChDb2xvci5ibGFjaywgMSkpLFxuICAgICAgICAgICAgICAgIG5ldyBTcGhlcmUobmV3IFZlY3RvcigyNTAsIC01MDAsIDQwMCksIDIwMClcbiAgICAgICAgICAgICAgICAgICAgLnNldE1hdGVyaWFsKG5ldyBNYXRlcmlhbChDb2xvci5ncmVlbiwgMCkpXG4gICAgICAgICAgICBdXG4gICAgICAgIH0pXG4gICAgKTtcblxuICAgIHRyYWNlci5yZW5kZXIoZGF0YVswXSwgZGF0YVsxXSk7XG59OyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
