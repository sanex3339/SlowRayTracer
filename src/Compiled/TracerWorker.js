var AbstractLight_1=require("./Lights/AbstractLight"),Camera_1=require("./Camera"),Color_1=require("./Color/Color"),IntersectPoint_1=require("./IntersectPoint"),Material_1=require("./Material"),Polygon_1=require("./Objects/Polygon"),Ray_1=require("./Ray"),RGBColor_1=require("./Color/RGBColor"),Scene_1=require("./Scene"),Sphere_1=require("./Objects/Sphere"),SphericalLight_1=require("./Lights/SphericalLight"),Vector_1=require("./Vector"),Tracer=function(){function e(){this.pixelSamples=4,this.shadowSamples=50,this.giSamples=50,this.aoSamples=50,this.screenWidth=250,this.screenHeight=250}return e.prototype.cosineSampleHemisphere=function(e){var t,r,o=Math.random(),a=Math.random(),c=Math.sqrt(o),i=2*Math.PI*a;return t=Math.abs(e.getCoordinates().x)<.5?Vector_1.Vector.cross(e,new Vector_1.Vector(1,0,0)):Vector_1.Vector.cross(e,new Vector_1.Vector(0,1,0)),r=Vector_1.Vector.cross(e,t),Vector_1.Vector.add(Vector_1.Vector.scale(e,Math.sqrt(1-o)),Vector_1.Vector.add(Vector_1.Vector.scale(t,c*Math.cos(i)),Vector_1.Vector.scale(r,c*Math.sin(i))))},e.prototype.getColor=function(e,t){void 0===t&&(t=!0);var r=this.trace(e),o=Color_1.Color.black,a=Color_1.Color.black;return r.getIntersect()?(o=this.getDiffuseColor(e,r,t),t&&(a=this.getReflectionColor(e,r)),o.add(a)):Color_1.Color.black},e.prototype.getDiffuseColor=function(e,t,r){void 0===r&&(r=!0);for(var o,a,c,i,n,l,s,g,_,V,h=Color_1.Color.black,w=0,C=this.scene.getLights();w<C.length;w++){var p=C[w];if(t.getOwner()instanceof AbstractLight_1.AbstractLight)return t.getOwner().getMaterial().getColor();if(l=this.getLightPower(t,p),o=Color_1.Color.black,a=Color_1.Color.black,c=Color_1.Color.black,n=Vector_1.Vector.normalize(Vector_1.Vector.substract(t.getHitPoint(),p.getPosition())),r)for(var d=0;d<this.giSamples;d++){var m=void 0;i=this.cosineSampleHemisphere(t.getOwner().getNormal(t.getHitPoint())),m=this.getColor(new Ray_1.Ray(t.getHitPoint(),i),!1),c=c.add(m)}c=c.divide(this.giSamples),g=-Vector_1.Vector.dot(n,t.getNormal()),o=o.add(t.getOwner().getMaterial().getColor().add(c).multiple(p.getMaterial().getColor().scaled(l*g*t.getOwner().getMaterial().getLambertCoeff()))),s=Vector_1.Vector.reflect(n,t.getNormal()),_=-Vector_1.Vector.dot(s,e.getDirection()),_>0&&(V=Math.pow(_,35),a=a.add(t.getOwner().getMaterial().getColor().multiple(p.getMaterial().getColor().scaled(l*V*t.getOwner().getMaterial().getPhongCoeff()))));for(var M=0,d=0;d<this.aoSamples;d++){var f=this.cosineSampleHemisphere(t.getOwner().getNormal(t.getHitPoint())),u=this.trace(new Ray_1.Ray(t.getHitPoint(),f));u.getIntersect()&&(u.getDistanceFromOrigin()>200||M++)}h=h.add(o.multiple(Color_1.Color.white.scaled(1-.67*M/this.aoSamples)).add(a))}return h},e.prototype.getReflectionColor=function(e,t){var r,o,a=e.getIteration(),c=t.getOwner().getMaterial().getReflectionValue();return e.setIteration(--a),0===a||0===c?Color_1.Color.black:(o=Vector_1.Vector.reflect(e.getDirection(),t.getNormal()),r=this.getColor(new Ray_1.Ray(t.getHitPoint(),o,a)).scaled(c))},e.prototype.getPerspectiveVector=function(e,t){var r=this.scene.getCamera();return Vector_1.Vector.normalize(Vector_1.Vector.add(r.getForwardVector(),Vector_1.Vector.add(Vector_1.Vector.scale(r.getRightVector(),r.recenterX(e)),Vector_1.Vector.scale(r.getUpVector(),r.recenterY(t)))))},e.prototype.getLightPower=function(e,t){for(var r,o,a=t.getPower(),c=0,i=0;i<this.shadowSamples;i++)r=t.getRandomPoint(),o=this.trace(new Ray_1.Ray(e.getHitPoint(),Vector_1.Vector.substract(Vector_1.Vector.substract(t.getPosition(),r),e.getHitPoint()))),o.getIntersect()&&o.getOwner()instanceof AbstractLight_1.AbstractLight&&(c+=(a-Vector_1.Vector.substract(Vector_1.Vector.substract(t.getPosition(),r),e.getHitPoint()).getLength()*(a/t.getFadeRadius()))/this.shadowSamples);return c},e.prototype.trace=function(e){for(var t,r=new IntersectPoint_1.IntersectPoint,o=1/0,a=this.scene.getObjects().concat(this.scene.getLights()),c=0,i=a;c<i.length;c++){var n=i[c];t=n.getIntersectData(e),t&&t.distance<o&&(o=t.distance,r.setIntersect(),r.setHitPoint(t.hitPoint),r.setNormal(t.normal),r.setDistanceFromOrigin(t.distance),r.setOwner(n))}return r},e.prototype.render=function(e,t,r,o){var a,c,i,n=.5,l=Color_1.Color.black;this.screenWidth=e,this.screenHeight=t;for(var s=0;s<this.pixelSamples;s++)a=0,this.pixelSamples>1&&(s%2?a+=Math.random()*n:a-=Math.random()*n),c=new Ray_1.Ray(this.scene.getCamera().getPosition(),this.getPerspectiveVector(r+a,o+a)),l=l.add(this.getColor(c));l=l.divide(this.pixelSamples);for(var g in l)l[g]=Color_1.Color.sRGBEncode(l[g]);i=Color_1.Color.toRGB(l),self.postMessage([r,o,i.red,i.green,i.blue])},e.prototype.setScene=function(e){this.scene=e},e}();onmessage=function(e){var t=e.data;"string"==typeof t&&(t=JSON.parse("["+t+"]"));var r=new Tracer;r.setScene(new Scene_1.Scene({camera:new Camera_1.Camera(new Vector_1.Vector(0,0,-699),new Vector_1.Vector(0,0,1),t[0],t[1]),lights:[new SphericalLight_1.SphericalLight(new Vector_1.Vector(0,600,0),.6,100).setMaterial(new Material_1.Material(Color_1.Color.white)),new SphericalLight_1.SphericalLight(new Vector_1.Vector(0,0,0),.6,150).setMaterial(new Material_1.Material(new Color_1.Color(new RGBColor_1.RGBColor(255,235,200))))],objects:[new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(700,-700,700),new Vector_1.Vector(-700,-700,700)).setMaterial(new Material_1.Material(Color_1.Color.white,0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,700),new Vector_1.Vector(700,-700,700),new Vector_1.Vector(700,700,700),new Vector_1.Vector(-700,700,700)).setMaterial(new Material_1.Material(Color_1.Color.white,0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,700,700),new Vector_1.Vector(700,700,700),new Vector_1.Vector(700,700,-700),new Vector_1.Vector(-700,700,-700)).setMaterial(new Material_1.Material(Color_1.Color.white,0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(700,-700,700),new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(700,700,-700),new Vector_1.Vector(700,700,700)).setMaterial(new Material_1.Material(Color_1.Color.blue).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(-700,-700,700),new Vector_1.Vector(-700,700,700),new Vector_1.Vector(-700,700,-700)).setMaterial(new Material_1.Material(Color_1.Color.red,0).setLambertCoeff(1)),new Polygon_1.Polygon(new Vector_1.Vector(700,-700,-700),new Vector_1.Vector(-700,-700,-700),new Vector_1.Vector(-700,700,-700),new Vector_1.Vector(700,700,-700)).setMaterial(new Material_1.Material(Color_1.Color.black,0).setLambertCoeff(1)),new Sphere_1.Sphere(new Vector_1.Vector(-250,-500,450),200).setMaterial(new Material_1.Material(Color_1.Color.black,1)),new Sphere_1.Sphere(new Vector_1.Vector(250,-500,400),200).setMaterial(new Material_1.Material(Color_1.Color.green,0))]})),r.render(t[0],t[1],t[2],t[3])};
//# sourceMappingURL=data:application/json;base64,
